{"relationshipsSections":[{"kind":"relationships","type":"conformsTo","identifiers":["doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/DeclarationComponent","doc:\/\/SyntaxSparrow\/s23CustomStringConvertibleP","doc:\/\/SyntaxSparrow\/SQ","doc:\/\/SyntaxSparrow\/SH","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/SyntaxRepresenting"],"title":"Conforms To"}],"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Closure","kind":"identifier"}],"languages":["swift"]}],"kind":"declarations"},{"kind":"content","content":[{"type":"heading","level":2,"text":"Overview","anchor":"overview"},{"inlineContent":[{"type":"text","text":"A closure is a self-contained block of functionality that can be passed around and used in your code. In Swift, closures are similar to blocks in"},{"type":"text","text":" "},{"text":"C and Objective-C and","type":"text"},{"type":"text","text":" "},{"text":"to lambdas in other programming languages.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"An instance of the "},{"type":"codeVoice","code":"Closure"},{"type":"text","text":" struct provides access to:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The input and output types of the closure."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Whether the closureâ€™s input or output type is void."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Whether the closure is optional.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Whether the closure has the ","type":"text"},{"code":"@escaping","type":"codeVoice"},{"text":" attribute or is auto-escaping.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"text":"This struct also includes functionality to create a closure instance from a ","type":"text"},{"type":"codeVoice","code":"FunctionTypeSyntax"},{"type":"text","text":" node."}],"type":"paragraph"}]}],"sections":[],"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/init(node:)"]},{"title":"Instance Properties","identifiers":["doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/declaration","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/description","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/effectSpecifiers","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/input","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/isAutoEscaping","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/isEscaping","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/isOptional","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/isVoidInput","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/isVoidOutput","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/node","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/output","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/rawInput","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/rawOutput"]},{"identifiers":["doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/Equatable-Implementations","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/Hashable-Implementations"],"title":"Default Implementations","generated":true}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/syntaxsparrow\/closure"]}],"metadata":{"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Closure"}],"symbolKind":"struct","title":"Closure","roleHeading":"Structure","role":"symbol","navigatorTitle":[{"text":"Closure","kind":"identifier"}],"modules":[{"name":"SyntaxSparrow"}],"externalID":"s:13SyntaxSparrow7ClosureV"},"schemaVersion":{"major":0,"minor":3,"patch":0},"abstract":[{"text":"Represents a Swift closure expression.","type":"text"}],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow"]]},"identifier":{"url":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure","interfaceLanguage":"swift"},"references":{"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure":{"type":"topic","kind":"symbol","navigatorTitle":[{"text":"Closure","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure","abstract":[{"type":"text","text":"Represents a Swift closure expression."}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Closure"}],"title":"Closure","url":"\/documentation\/syntaxsparrow\/closure"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/rawInput":{"role":"symbol","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/rawInput","kind":"symbol","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"rawInput"},{"kind":"text","text":": "},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"}],"url":"\/documentation\/syntaxsparrow\/closure\/rawinput","abstract":[{"type":"text","text":"Will return the input string for the closure. Returns an empty string if no result is found."}],"title":"rawInput","type":"topic"},"doc://SyntaxSparrow/s23CustomStringConvertibleP":{"type":"unresolvable","identifier":"doc:\/\/SyntaxSparrow\/s23CustomStringConvertibleP","title":"Swift.CustomStringConvertible"},"doc://SyntaxSparrow/SH":{"identifier":"doc:\/\/SyntaxSparrow\/SH","title":"Swift.Hashable","type":"unresolvable"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/isAutoEscaping":{"type":"topic","kind":"symbol","url":"\/documentation\/syntaxsparrow\/closure\/isautoescaping","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/isAutoEscaping","title":"isAutoEscaping","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"isAutoEscaping","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}],"role":"symbol","abstract":[{"text":"Bool whether the closure is auto escaping.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This would be "},{"type":"codeVoice","code":"true"},{"text":" when the closure itself is optional as swift expects them to be auto-escaping.","type":"text"}]},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/isEscaping":{"title":"isEscaping","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/isEscaping","url":"\/documentation\/syntaxsparrow\/closure\/isescaping","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"isEscaping","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}],"type":"topic","abstract":[{"text":"Bool whether the closure has the ","type":"text"},{"code":"@escaping","type":"codeVoice"},{"type":"text","text":" attribute."},{"text":" ","type":"text"},{"type":"strong","inlineContent":[{"text":"Note:","type":"text"}]},{"text":" This separate from the ","type":"text"},{"type":"codeVoice","code":"isAutoEscaping"},{"text":" proeprty as you may want to know whether something has the attribute or not.","type":"text"}],"kind":"symbol","role":"symbol"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/input":{"role":"symbol","kind":"symbol","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/input","type":"topic","abstract":[{"text":"Will return the closure input element from the input ","type":"text"},{"type":"codeVoice","code":"typeAnnotation"},{"text":" for the closure.","type":"text"},{"text":" ","type":"text"},{"inlineContent":[{"text":"Note:","type":"text"}],"type":"strong"},{"type":"text","text":" This will "},{"inlineContent":[{"text":"always","type":"text"}],"type":"strong"},{"text":" resolve to ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType\/tuple(_:)"},{"text":" with one or more parameters","type":"text"},{"type":"text","text":" "},{"type":"text","text":"or "},{"isActive":true,"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType\/tuple(_:)","type":"reference"},{"text":" if there are no inputs. i.e","type":"text"}],"title":"input","url":"\/documentation\/syntaxsparrow\/closure\/input","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"input","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:13SyntaxSparrow10EntityTypeO","kind":"typeIdentifier","text":"EntityType"}]},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/Equatable-Implementations":{"abstract":[],"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/Equatable-Implementations","type":"topic","url":"\/documentation\/syntaxsparrow\/closure\/equatable-implementations","kind":"article","role":"collectionGroup","title":"Equatable Implementations"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/output":{"role":"symbol","kind":"symbol","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/output","type":"topic","title":"output","url":"\/documentation\/syntaxsparrow\/closure\/output","abstract":[{"type":"text","text":"Will return the closure output elements from the input "},{"code":"typeAnnotation","type":"codeVoice"},{"type":"text","text":" for the closure."}],"fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"output","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:13SyntaxSparrow10EntityTypeO","kind":"typeIdentifier","text":"EntityType"}]},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/description":{"title":"description","url":"\/documentation\/syntaxsparrow\/closure\/description","role":"symbol","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/description","abstract":[],"fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"description","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:SS","kind":"typeIdentifier","text":"String"}],"type":"topic","kind":"symbol"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/isOptional":{"role":"symbol","kind":"symbol","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/isOptional","type":"topic","title":"isOptional","url":"\/documentation\/syntaxsparrow\/closure\/isoptional","abstract":[{"type":"text","text":"Will return"},{"code":"true","type":"codeVoice"},{"text":" if the ","type":"text"},{"code":"output","type":"codeVoice"},{"text":" is equal to ","type":"text"},{"type":"codeVoice","code":".void"},{"text":".","type":"text"}],"fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"isOptional","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}]},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/init(node:)":{"role":"symbol","kind":"symbol","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/init(node:)","type":"topic","title":"init(node:)","url":"\/documentation\/syntaxsparrow\/closure\/init(node:)","abstract":[{"type":"text","text":"Creates a new "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure"},{"text":" instance from an ","type":"text"},{"type":"codeVoice","code":"FunctionTypeSyntax"},{"type":"text","text":" node."}],"fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"node"},{"text":": ","kind":"text"},{"text":"FunctionTypeSyntax","kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax012FunctionTypeB0V"},{"text":")","kind":"text"}]},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/effectSpecifiers":{"role":"symbol","kind":"symbol","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/effectSpecifiers","type":"topic","title":"effectSpecifiers","url":"\/documentation\/syntaxsparrow\/closure\/effectspecifiers","abstract":[{"text":"Struct representing the state of any effect specifiers on the initializer signature.","type":"text"}],"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"effectSpecifiers"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:13SyntaxSparrow16EffectSpecifiersV","text":"EffectSpecifiers","kind":"typeIdentifier"},{"kind":"text","text":"?"}]},"doc://SyntaxSparrow/documentation/SyntaxSparrow/SyntaxRepresenting":{"kind":"symbol","title":"SyntaxRepresenting","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SyntaxRepresenting","kind":"identifier"}],"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/SyntaxRepresenting","navigatorTitle":[{"text":"SyntaxRepresenting","kind":"identifier"}],"role":"symbol","type":"topic","url":"\/documentation\/syntaxsparrow\/syntaxrepresenting","abstract":[]},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/isVoidOutput":{"type":"topic","title":"isVoidOutput","url":"\/documentation\/syntaxsparrow\/closure\/isvoidoutput","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/isVoidOutput","kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"Will return"},{"type":"codeVoice","code":"true"},{"text":" if the ","type":"text"},{"code":"typeAnnotation","type":"codeVoice"},{"text":" is a closure and the input is a void block. i.e ","type":"text"},{"code":"() -> (Void)\/() -> (())","type":"codeVoice"},{"type":"text","text":"."}],"fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"isVoidOutput","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}]},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/node":{"type":"topic","title":"node","url":"\/documentation\/syntaxsparrow\/closure\/node","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/node","kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"The raw syntax node being represented by the instance."}],"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"node"},{"kind":"text","text":": "},{"preciseIdentifier":"s:11SwiftSyntax012FunctionTypeB0V","text":"FunctionTypeSyntax","kind":"typeIdentifier"}]},"doc://SyntaxSparrow/documentation/SyntaxSparrow/DeclarationComponent":{"url":"\/documentation\/syntaxsparrow\/declarationcomponent","role":"symbol","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/DeclarationComponent","title":"DeclarationComponent","navigatorTitle":[{"text":"DeclarationComponent","kind":"identifier"}],"kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Public protocol that any semantic elements not considered a declaration will conform to."},{"text":" ","type":"text"},{"type":"text","text":"A declaration component is considered a semantic element that supports or decorates a declaration such as attributes, modifiers, generic parameter\/requirement, parameters, etc"}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"DeclarationComponent"}]},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/isVoidInput":{"type":"topic","title":"isVoidInput","url":"\/documentation\/syntaxsparrow\/closure\/isvoidinput","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/isVoidInput","kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"Will return"},{"code":"true","type":"codeVoice"},{"text":" if the ","type":"text"},{"code":"input","type":"codeVoice"},{"type":"text","text":" is equal to "},{"type":"codeVoice","code":".void"},{"text":".","type":"text"}],"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"isVoidInput","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"}]},"doc://SyntaxSparrow/SQ":{"type":"unresolvable","title":"Swift.Equatable","identifier":"doc:\/\/SyntaxSparrow\/SQ"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/EntityType/tuple(_:)":{"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType\/tuple(_:)","fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"text":"tuple","kind":"identifier"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Tuple","preciseIdentifier":"s:13SyntaxSparrow5TupleV"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"A "},{"code":"tuple","type":"codeVoice"},{"text":" type is used when a parameterâ€™s type is a valid ","type":"text"},{"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Tuple","type":"reference","isActive":true},{"text":" type.","type":"text"}],"role":"symbol","type":"topic","title":"EntityType.tuple(_:)","kind":"symbol","url":"\/documentation\/syntaxsparrow\/entitytype\/tuple(_:)"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/rawOutput":{"type":"topic","title":"rawOutput","url":"\/documentation\/syntaxsparrow\/closure\/rawoutput","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/rawOutput","kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"Will return the return type string for the closure. Returns an empty string if no result is found."}],"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"rawOutput","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"}]},"doc://SyntaxSparrow/documentation/SyntaxSparrow":{"kind":"symbol","role":"collection","type":"topic","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow","url":"\/documentation\/syntaxsparrow","abstract":[],"title":"SyntaxSparrow"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/declaration":{"type":"topic","title":"declaration","url":"\/documentation\/syntaxsparrow\/closure\/declaration","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/declaration","kind":"symbol","role":"symbol","abstract":[{"text":"The full declaration string.","type":"text"}],"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"declaration","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"}]},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/Hashable-Implementations":{"type":"topic","title":"Hashable Implementations","url":"\/documentation\/syntaxsparrow\/closure\/hashable-implementations","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/Hashable-Implementations","kind":"article","role":"collectionGroup","abstract":[]}}}