{"metadata":{"symbolKind":"struct","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Closure"}],"role":"symbol","modules":[{"name":"SyntaxSparrow"}],"title":"Closure","navigatorTitle":[{"text":"Closure","kind":"identifier"}],"externalID":"s:13SyntaxSparrow7ClosureV","roleHeading":"Structure"},"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Closure","kind":"identifier"}],"languages":["swift"],"platforms":["macOS"]}],"kind":"declarations"},{"content":[{"type":"heading","text":"Overview","anchor":"overview","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"A closure is a self-contained block of functionality that can be passed around and used in your code. In Swift, closures are similar to blocks in"},{"type":"text","text":" "},{"type":"text","text":"C and Objective-C and"},{"type":"text","text":" "},{"type":"text","text":"to lambdas in other programming languages."}]},{"inlineContent":[{"type":"text","text":"An instance of the "},{"type":"codeVoice","code":"Closure"},{"text":" struct provides access to:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"The input and output types of the closure.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Whether the closureâ€™s input or output type is void.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Whether the closure is optional."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Whether the closure has the "},{"type":"codeVoice","code":"@escaping"},{"text":" attribute or is auto-escaping.","type":"text"}]}]}],"type":"unorderedList"},{"inlineContent":[{"text":"This struct also includes functionality to create a closure instance from a ","type":"text"},{"code":"FunctionTypeSyntax","type":"codeVoice"},{"text":" node.","type":"text"}],"type":"paragraph"}],"kind":"content"}],"schemaVersion":{"minor":3,"patch":0,"major":0},"relationshipsSections":[{"type":"conformsTo","title":"Conforms To","kind":"relationships","identifiers":["doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/DeclarationComponent","doc:\/\/SyntaxSparrow\/s23CustomStringConvertibleP","doc:\/\/SyntaxSparrow\/SQ","doc:\/\/SyntaxSparrow\/SH","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/SyntaxRepresenting"]}],"sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/syntaxsparrow\/closure"]}],"identifier":{"url":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure","interfaceLanguage":"swift"},"abstract":[{"text":"Represents a Swift closure expression.","type":"text"}],"hierarchy":{"paths":[["doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow"]]},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/init(node:)"]},{"identifiers":["doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/declaration","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/description","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/effectSpecifiers","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/input","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/isAutoEscaping","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/isEscaping","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/isOptional","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/isVoidInput","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/isVoidOutput","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/node","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/output","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/rawInput","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/rawOutput"],"title":"Instance Properties"},{"title":"Default Implementations","identifiers":["doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/Equatable-Implementations","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/Hashable-Implementations"],"generated":true}],"kind":"symbol","references":{"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/rawOutput":{"type":"topic","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/rawOutput","url":"\/documentation\/syntaxsparrow\/closure\/rawoutput","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"rawOutput","kind":"identifier"},{"kind":"text","text":": "},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"}],"role":"symbol","kind":"symbol","abstract":[{"text":"Will return the return type string for the closure. Returns an empty string if no result is found.","type":"text"}],"title":"rawOutput"},"doc://SyntaxSparrow/SH":{"title":"Swift.Hashable","identifier":"doc:\/\/SyntaxSparrow\/SH","type":"unresolvable"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/isVoidInput":{"kind":"symbol","type":"topic","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/isVoidInput","url":"\/documentation\/syntaxsparrow\/closure\/isvoidinput","abstract":[{"text":"Will return","type":"text"},{"type":"codeVoice","code":"true"},{"type":"text","text":" if the "},{"type":"codeVoice","code":"input"},{"text":" is equal to ","type":"text"},{"code":".void","type":"codeVoice"},{"text":".","type":"text"}],"fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"isVoidInput","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"title":"isVoidInput","role":"symbol"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/isEscaping":{"kind":"symbol","type":"topic","url":"\/documentation\/syntaxsparrow\/closure\/isescaping","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/isEscaping","abstract":[{"type":"text","text":"Bool whether the closure has the "},{"type":"codeVoice","code":"@escaping"},{"type":"text","text":" attribute."},{"type":"text","text":" "},{"inlineContent":[{"type":"text","text":"Note:"}],"type":"strong"},{"text":" This separate from the ","type":"text"},{"code":"isAutoEscaping","type":"codeVoice"},{"type":"text","text":" proeprty as you may want to know whether something has the attribute or not."}],"fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"isEscaping","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"}],"title":"isEscaping","role":"symbol"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/isVoidOutput":{"kind":"symbol","type":"topic","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/isVoidOutput","url":"\/documentation\/syntaxsparrow\/closure\/isvoidoutput","abstract":[{"type":"text","text":"Will return"},{"code":"true","type":"codeVoice"},{"text":" if the ","type":"text"},{"type":"codeVoice","code":"typeAnnotation"},{"type":"text","text":" is a closure and the input is a void block. i.e "},{"type":"codeVoice","code":"() -> (Void)\/() -> (())"},{"text":".","type":"text"}],"fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"isVoidOutput","kind":"identifier"},{"kind":"text","text":": "},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"}],"title":"isVoidOutput","role":"symbol"},"doc://SyntaxSparrow/documentation/SyntaxSparrow":{"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow","url":"\/documentation\/syntaxsparrow","kind":"symbol","title":"SyntaxSparrow","role":"collection","abstract":[],"type":"topic"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/isOptional":{"kind":"symbol","type":"topic","url":"\/documentation\/syntaxsparrow\/closure\/isoptional","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/isOptional","abstract":[{"type":"text","text":"Will return"},{"type":"codeVoice","code":"true"},{"type":"text","text":" if the "},{"code":"output","type":"codeVoice"},{"text":" is equal to ","type":"text"},{"code":".void","type":"codeVoice"},{"type":"text","text":"."}],"fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"isOptional","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"}],"title":"isOptional","role":"symbol"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/SyntaxRepresenting":{"title":"SyntaxRepresenting","abstract":[],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"SyntaxRepresenting"}],"navigatorTitle":[{"kind":"identifier","text":"SyntaxRepresenting"}],"role":"symbol","type":"topic","kind":"symbol","url":"\/documentation\/syntaxsparrow\/syntaxrepresenting","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/SyntaxRepresenting"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/rawInput":{"kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Will return the input string for the closure. Returns an empty string if no result is found."}],"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/rawInput","title":"rawInput","role":"symbol","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"rawInput","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"}],"url":"\/documentation\/syntaxsparrow\/closure\/rawinput"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/description":{"kind":"symbol","type":"topic","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/description","url":"\/documentation\/syntaxsparrow\/closure\/description","abstract":[],"fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"description","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"}],"title":"description","role":"symbol"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure":{"type":"topic","abstract":[{"type":"text","text":"Represents a Swift closure expression."}],"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Closure","kind":"identifier"}],"kind":"symbol","role":"symbol","url":"\/documentation\/syntaxsparrow\/closure","navigatorTitle":[{"text":"Closure","kind":"identifier"}],"title":"Closure"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/effectSpecifiers":{"kind":"symbol","type":"topic","url":"\/documentation\/syntaxsparrow\/closure\/effectspecifiers","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/effectSpecifiers","abstract":[{"type":"text","text":"Struct representing the state of any effect specifiers on the initializer signature."}],"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"effectSpecifiers","kind":"identifier"},{"kind":"text","text":": "},{"preciseIdentifier":"s:13SyntaxSparrow16EffectSpecifiersV","text":"EffectSpecifiers","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"title":"effectSpecifiers","role":"symbol"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/isAutoEscaping":{"kind":"symbol","type":"topic","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/isAutoEscaping","url":"\/documentation\/syntaxsparrow\/closure\/isautoescaping","abstract":[{"text":"Bool whether the closure is auto escaping.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This would be "},{"code":"true","type":"codeVoice"},{"text":" when the closure itself is optional as swift expects them to be auto-escaping.","type":"text"}],"fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"isAutoEscaping"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"}],"title":"isAutoEscaping","role":"symbol"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/Equatable-Implementations":{"url":"\/documentation\/syntaxsparrow\/closure\/equatable-implementations","type":"topic","kind":"article","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/Equatable-Implementations","title":"Equatable Implementations","role":"collectionGroup","abstract":[]},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/output":{"role":"symbol","abstract":[{"type":"text","text":"Will return the closure output elements from the input "},{"type":"codeVoice","code":"typeAnnotation"},{"type":"text","text":" for the closure."}],"title":"output","kind":"symbol","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/output","url":"\/documentation\/syntaxsparrow\/closure\/output","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"output","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:13SyntaxSparrow10EntityTypeO","text":"EntityType"}],"type":"topic"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/DeclarationComponent":{"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"DeclarationComponent","kind":"identifier"}],"kind":"symbol","role":"symbol","title":"DeclarationComponent","navigatorTitle":[{"kind":"identifier","text":"DeclarationComponent"}],"abstract":[{"type":"text","text":"Public protocol that any semantic elements not considered a declaration will conform to."},{"type":"text","text":" "},{"type":"text","text":"A declaration component is considered a semantic element that supports or decorates a declaration such as attributes, modifiers, generic parameter\/requirement, parameters, etc"}],"type":"topic","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/DeclarationComponent","url":"\/documentation\/syntaxsparrow\/declarationcomponent"},"doc://SyntaxSparrow/s23CustomStringConvertibleP":{"title":"Swift.CustomStringConvertible","type":"unresolvable","identifier":"doc:\/\/SyntaxSparrow\/s23CustomStringConvertibleP"},"doc://SyntaxSparrow/SQ":{"title":"Swift.Equatable","type":"unresolvable","identifier":"doc:\/\/SyntaxSparrow\/SQ"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/node":{"type":"topic","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"node"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:11SwiftSyntax012FunctionTypeB0V","kind":"typeIdentifier","text":"FunctionTypeSyntax"}],"kind":"symbol","abstract":[{"text":"The raw syntax node being represented by the instance.","type":"text"}],"title":"node","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/node","url":"\/documentation\/syntaxsparrow\/closure\/node","role":"symbol"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/init(node:)":{"kind":"symbol","type":"topic","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/init(node:)","url":"\/documentation\/syntaxsparrow\/closure\/init(node:)","abstract":[{"type":"text","text":"Creates a new "},{"isActive":true,"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure","type":"reference"},{"type":"text","text":" instance from an "},{"code":"FunctionTypeSyntax","type":"codeVoice"},{"text":" node.","type":"text"}],"fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"("},{"text":"node","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax012FunctionTypeB0V","text":"FunctionTypeSyntax"},{"kind":"text","text":")"}],"title":"init(node:)","role":"symbol"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/input":{"type":"topic","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"input"},{"text":": ","kind":"text"},{"text":"EntityType","preciseIdentifier":"s:13SyntaxSparrow10EntityTypeO","kind":"typeIdentifier"}],"kind":"symbol","abstract":[{"text":"Will return the closure input element from the input ","type":"text"},{"type":"codeVoice","code":"typeAnnotation"},{"type":"text","text":" for the closure."}],"title":"input","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/input","url":"\/documentation\/syntaxsparrow\/closure\/input","role":"symbol"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/Hashable-Implementations":{"type":"topic","kind":"article","abstract":[],"title":"Hashable Implementations","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/Hashable-Implementations","url":"\/documentation\/syntaxsparrow\/closure\/hashable-implementations","role":"collectionGroup"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/declaration":{"type":"topic","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"declaration","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"}],"kind":"symbol","abstract":[{"type":"text","text":"The full declaration string."}],"title":"declaration","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/declaration","url":"\/documentation\/syntaxsparrow\/closure\/declaration","role":"symbol"}}}