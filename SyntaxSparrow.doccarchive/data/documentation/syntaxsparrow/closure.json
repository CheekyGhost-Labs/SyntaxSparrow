{"metadata":{"title":"Closure","role":"symbol","roleHeading":"Structure","modules":[{"name":"SyntaxSparrow"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Closure"}],"externalID":"s:13SyntaxSparrow7ClosureV","navigatorTitle":[{"kind":"identifier","text":"Closure"}],"symbolKind":"struct"},"schemaVersion":{"major":0,"patch":0,"minor":3},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure"},"sections":[],"topicSections":[{"identifiers":["doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/init(node:)"],"title":"Initializers"},{"identifiers":["doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/declaration","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/description","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/effectSpecifiers","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/input","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/isAutoEscaping","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/isEscaping","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/isOptional","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/isVoidInput","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/isVoidOutput","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/node","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/output","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/rawInput","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/rawOutput"],"title":"Instance Properties"},{"identifiers":["doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/Equatable-Implementations","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/Hashable-Implementations"],"title":"Default Implementations","generated":true}],"relationshipsSections":[{"kind":"relationships","title":"Conforms To","identifiers":["doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/DeclarationComponent","doc:\/\/SyntaxSparrow\/s23CustomStringConvertibleP","doc:\/\/SyntaxSparrow\/SQ","doc:\/\/SyntaxSparrow\/SH","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/SyntaxRepresenting"],"type":"conformsTo"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Closure","kind":"identifier"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","text":"Overview","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"A closure is a self-contained block of functionality that can be passed around and used in your code. In Swift, closures are similar to blocks in","type":"text"},{"text":" ","type":"text"},{"text":"C and Objective-C and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to lambdas in other programming languages."}]},{"inlineContent":[{"text":"An instance of the ","type":"text"},{"code":"Closure","type":"codeVoice"},{"text":" struct provides access to:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"The input and output types of the closure."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Whether the closureâ€™s input or output type is void."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Whether the closure is optional.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Whether the closure has the "},{"type":"codeVoice","code":"@escaping"},{"type":"text","text":" attribute or is auto-escaping."}]}]}]},{"inlineContent":[{"text":"This struct also includes functionality to create a closure instance from a ","type":"text"},{"type":"codeVoice","code":"FunctionTypeSyntax"},{"text":" node.","type":"text"}],"type":"paragraph"}]}],"abstract":[{"type":"text","text":"Represents a Swift closure expression."}],"hierarchy":{"paths":[["doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow"]]},"variants":[{"paths":["\/documentation\/syntaxsparrow\/closure"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","references":{"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/output":{"url":"\/documentation\/syntaxsparrow\/closure\/output","title":"output","role":"symbol","abstract":[{"type":"text","text":"Will return the closure output elements from the input "},{"type":"codeVoice","code":"typeAnnotation"},{"text":" for the closure.","type":"text"}],"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"output","kind":"identifier"},{"text":": ","kind":"text"},{"text":"EntityType","preciseIdentifier":"s:13SyntaxSparrow10EntityTypeO","kind":"typeIdentifier"}],"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/output","kind":"symbol","type":"topic"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/isVoidOutput":{"url":"\/documentation\/syntaxsparrow\/closure\/isvoidoutput","title":"isVoidOutput","role":"symbol","abstract":[{"type":"text","text":"Will return"},{"type":"codeVoice","code":"true"},{"type":"text","text":" if the "},{"type":"codeVoice","code":"typeAnnotation"},{"text":" is a closure and the input is a void block. i.e ","type":"text"},{"code":"() -> (Void)\/() -> (())","type":"codeVoice"},{"text":".","type":"text"}],"fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"isVoidOutput","kind":"identifier"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"}],"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/isVoidOutput","kind":"symbol","type":"topic"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/description":{"url":"\/documentation\/syntaxsparrow\/closure\/description","title":"description","role":"symbol","abstract":[],"fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"description","kind":"identifier"},{"kind":"text","text":": "},{"preciseIdentifier":"s:SS","kind":"typeIdentifier","text":"String"}],"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/description","kind":"symbol","type":"topic"},"doc://SyntaxSparrow/documentation/SyntaxSparrow":{"title":"SyntaxSparrow","role":"collection","url":"\/documentation\/syntaxsparrow","kind":"symbol","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow","type":"topic","abstract":[]},"doc://SyntaxSparrow/documentation/SyntaxSparrow/SyntaxRepresenting":{"navigatorTitle":[{"text":"SyntaxRepresenting","kind":"identifier"}],"type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"SyntaxRepresenting","kind":"identifier"}],"title":"SyntaxRepresenting","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/SyntaxRepresenting","role":"symbol","url":"\/documentation\/syntaxsparrow\/syntaxrepresenting","abstract":[],"kind":"symbol"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure":{"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure","url":"\/documentation\/syntaxsparrow\/closure","type":"topic","abstract":[{"type":"text","text":"Represents a Swift closure expression."}],"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Closure","kind":"identifier"}],"title":"Closure","navigatorTitle":[{"text":"Closure","kind":"identifier"}],"role":"symbol"},"doc://SyntaxSparrow/s23CustomStringConvertibleP":{"type":"unresolvable","identifier":"doc:\/\/SyntaxSparrow\/s23CustomStringConvertibleP","title":"Swift.CustomStringConvertible"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/declaration":{"url":"\/documentation\/syntaxsparrow\/closure\/declaration","title":"declaration","role":"symbol","abstract":[{"type":"text","text":"The full declaration string."}],"fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"declaration"},{"text":": ","kind":"text"},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"}],"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/declaration","kind":"symbol","type":"topic"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/init(node:)":{"url":"\/documentation\/syntaxsparrow\/closure\/init(node:)","title":"init(node:)","role":"symbol","abstract":[{"text":"Creates a new ","type":"text"},{"type":"reference","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure","isActive":true},{"type":"text","text":" instance from an "},{"type":"codeVoice","code":"FunctionTypeSyntax"},{"text":" node.","type":"text"}],"fragments":[{"kind":"identifier","text":"init"},{"text":"(","kind":"text"},{"text":"node","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:11SwiftSyntax012FunctionTypeB0V","text":"FunctionTypeSyntax","kind":"typeIdentifier"},{"text":")","kind":"text"}],"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/init(node:)","kind":"symbol","type":"topic"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/isEscaping":{"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/isEscaping","url":"\/documentation\/syntaxsparrow\/closure\/isescaping","type":"topic","abstract":[{"type":"text","text":"Bool whether the closure has the "},{"code":"@escaping","type":"codeVoice"},{"type":"text","text":" attribute."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Note:"}]},{"type":"text","text":" This separate from the "},{"type":"codeVoice","code":"isAutoEscaping"},{"text":" proeprty as you may want to know whether something has the attribute or not.","type":"text"}],"kind":"symbol","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"isEscaping","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}],"title":"isEscaping","role":"symbol"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/DeclarationComponent":{"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/DeclarationComponent","role":"symbol","title":"DeclarationComponent","kind":"symbol","url":"\/documentation\/syntaxsparrow\/declarationcomponent","type":"topic","abstract":[{"text":"Public protocol that any semantic elements not considered a declaration will conform to.","type":"text"},{"text":" ","type":"text"},{"text":"A declaration component is considered a semantic element that supports or decorates a declaration such as attributes, modifiers, generic parameter\/requirement, parameters, etc","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"DeclarationComponent"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"DeclarationComponent"}]},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/rawOutput":{"fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"rawOutput","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"}],"title":"rawOutput","type":"topic","url":"\/documentation\/syntaxsparrow\/closure\/rawoutput","role":"symbol","abstract":[{"type":"text","text":"Will return the return type string for the closure. Returns an empty string if no result is found."}],"kind":"symbol","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/rawOutput"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/effectSpecifiers":{"type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Struct representing the state of any effect specifiers on the initializer signature."}],"title":"effectSpecifiers","url":"\/documentation\/syntaxsparrow\/closure\/effectspecifiers","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"effectSpecifiers"},{"kind":"text","text":": "},{"text":"EffectSpecifiers","kind":"typeIdentifier","preciseIdentifier":"s:13SyntaxSparrow16EffectSpecifiersV"},{"text":"?","kind":"text"}],"role":"symbol","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/effectSpecifiers"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/input":{"type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Will return the closure input element from the input "},{"type":"codeVoice","code":"typeAnnotation"},{"text":" for the closure.","type":"text"}],"title":"input","url":"\/documentation\/syntaxsparrow\/closure\/input","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"input"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:13SyntaxSparrow10EntityTypeO","kind":"typeIdentifier","text":"EntityType"}],"role":"symbol","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/input"},"doc://SyntaxSparrow/SQ":{"type":"unresolvable","identifier":"doc:\/\/SyntaxSparrow\/SQ","title":"Swift.Equatable"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/isVoidInput":{"type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Will return"},{"type":"codeVoice","code":"true"},{"text":" if the ","type":"text"},{"type":"codeVoice","code":"input"},{"text":" is equal to ","type":"text"},{"code":".void","type":"codeVoice"},{"type":"text","text":"."}],"title":"isVoidInput","url":"\/documentation\/syntaxsparrow\/closure\/isvoidinput","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"isVoidInput","kind":"identifier"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"}],"role":"symbol","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/isVoidInput"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/node":{"type":"topic","kind":"symbol","abstract":[{"text":"The raw syntax node being represented by the instance.","type":"text"}],"title":"node","url":"\/documentation\/syntaxsparrow\/closure\/node","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"node","kind":"identifier"},{"text":": ","kind":"text"},{"text":"FunctionTypeSyntax","kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax012FunctionTypeB0V"}],"role":"symbol","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/node"},"doc://SyntaxSparrow/SH":{"type":"unresolvable","title":"Swift.Hashable","identifier":"doc:\/\/SyntaxSparrow\/SH"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/isAutoEscaping":{"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/isAutoEscaping","role":"symbol","abstract":[{"type":"text","text":"Bool whether the closure is auto escaping."},{"type":"text","text":" "},{"text":"This would be ","type":"text"},{"code":"true","type":"codeVoice"},{"type":"text","text":" when the closure itself is optional as swift expects them to be auto-escaping."}],"type":"topic","kind":"symbol","title":"isAutoEscaping","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"isAutoEscaping"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"}],"url":"\/documentation\/syntaxsparrow\/closure\/isautoescaping"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/isOptional":{"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/isOptional","role":"symbol","abstract":[{"type":"text","text":"Will return"},{"code":"true","type":"codeVoice"},{"type":"text","text":" if the "},{"code":"output","type":"codeVoice"},{"type":"text","text":" is equal to "},{"type":"codeVoice","code":".void"},{"text":".","type":"text"}],"type":"topic","kind":"symbol","title":"isOptional","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"isOptional","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"}],"url":"\/documentation\/syntaxsparrow\/closure\/isoptional"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/rawInput":{"type":"topic","kind":"symbol","url":"\/documentation\/syntaxsparrow\/closure\/rawinput","abstract":[{"type":"text","text":"Will return the input string for the closure. Returns an empty string if no result is found."}],"fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"rawInput"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"}],"role":"symbol","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/rawInput","title":"rawInput"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/Equatable-Implementations":{"type":"topic","kind":"article","url":"\/documentation\/syntaxsparrow\/closure\/equatable-implementations","abstract":[],"role":"collectionGroup","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/Equatable-Implementations","title":"Equatable Implementations"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/Hashable-Implementations":{"type":"topic","kind":"article","url":"\/documentation\/syntaxsparrow\/closure\/hashable-implementations","abstract":[],"role":"collectionGroup","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/Hashable-Implementations","title":"Hashable Implementations"}}}