{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Closure"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A closure is a self-contained block of functionality that can be passed around and used in your code. In Swift, closures are similar to blocks in"},{"type":"text","text":" "},{"type":"text","text":"C and Objective-C and"},{"type":"text","text":" "},{"type":"text","text":"to lambdas in other programming languages."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"An instance of the "},{"type":"codeVoice","code":"Closure"},{"type":"text","text":" struct provides access to:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The input and output types of the closure."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Whether the closureâ€™s input or output type is void."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Whether the closure is optional."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Whether the closure has the "},{"type":"codeVoice","code":"@escaping"},{"type":"text","text":" attribute or is auto-escaping."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This struct also includes functionality to create a closure instance from a "},{"type":"codeVoice","code":"FunctionTypeSyntax"},{"type":"text","text":" node."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/syntaxsparrow\/closure"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"identifiers":["doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/DeclarationComponent","doc:\/\/SyntaxSparrow\/s23CustomStringConvertibleP","doc:\/\/SyntaxSparrow\/SQ","doc:\/\/SyntaxSparrow\/SH","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/SyntaxRepresenting"],"kind":"relationships","title":"Conforms To","type":"conformsTo"}],"identifier":{"url":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Represents a Swift closure expression."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Closure"}],"title":"Closure","roleHeading":"Structure","role":"symbol","symbolKind":"struct","externalID":"s:13SyntaxSparrow7ClosureV","modules":[{"name":"SyntaxSparrow"}],"navigatorTitle":[{"kind":"identifier","text":"Closure"}]},"hierarchy":{"paths":[["doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow"]]},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/init(node:)"]},{"title":"Instance Properties","identifiers":["doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/declaration","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/input","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/isAutoEscaping","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/isEscaping","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/isOptional","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/isVoidInput","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/isVoidOutput","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/node","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/output","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/rawInput","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/rawOutput"]},{"title":"Default Implementations","identifiers":["doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/CustomStringConvertible-Implementations","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/Equatable-Implementations","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/Hashable-Implementations"],"generated":true}],"references":{"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/isVoidInput":{"role":"symbol","title":"isVoidInput","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"isVoidInput"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"type":"text","text":"Will return"},{"type":"codeVoice","code":"true"},{"type":"text","text":" if the "},{"type":"codeVoice","code":"input"},{"type":"text","text":" is equal to "},{"type":"codeVoice","code":".void"},{"type":"text","text":"."}],"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/isVoidInput","kind":"symbol","type":"topic","url":"\/documentation\/syntaxsparrow\/closure\/isvoidinput"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/isOptional":{"role":"symbol","title":"isOptional","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"isOptional"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"type":"text","text":"Will return"},{"type":"codeVoice","code":"true"},{"type":"text","text":" if the "},{"type":"codeVoice","code":"output"},{"type":"text","text":" is equal to "},{"type":"codeVoice","code":".void"},{"type":"text","text":"."}],"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/isOptional","kind":"symbol","type":"topic","url":"\/documentation\/syntaxsparrow\/closure\/isoptional"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/isEscaping":{"role":"symbol","title":"isEscaping","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"isEscaping"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"type":"text","text":"Bool whether the closure has the "},{"type":"codeVoice","code":"@escaping"},{"type":"text","text":" attribute."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Note:"}]},{"type":"text","text":" This separate from the "},{"type":"codeVoice","code":"isAutoEscaping"},{"type":"text","text":" proeprty as you may want to know whether something has the attribute or not."}],"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/isEscaping","kind":"symbol","type":"topic","url":"\/documentation\/syntaxsparrow\/closure\/isescaping"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/isAutoEscaping":{"role":"symbol","title":"isAutoEscaping","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"isAutoEscaping"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"type":"text","text":"Bool whether the closure is auto escaping."},{"type":"text","text":" "},{"type":"text","text":"This would be "},{"type":"codeVoice","code":"true"},{"type":"text","text":" when the closure itself is optional as swift expects them to be auto-escaping."}],"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/isAutoEscaping","kind":"symbol","type":"topic","url":"\/documentation\/syntaxsparrow\/closure\/isautoescaping"},"doc://SyntaxSparrow/SH":{"type":"unresolvable","title":"Swift.Hashable","identifier":"doc:\/\/SyntaxSparrow\/SH"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/DeclarationComponent":{"role":"symbol","title":"DeclarationComponent","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"DeclarationComponent"}],"abstract":[{"type":"text","text":"Public protocol that any semantic elements not considered a declaration will conform to."},{"type":"text","text":" "},{"type":"text","text":"A declaration component is considered a semantic element that supports or decorates a declaration such as attributes, modifiers, generic parameter\/requirement, parameters, etc"}],"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/DeclarationComponent","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"DeclarationComponent"}],"url":"\/documentation\/syntaxsparrow\/declarationcomponent"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/init(node:)":{"role":"symbol","title":"init(node:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"node"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"FunctionTypeSyntax","preciseIdentifier":"s:11SwiftSyntax012FunctionTypeB0V"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Creates a new "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure"},{"type":"text","text":" instance from an "},{"type":"codeVoice","code":"FunctionTypeSyntax"},{"type":"text","text":" node."}],"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/init(node:)","kind":"symbol","type":"topic","url":"\/documentation\/syntaxsparrow\/closure\/init(node:)"},"doc://SyntaxSparrow/s23CustomStringConvertibleP":{"type":"unresolvable","title":"Swift.CustomStringConvertible","identifier":"doc:\/\/SyntaxSparrow\/s23CustomStringConvertibleP"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/rawOutput":{"role":"symbol","title":"rawOutput","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"rawOutput"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"}],"abstract":[{"type":"text","text":"Will return the return type string for the closure. Returns an empty string if no result is found."}],"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/rawOutput","kind":"symbol","type":"topic","url":"\/documentation\/syntaxsparrow\/closure\/rawoutput"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/output":{"role":"symbol","title":"output","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"output"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"EntityType","preciseIdentifier":"s:13SyntaxSparrow10EntityTypeO"}],"abstract":[{"type":"text","text":"Will return the closure output elements from the input "},{"type":"codeVoice","code":"typeAnnotation"},{"type":"text","text":" for the closure."}],"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/output","kind":"symbol","type":"topic","url":"\/documentation\/syntaxsparrow\/closure\/output"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/CustomStringConvertible-Implementations":{"role":"collectionGroup","title":"CustomStringConvertible Implementations","abstract":[],"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/CustomStringConvertible-Implementations","kind":"article","type":"topic","url":"\/documentation\/syntaxsparrow\/closure\/customstringconvertible-implementations"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/input":{"role":"symbol","title":"input","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"input"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"EntityType","preciseIdentifier":"s:13SyntaxSparrow10EntityTypeO"}],"abstract":[{"type":"text","text":"Will return the closure input element from the input "},{"type":"codeVoice","code":"typeAnnotation"},{"type":"text","text":" for the closure."}],"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/input","kind":"symbol","type":"topic","url":"\/documentation\/syntaxsparrow\/closure\/input"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/isVoidOutput":{"role":"symbol","title":"isVoidOutput","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"isVoidOutput"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"type":"text","text":"Will return"},{"type":"codeVoice","code":"true"},{"type":"text","text":" if the "},{"type":"codeVoice","code":"typeAnnotation"},{"type":"text","text":" is a closure and the input is a void block. i.e "},{"type":"codeVoice","code":"() -> (Void)\/() -> (())"},{"type":"text","text":"."}],"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/isVoidOutput","kind":"symbol","type":"topic","url":"\/documentation\/syntaxsparrow\/closure\/isvoidoutput"},"doc://SyntaxSparrow/SQ":{"type":"unresolvable","title":"Swift.Equatable","identifier":"doc:\/\/SyntaxSparrow\/SQ"},"doc://SyntaxSparrow/documentation/SyntaxSparrow":{"role":"collection","title":"SyntaxSparrow","abstract":[],"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow","kind":"symbol","type":"topic","url":"\/documentation\/syntaxsparrow"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/declaration":{"role":"symbol","title":"declaration","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"declaration"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"}],"abstract":[{"type":"text","text":"The full declaration string."}],"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/declaration","kind":"symbol","type":"topic","url":"\/documentation\/syntaxsparrow\/closure\/declaration"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/node":{"role":"symbol","title":"node","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"node"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"FunctionTypeSyntax","preciseIdentifier":"s:11SwiftSyntax012FunctionTypeB0V"}],"abstract":[{"type":"text","text":"The raw syntax node being represented by the instance."}],"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/node","kind":"symbol","type":"topic","url":"\/documentation\/syntaxsparrow\/closure\/node"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure":{"role":"symbol","title":"Closure","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Closure"}],"abstract":[{"type":"text","text":"Represents a Swift closure expression."}],"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Closure"}],"url":"\/documentation\/syntaxsparrow\/closure"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/Equatable-Implementations":{"role":"collectionGroup","title":"Equatable Implementations","abstract":[],"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/Equatable-Implementations","kind":"article","type":"topic","url":"\/documentation\/syntaxsparrow\/closure\/equatable-implementations"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/SyntaxRepresenting":{"role":"symbol","title":"SyntaxRepresenting","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"SyntaxRepresenting"}],"abstract":[],"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/SyntaxRepresenting","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SyntaxRepresenting"}],"url":"\/documentation\/syntaxsparrow\/syntaxrepresenting"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/Hashable-Implementations":{"role":"collectionGroup","title":"Hashable Implementations","abstract":[],"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/Hashable-Implementations","kind":"article","type":"topic","url":"\/documentation\/syntaxsparrow\/closure\/hashable-implementations"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/rawInput":{"role":"symbol","title":"rawInput","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"rawInput"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"}],"abstract":[{"type":"text","text":"Will return the input string for the closure. Returns an empty string if no result is found."}],"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/rawInput","kind":"symbol","type":"topic","url":"\/documentation\/syntaxsparrow\/closure\/rawinput"}}}