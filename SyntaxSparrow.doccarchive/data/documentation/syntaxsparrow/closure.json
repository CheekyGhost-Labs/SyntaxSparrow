{"sections":[],"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Closure","kind":"identifier"}],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"text":"Overview","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"A closure is a self-contained block of functionality that can be passed around and used in your code. In Swift, closures are similar to blocks in","type":"text"},{"type":"text","text":" "},{"text":"C and Objective-C and","type":"text"},{"text":" ","type":"text"},{"text":"to lambdas in other programming languages.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"An instance of the "},{"type":"codeVoice","code":"Closure"},{"type":"text","text":" struct provides access to:"}]},{"items":[{"content":[{"inlineContent":[{"text":"The input and output types of the closure.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Whether the closure’s input or output type is void."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Whether the closure is optional.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Whether the closure has the "},{"type":"codeVoice","code":"@escaping"},{"type":"text","text":" attribute or is auto-escaping."}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"text":"This struct also includes functionality to create a closure instance from a ","type":"text"},{"code":"FunctionTypeSyntax","type":"codeVoice"},{"type":"text","text":" node."}],"type":"paragraph"}]}],"topicSections":[{"identifiers":["doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/init(node:)"],"title":"Initializers"},{"identifiers":["doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/declaration","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/description","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/effectSpecifiers","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/input","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/isAsync","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/isAutoEscaping","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/isEscaping","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/isOptional","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/isThrowing","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/isVoidInput","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/isVoidOutput","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/node","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/output","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/rawInput","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/rawOutput"],"title":"Instance Properties"},{"title":"Default Implementations","identifiers":["doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/Equatable-Implementations","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/Hashable-Implementations"],"generated":true}],"schemaVersion":{"major":0,"minor":3,"patch":0},"hierarchy":{"paths":[["doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow"]]},"relationshipsSections":[{"type":"conformsTo","title":"Conforms To","identifiers":["doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/DeclarationComponent","doc:\/\/SyntaxSparrow\/s23CustomStringConvertibleP","doc:\/\/SyntaxSparrow\/SQ","doc:\/\/SyntaxSparrow\/SH","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/SyntaxRepresenting"],"kind":"relationships"}],"variants":[{"paths":["\/documentation\/syntaxsparrow\/closure"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure","interfaceLanguage":"swift"},"metadata":{"role":"symbol","modules":[{"name":"SyntaxSparrow"}],"title":"Closure","externalID":"s:13SyntaxSparrow7ClosureV","roleHeading":"Structure","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Closure","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"Closure"}],"symbolKind":"struct"},"abstract":[{"type":"text","text":"Represents a Swift closure expression."}],"references":{"doc://SyntaxSparrow/documentation/SyntaxSparrow":{"abstract":[],"url":"\/documentation\/syntaxsparrow","type":"topic","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow","kind":"symbol","role":"collection","title":"SyntaxSparrow"},"doc://SyntaxSparrow/SH":{"title":"Swift.Hashable","identifier":"doc:\/\/SyntaxSparrow\/SH","type":"unresolvable"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/rawOutput":{"abstract":[{"text":"Will return the return type string for the closure. Returns an empty string if no result is found.","type":"text"}],"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/rawOutput","title":"rawOutput","url":"\/documentation\/syntaxsparrow\/closure\/rawoutput","role":"symbol","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"rawOutput"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"}],"type":"topic","kind":"symbol"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/isOptional":{"abstract":[{"type":"text","text":"Will return"},{"code":"true","type":"codeVoice"},{"text":" if the ","type":"text"},{"code":"output","type":"codeVoice"},{"type":"text","text":" is equal to "},{"code":".void","type":"codeVoice"},{"text":".","type":"text"}],"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/isOptional","title":"isOptional","url":"\/documentation\/syntaxsparrow\/closure\/isoptional","role":"symbol","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"isOptional","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"type":"topic","kind":"symbol"},"doc://SyntaxSparrow/SQ":{"identifier":"doc:\/\/SyntaxSparrow\/SQ","type":"unresolvable","title":"Swift.Equatable"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/isAsync":{"type":"topic","role":"symbol","kind":"symbol","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"isAsync","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"title":"isAsync","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/isAsync","url":"\/documentation\/syntaxsparrow\/closure\/isasync","abstract":[{"type":"text","text":"Returns "},{"type":"codeVoice","code":"true"},{"text":" when the ","type":"text"},{"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/effectSpecifiers","type":"reference","isActive":true},{"text":" has the ","type":"text"},{"type":"codeVoice","code":"throw"},{"type":"text","text":" keyword."}]},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/isVoidInput":{"fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"isVoidInput"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}],"url":"\/documentation\/syntaxsparrow\/closure\/isvoidinput","role":"symbol","abstract":[{"type":"text","text":"Will return"},{"type":"codeVoice","code":"true"},{"type":"text","text":" if the "},{"code":"input","type":"codeVoice"},{"type":"text","text":" is equal to "},{"type":"codeVoice","code":".void"},{"text":".","type":"text"}],"type":"topic","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/isVoidInput","kind":"symbol","title":"isVoidInput"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/rawInput":{"fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"rawInput"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:SS","kind":"typeIdentifier","text":"String"}],"url":"\/documentation\/syntaxsparrow\/closure\/rawinput","role":"symbol","abstract":[{"text":"Will return the input string for the closure. Returns an empty string if no result is found.","type":"text"}],"type":"topic","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/rawInput","title":"rawInput","kind":"symbol"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/EntityType/tuple(_:)":{"fragments":[{"text":"case","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"tuple"},{"kind":"text","text":"("},{"text":"Tuple","kind":"typeIdentifier","preciseIdentifier":"s:13SyntaxSparrow5TupleV"},{"kind":"text","text":")"}],"url":"\/documentation\/syntaxsparrow\/entitytype\/tuple(_:)","role":"symbol","abstract":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"tuple"},{"type":"text","text":" type is used when a parameter’s type is a valid "},{"isActive":true,"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Tuple","type":"reference"},{"type":"text","text":" type."}],"type":"topic","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType\/tuple(_:)","title":"EntityType.tuple(_:)","kind":"symbol"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/isEscaping":{"url":"\/documentation\/syntaxsparrow\/closure\/isescaping","kind":"symbol","role":"symbol","title":"isEscaping","abstract":[{"type":"text","text":"Bool whether the closure has the "},{"code":"@escaping","type":"codeVoice"},{"type":"text","text":" attribute."},{"text":" ","type":"text"},{"type":"strong","inlineContent":[{"type":"text","text":"Note:"}]},{"text":" This separate from the ","type":"text"},{"type":"codeVoice","code":"isAutoEscaping"},{"text":" proeprty as you may want to know whether something has the attribute or not.","type":"text"}],"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"isEscaping","kind":"identifier"},{"kind":"text","text":": "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}],"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/isEscaping","type":"topic"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/description":{"fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"description","kind":"identifier"},{"kind":"text","text":": "},{"preciseIdentifier":"s:SS","kind":"typeIdentifier","text":"String"}],"url":"\/documentation\/syntaxsparrow\/closure\/description","role":"symbol","abstract":[],"type":"topic","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/description","title":"description","kind":"symbol"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/input":{"abstract":[{"text":"Will return the closure input element from the input ","type":"text"},{"type":"codeVoice","code":"typeAnnotation"},{"text":" for the closure.","type":"text"},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Note:"}]},{"type":"text","text":" This will "},{"inlineContent":[{"type":"text","text":"always"}],"type":"strong"},{"type":"text","text":" resolve to "},{"isActive":true,"type":"reference","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType\/tuple(_:)"},{"text":" with one or more parameters","type":"text"},{"text":" ","type":"text"},{"text":"or ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType\/tuple(_:)"},{"type":"text","text":" if there are no inputs. i.e"}],"role":"symbol","title":"input","type":"topic","kind":"symbol","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/input","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"input","kind":"identifier"},{"kind":"text","text":": "},{"preciseIdentifier":"s:13SyntaxSparrow10EntityTypeO","text":"EntityType","kind":"typeIdentifier"}],"url":"\/documentation\/syntaxsparrow\/closure\/input"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/SyntaxRepresenting":{"title":"SyntaxRepresenting","role":"symbol","url":"\/documentation\/syntaxsparrow\/syntaxrepresenting","abstract":[],"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/SyntaxRepresenting","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"SyntaxRepresenting","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"SyntaxRepresenting"}],"kind":"symbol","type":"topic"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/isThrowing":{"abstract":[{"text":"Returns ","type":"text"},{"type":"codeVoice","code":"true"},{"text":" when the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/effectSpecifiers"},{"text":" has the ","type":"text"},{"type":"codeVoice","code":"throw"},{"type":"text","text":" keyword."}],"role":"symbol","title":"isThrowing","type":"topic","kind":"symbol","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/isThrowing","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"isThrowing"},{"text":": ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}],"url":"\/documentation\/syntaxsparrow\/closure\/isthrowing"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/declaration":{"abstract":[{"type":"text","text":"The full declaration string."}],"role":"symbol","title":"declaration","type":"topic","kind":"symbol","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/declaration","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"declaration"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"}],"url":"\/documentation\/syntaxsparrow\/closure\/declaration"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/Hashable-Implementations":{"url":"\/documentation\/syntaxsparrow\/closure\/hashable-implementations","role":"collectionGroup","abstract":[],"type":"topic","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/Hashable-Implementations","title":"Hashable Implementations","kind":"article"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/Equatable-Implementations":{"title":"Equatable Implementations","type":"topic","kind":"article","abstract":[],"url":"\/documentation\/syntaxsparrow\/closure\/equatable-implementations","role":"collectionGroup","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/Equatable-Implementations"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure":{"url":"\/documentation\/syntaxsparrow\/closure","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure","type":"topic","kind":"symbol","title":"Closure","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Closure"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Closure"}],"abstract":[{"type":"text","text":"Represents a Swift closure expression."}]},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/output":{"fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"output","kind":"identifier"},{"kind":"text","text":": "},{"text":"EntityType","kind":"typeIdentifier","preciseIdentifier":"s:13SyntaxSparrow10EntityTypeO"}],"url":"\/documentation\/syntaxsparrow\/closure\/output","role":"symbol","abstract":[{"type":"text","text":"Will return the closure output elements from the input "},{"type":"codeVoice","code":"typeAnnotation"},{"text":" for the closure.","type":"text"}],"type":"topic","title":"output","kind":"symbol","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/output"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/effectSpecifiers":{"fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"effectSpecifiers","kind":"identifier"},{"kind":"text","text":": "},{"text":"EffectSpecifiers","preciseIdentifier":"s:13SyntaxSparrow16EffectSpecifiersV","kind":"typeIdentifier"},{"kind":"text","text":"?"}],"url":"\/documentation\/syntaxsparrow\/closure\/effectspecifiers","role":"symbol","abstract":[{"text":"Struct representing the state of any effect specifiers on the initializer signature.","type":"text"}],"type":"topic","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/effectSpecifiers","title":"effectSpecifiers","kind":"symbol"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/isVoidOutput":{"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"isVoidOutput","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}],"url":"\/documentation\/syntaxsparrow\/closure\/isvoidoutput","role":"symbol","abstract":[{"text":"Will return","type":"text"},{"type":"codeVoice","code":"true"},{"text":" if the ","type":"text"},{"code":"typeAnnotation","type":"codeVoice"},{"text":" is a closure and the input is a void block. i.e ","type":"text"},{"type":"codeVoice","code":"() -> (Void)\/() -> (())"},{"type":"text","text":"."}],"type":"topic","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/isVoidOutput","kind":"symbol","title":"isVoidOutput"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/isAutoEscaping":{"fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"isAutoEscaping"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"}],"url":"\/documentation\/syntaxsparrow\/closure\/isautoescaping","role":"symbol","abstract":[{"type":"text","text":"Bool whether the closure is auto escaping."},{"type":"text","text":" "},{"text":"This would be ","type":"text"},{"code":"true","type":"codeVoice"},{"text":" when the closure itself is optional as swift expects them to be auto-escaping.","type":"text"}],"type":"topic","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/isAutoEscaping","title":"isAutoEscaping","kind":"symbol"},"doc://SyntaxSparrow/s23CustomStringConvertibleP":{"identifier":"doc:\/\/SyntaxSparrow\/s23CustomStringConvertibleP","title":"Swift.CustomStringConvertible","type":"unresolvable"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/node":{"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"node"},{"kind":"text","text":": "},{"preciseIdentifier":"s:11SwiftSyntax012FunctionTypeB0V","text":"FunctionTypeSyntax","kind":"typeIdentifier"}],"url":"\/documentation\/syntaxsparrow\/closure\/node","role":"symbol","abstract":[{"type":"text","text":"The raw syntax node being represented by the instance."}],"type":"topic","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/node","title":"node","kind":"symbol"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/init(node:)":{"fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"node"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax012FunctionTypeB0V","text":"FunctionTypeSyntax"},{"text":")","kind":"text"}],"url":"\/documentation\/syntaxsparrow\/closure\/init(node:)","role":"symbol","abstract":[{"type":"text","text":"Creates a new "},{"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure","isActive":true,"type":"reference"},{"type":"text","text":" instance from an "},{"type":"codeVoice","code":"FunctionTypeSyntax"},{"text":" node.","type":"text"}],"type":"topic","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/init(node:)","kind":"symbol","title":"init(node:)"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/DeclarationComponent":{"url":"\/documentation\/syntaxsparrow\/declarationcomponent","role":"symbol","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/DeclarationComponent","kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"DeclarationComponent","kind":"identifier"}],"abstract":[{"type":"text","text":"Public protocol that any semantic elements not considered a declaration will conform to."},{"type":"text","text":" "},{"text":"A declaration component is considered a semantic element that supports or decorates a declaration such as attributes, modifiers, generic parameter\/requirement, parameters, etc","type":"text"}],"title":"DeclarationComponent","navigatorTitle":[{"kind":"identifier","text":"DeclarationComponent"}]}}}