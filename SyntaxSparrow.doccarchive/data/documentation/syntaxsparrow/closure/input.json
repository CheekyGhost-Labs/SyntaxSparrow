{"sections":[],"variants":[{"paths":["\/documentation\/syntaxsparrow\/closure\/input"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/input","interfaceLanguage":"swift"},"schemaVersion":{"major":0,"patch":0,"minor":3},"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"input"},{"kind":"text","text":": "},{"preciseIdentifier":"s:13SyntaxSparrow10EntityTypeO","kind":"typeIdentifier","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType","text":"EntityType"},{"text":" { ","kind":"text"},{"text":"get","kind":"keyword"},{"kind":"text","text":" }"}],"languages":["swift"]}],"kind":"declarations"},{"content":[{"type":"heading","text":"Discussion","anchor":"discussion","level":2},{"code":["- ((name: inout String, age: Int) -> Void","- (inout String, Int) -> Void","- (String) -> Void","- () -> Void"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"will result in:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType\/tuple(_:)","type":"reference","isActive":true},{"text":" with a single tuple element. The single tuple element will have the ","type":"text"},{"type":"codeVoice","code":"name: inout String"},{"type":"text","text":" and "},{"type":"codeVoice","code":"age: Int"},{"type":"text","text":" elements"}]}]},{"content":[{"inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType\/tuple(_:)"},{"text":" with two elements. The inout ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" and the ","type":"text"},{"code":"Int","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType\/tuple(_:)","isActive":true,"type":"reference"},{"type":"text","text":" with a single element. The "},{"code":"String","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType\/void(_:_:)","isActive":true,"type":"reference"},{"type":"text","text":"."}]}]}]}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure"]]},"kind":"symbol","metadata":{"title":"input","symbolKind":"property","modules":[{"name":"SyntaxSparrow"}],"role":"symbol","roleHeading":"Instance Property","externalID":"s:13SyntaxSparrow7ClosureV5inputAA10EntityTypeOvp","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"input"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:13SyntaxSparrow10EntityTypeO","text":"EntityType"}]},"abstract":[{"type":"text","text":"Will return the closure input element from the input "},{"type":"codeVoice","code":"typeAnnotation"},{"type":"text","text":" for the closure."},{"text":" ","type":"text"},{"inlineContent":[{"type":"text","text":"Note:"}],"type":"strong"},{"text":" This will ","type":"text"},{"inlineContent":[{"type":"text","text":"always"}],"type":"strong"},{"text":" resolve to ","type":"text"},{"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType\/tuple(_:)","isActive":true,"type":"reference"},{"type":"text","text":" with one or more parameters"},{"type":"text","text":" "},{"type":"text","text":"or "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType\/tuple(_:)"},{"text":" if there are no inputs. i.e","type":"text"}],"references":{"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure/input":{"role":"symbol","kind":"symbol","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure\/input","type":"topic","abstract":[{"text":"Will return the closure input element from the input ","type":"text"},{"type":"codeVoice","code":"typeAnnotation"},{"text":" for the closure.","type":"text"},{"text":" ","type":"text"},{"inlineContent":[{"text":"Note:","type":"text"}],"type":"strong"},{"type":"text","text":" This will "},{"inlineContent":[{"text":"always","type":"text"}],"type":"strong"},{"text":" resolve to ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType\/tuple(_:)"},{"text":" with one or more parameters","type":"text"},{"type":"text","text":" "},{"type":"text","text":"or "},{"isActive":true,"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType\/tuple(_:)","type":"reference"},{"text":" if there are no inputs. i.e","type":"text"}],"title":"input","url":"\/documentation\/syntaxsparrow\/closure\/input","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"input","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:13SyntaxSparrow10EntityTypeO","kind":"typeIdentifier","text":"EntityType"}]},"doc://SyntaxSparrow/documentation/SyntaxSparrow/EntityType/void(_:_:)":{"kind":"symbol","url":"\/documentation\/syntaxsparrow\/entitytype\/void(_:_:)","type":"topic","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"text":"void","kind":"identifier"},{"text":"(","kind":"text"},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":")","kind":"text"}],"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType\/void(_:_:)","title":"EntityType.void(_:_:)","role":"symbol","abstract":[{"text":"A ","type":"text"},{"code":"void","type":"codeVoice"},{"text":" type is used when a parameter’s type resolves to ","type":"text"},{"code":"Void","type":"codeVoice"},{"text":". It includes the raw declaration (","type":"text"},{"code":"\"Void\"","type":"codeVoice"},{"type":"text","text":" or "},{"code":"\"()\"","type":"codeVoice"},{"type":"text","text":") includes if the type is optional."}]},"doc://SyntaxSparrow/documentation/SyntaxSparrow/EntityType/simple(_:)":{"kind":"symbol","type":"topic","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType\/simple(_:)","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"text":"simple","kind":"identifier"},{"text":"(","kind":"text"},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"kind":"text","text":")"}],"url":"\/documentation\/syntaxsparrow\/entitytype\/simple(_:)","abstract":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"simple"},{"type":"text","text":" type refers to a standard swift type can’t does not have any nested or related syntax."},{"type":"text","text":" "},{"inlineContent":[{"text":"Note:","type":"text"}],"type":"strong"},{"type":"text","text":" This is also used for any unsupported syntax types. i.e "},{"type":"codeVoice","code":"CVarArg"},{"type":"text","text":" is not currently supported so it will use the"},{"type":"text","text":" "},{"code":".simple(\"CVarArg...\")","type":"codeVoice"}],"title":"EntityType.simple(_:)","role":"symbol"},"doc://SyntaxSparrow/documentation/SyntaxSparrow":{"kind":"symbol","role":"collection","type":"topic","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow","url":"\/documentation\/syntaxsparrow","abstract":[],"title":"SyntaxSparrow"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/EntityType/tuple(_:)":{"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType\/tuple(_:)","fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"text":"tuple","kind":"identifier"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Tuple","preciseIdentifier":"s:13SyntaxSparrow5TupleV"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"A "},{"code":"tuple","type":"codeVoice"},{"text":" type is used when a parameter’s type is a valid ","type":"text"},{"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Tuple","type":"reference","isActive":true},{"text":" type.","type":"text"}],"role":"symbol","type":"topic","title":"EntityType.tuple(_:)","kind":"symbol","url":"\/documentation\/syntaxsparrow\/entitytype\/tuple(_:)"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Closure":{"type":"topic","kind":"symbol","navigatorTitle":[{"text":"Closure","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Closure","abstract":[{"type":"text","text":"Represents a Swift closure expression."}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Closure"}],"title":"Closure","url":"\/documentation\/syntaxsparrow\/closure"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/EntityType":{"abstract":[{"type":"text","text":"An "},{"isActive":true,"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType","type":"reference"},{"text":" represents a type being referenced by a property or parameter. It is encapsulated in the ","type":"text"},{"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType","isActive":true,"type":"reference"},{"type":"text","text":" "},{"type":"text","text":"enumeration to provide a more simple entry point when working with sets of parameter inputs and properties."},{"type":"text","text":" "},{"type":"text","text":"By default a "},{"type":"reference","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType\/simple(_:)","isActive":true},{"text":" type will be used with a string representation of the declared type.","type":"text"},{"type":"text","text":" "},{"text":"Initial support for some complex types, such as closures, tuples, and results is provided.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"As support for more complex types are added they will be added as a dedicated enumeration case to the "},{"type":"codeVoice","code":"EntityType"}],"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType","type":"topic","title":"EntityType","kind":"symbol","role":"symbol","url":"\/documentation\/syntaxsparrow\/entitytype","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"EntityType"}],"navigatorTitle":[{"text":"EntityType","kind":"identifier"}]},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Tuple":{"abstract":[{"type":"text","text":"Represents a Swift tuple."}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Tuple"}],"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Tuple","navigatorTitle":[{"text":"Tuple","kind":"identifier"}],"role":"symbol","kind":"symbol","type":"topic","url":"\/documentation\/syntaxsparrow\/tuple","title":"Tuple"}}}