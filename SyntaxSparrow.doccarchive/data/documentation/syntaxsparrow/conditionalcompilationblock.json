{"metadata":{"roleHeading":"Structure","modules":[{"name":"SyntaxSparrow"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ConditionalCompilationBlock"}],"role":"symbol","externalID":"s:13SyntaxSparrow27ConditionalCompilationBlockV","title":"ConditionalCompilationBlock","symbolKind":"struct","navigatorTitle":[{"text":"ConditionalCompilationBlock","kind":"identifier"}]},"schemaVersion":{"patch":0,"major":0,"minor":3},"sections":[],"kind":"symbol","abstract":[{"text":"Represents a Swift conditional compilation block declaration.","type":"text"}],"hierarchy":{"paths":[["doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow"]]},"topicSections":[{"identifiers":["doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/Branch"],"title":"Structures"},{"identifiers":["doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/init(node:)"],"title":"Initializers"},{"title":"Instance Properties","identifiers":["doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/branches","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/node"]},{"generated":true,"identifiers":["doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/CustomStringConvertible-Implementations","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/Equatable-Implementations","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/Hashable-Implementations"],"title":"Default Implementations"}],"relationshipsSections":[{"type":"conformsTo","identifiers":["doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Declaration","doc:\/\/SyntaxSparrow\/s23CustomStringConvertibleP","doc:\/\/SyntaxSparrow\/SQ","doc:\/\/SyntaxSparrow\/SH","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/SyntaxRepresenting"],"kind":"relationships","title":"Conforms To"}],"primaryContentSections":[{"declarations":[{"tokens":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"ConditionalCompilationBlock","kind":"identifier"}],"platforms":["macOS"],"languages":["swift"]}],"kind":"declarations"},{"content":[{"anchor":"overview","type":"heading","level":2,"text":"Overview"},{"inlineContent":[{"type":"text","text":"Conditional compilation blocks are used to conditionally compile parts of the program"},{"type":"text","text":" "},{"text":"based on the evaluation of one or more conditions.","type":"text"},{"type":"text","text":" "},{"text":"Swift uses the keywords ","type":"text"},{"code":"#if","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"#elseif"},{"type":"text","text":", "},{"type":"codeVoice","code":"#else"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"#endif"},{"type":"text","text":" to define these blocks."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Each instance of "},{"type":"reference","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock","isActive":true},{"text":" corresponds to a ","type":"text"},{"type":"codeVoice","code":"ConditionalCompilationBlock"},{"type":"text","text":" node in the Swift syntax tree."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This struct provides access to the branches within the conditional compilation block"},{"type":"text","text":" "},{"text":"and the source location of the block.","type":"text"}]}],"kind":"content"}],"variants":[{"paths":["\/documentation\/syntaxsparrow\/conditionalcompilationblock"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock"},"references":{"doc://SyntaxSparrow/s23CustomStringConvertibleP":{"title":"Swift.CustomStringConvertible","identifier":"doc:\/\/SyntaxSparrow\/s23CustomStringConvertibleP","type":"unresolvable"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/ConditionalCompilationBlock/node":{"fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"node","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax012IfConfigDeclB0V","text":"IfConfigDeclSyntax"}],"abstract":[{"text":"The raw syntax node being represented by the instance.","type":"text"}],"type":"topic","role":"symbol","url":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/node","kind":"symbol","title":"node","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/node"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/ConditionalCompilationBlock/Branch":{"kind":"symbol","role":"symbol","url":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/branch","abstract":[{"text":"Represents a branch within a ","type":"text"},{"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/Branch","type":"reference","isActive":true},{"type":"text","text":"."}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Branch","kind":"identifier"}],"navigatorTitle":[{"text":"Branch","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/Branch","title":"ConditionalCompilationBlock.Branch"},"doc://SyntaxSparrow/SQ":{"title":"Swift.Equatable","identifier":"doc:\/\/SyntaxSparrow\/SQ","type":"unresolvable"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/ConditionalCompilationBlock/branches":{"fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"branches","kind":"identifier"},{"text":": [","kind":"text"},{"preciseIdentifier":"s:13SyntaxSparrow27ConditionalCompilationBlockV6BranchV","kind":"typeIdentifier","text":"Branch"},{"text":"]","kind":"text"}],"abstract":[{"text":"Array of conditional compilation block branches.","type":"text"}],"type":"topic","role":"symbol","url":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/branches","kind":"symbol","title":"branches","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/branches"},"doc://SyntaxSparrow/SH":{"title":"Swift.Hashable","identifier":"doc:\/\/SyntaxSparrow\/SH","type":"unresolvable"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/ConditionalCompilationBlock/Equatable-Implementations":{"abstract":[],"type":"topic","role":"collectionGroup","url":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/equatable-implementations","kind":"article","title":"Equatable Implementations","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/Equatable-Implementations"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/ConditionalCompilationBlock":{"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock","url":"\/documentation\/syntaxsparrow\/conditionalcompilationblock","kind":"symbol","abstract":[{"type":"text","text":"Represents a Swift conditional compilation block declaration."}],"title":"ConditionalCompilationBlock","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ConditionalCompilationBlock"}],"navigatorTitle":[{"text":"ConditionalCompilationBlock","kind":"identifier"}],"role":"symbol"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/ConditionalCompilationBlock/Hashable-Implementations":{"abstract":[],"type":"topic","role":"collectionGroup","url":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/hashable-implementations","kind":"article","title":"Hashable Implementations","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/Hashable-Implementations"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/ConditionalCompilationBlock/CustomStringConvertible-Implementations":{"abstract":[],"type":"topic","role":"collectionGroup","url":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/customstringconvertible-implementations","kind":"article","title":"CustomStringConvertible Implementations","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/CustomStringConvertible-Implementations"},"doc://SyntaxSparrow/documentation/SyntaxSparrow":{"kind":"symbol","role":"collection","type":"topic","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow","url":"\/documentation\/syntaxsparrow","abstract":[],"title":"SyntaxSparrow"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/SyntaxRepresenting":{"kind":"symbol","title":"SyntaxRepresenting","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SyntaxRepresenting","kind":"identifier"}],"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/SyntaxRepresenting","navigatorTitle":[{"text":"SyntaxRepresenting","kind":"identifier"}],"role":"symbol","type":"topic","url":"\/documentation\/syntaxsparrow\/syntaxrepresenting","abstract":[]},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Declaration":{"kind":"symbol","navigatorTitle":[{"text":"Declaration","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Declaration"}],"abstract":[{"text":"Public protocol that any public semantic declarations will conform to. A declaration is considered a semantic element that represents items such as struct, protocol, class, enum, etc","type":"text"}],"type":"topic","title":"Declaration","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Declaration","role":"symbol","url":"\/documentation\/syntaxsparrow\/declaration"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/ConditionalCompilationBlock/init(node:)":{"fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"("},{"text":"node","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"IfConfigDeclSyntax","kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax012IfConfigDeclB0V"},{"kind":"text","text":")"}],"abstract":[{"text":"Will initialize a new instance that will resolve details from the given node as they are requested.","type":"text"}],"type":"topic","role":"symbol","url":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/init(node:)","kind":"symbol","title":"init(node:)","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/init(node:)"}}}