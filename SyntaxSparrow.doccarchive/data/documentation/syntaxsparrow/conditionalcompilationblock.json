{"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ConditionalCompilationBlock"}],"languages":["swift"]}]},{"content":[{"level":2,"type":"heading","anchor":"overview","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Conditional compilation blocks are used to conditionally compile parts of the program"},{"text":" ","type":"text"},{"text":"based on the evaluation of one or more conditions.","type":"text"},{"type":"text","text":" "},{"text":"Swift uses the keywords ","type":"text"},{"type":"codeVoice","code":"#if"},{"type":"text","text":", "},{"code":"#elseif","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"#else"},{"type":"text","text":", and "},{"type":"codeVoice","code":"#endif"},{"text":" to define these blocks.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Each instance of "},{"type":"reference","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock","isActive":true},{"type":"text","text":" corresponds to a "},{"type":"codeVoice","code":"ConditionalCompilationBlock"},{"type":"text","text":" node in the Swift syntax tree."}]},{"inlineContent":[{"text":"This struct provides access to the branches within the conditional compilation block","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and the source location of the block."}],"type":"paragraph"}],"kind":"content"}],"kind":"symbol","sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock"},"metadata":{"roleHeading":"Structure","role":"symbol","title":"ConditionalCompilationBlock","symbolKind":"struct","externalID":"s:13SyntaxSparrow27ConditionalCompilationBlockV","modules":[{"name":"SyntaxSparrow"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ConditionalCompilationBlock"}],"navigatorTitle":[{"kind":"identifier","text":"ConditionalCompilationBlock"}]},"hierarchy":{"paths":[["doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow"]]},"abstract":[{"text":"Represents a Swift conditional compilation block declaration.","type":"text"}],"topicSections":[{"title":"Structures","identifiers":["doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/Branch"]},{"title":"Initializers","identifiers":["doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/init(node:)"]},{"identifiers":["doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/branches","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/node"],"title":"Instance Properties"},{"generated":true,"identifiers":["doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/CustomStringConvertible-Implementations","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/Equatable-Implementations","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/Hashable-Implementations"],"title":"Default Implementations"}],"relationshipsSections":[{"title":"Conforms To","kind":"relationships","type":"conformsTo","identifiers":["doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Declaration","doc:\/\/SyntaxSparrow\/s23CustomStringConvertibleP","doc:\/\/SyntaxSparrow\/SQ","doc:\/\/SyntaxSparrow\/SH","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/SyntaxRepresenting"]}],"schemaVersion":{"minor":3,"major":0,"patch":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/syntaxsparrow\/conditionalcompilationblock"]}],"references":{"doc://SyntaxSparrow/documentation/SyntaxSparrow/Declaration":{"role":"symbol","abstract":[{"type":"text","text":"Public protocol that any public semantic declarations will conform to. A declaration is considered a semantic element that represents items such as struct, protocol, class, enum, etc"}],"title":"Declaration","kind":"symbol","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Declaration","url":"\/documentation\/syntaxsparrow\/declaration","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Declaration"}],"navigatorTitle":[{"text":"Declaration","kind":"identifier"}],"type":"topic"},"doc://SyntaxSparrow/SQ":{"identifier":"doc:\/\/SyntaxSparrow\/SQ","type":"unresolvable","title":"Swift.Equatable"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/SyntaxRepresenting":{"title":"SyntaxRepresenting","abstract":[],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"SyntaxRepresenting"}],"navigatorTitle":[{"kind":"identifier","text":"SyntaxRepresenting"}],"role":"symbol","type":"topic","kind":"symbol","url":"\/documentation\/syntaxsparrow\/syntaxrepresenting","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/SyntaxRepresenting"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/ConditionalCompilationBlock/CustomStringConvertible-Implementations":{"role":"collectionGroup","abstract":[],"title":"CustomStringConvertible Implementations","kind":"article","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/CustomStringConvertible-Implementations","url":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/customstringconvertible-implementations","type":"topic"},"doc://SyntaxSparrow/s23CustomStringConvertibleP":{"identifier":"doc:\/\/SyntaxSparrow\/s23CustomStringConvertibleP","type":"unresolvable","title":"Swift.CustomStringConvertible"},"doc://SyntaxSparrow/documentation/SyntaxSparrow":{"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow","url":"\/documentation\/syntaxsparrow","kind":"symbol","title":"SyntaxSparrow","role":"collection","abstract":[],"type":"topic"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/ConditionalCompilationBlock/Equatable-Implementations":{"role":"collectionGroup","abstract":[],"title":"Equatable Implementations","kind":"article","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/Equatable-Implementations","url":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/equatable-implementations","type":"topic"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/ConditionalCompilationBlock/init(node:)":{"role":"symbol","abstract":[{"type":"text","text":"Will initialize a new instance that will resolve details from the given node as they are requested."}],"title":"init(node:)","kind":"symbol","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/init(node:)","url":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/init(node:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"node"},{"text":": ","kind":"text"},{"text":"IfConfigDeclSyntax","kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax012IfConfigDeclB0V"},{"text":")","kind":"text"}],"type":"topic"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/ConditionalCompilationBlock/node":{"role":"symbol","abstract":[{"text":"The raw syntax node being represented by the instance.","type":"text"}],"title":"node","kind":"symbol","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/node","url":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/node","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"node"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax012IfConfigDeclB0V","text":"IfConfigDeclSyntax"}],"type":"topic"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/ConditionalCompilationBlock/Branch":{"kind":"symbol","type":"topic","title":"ConditionalCompilationBlock.Branch","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/Branch","abstract":[{"text":"Represents a branch within a ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/Branch"},{"type":"text","text":"."}],"role":"symbol","navigatorTitle":[{"text":"Branch","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Branch","kind":"identifier"}],"url":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/branch"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/ConditionalCompilationBlock/branches":{"role":"symbol","abstract":[{"type":"text","text":"Array of conditional compilation block branches."}],"title":"branches","kind":"symbol","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/branches","url":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/branches","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"branches","kind":"identifier"},{"text":": [","kind":"text"},{"text":"Branch","preciseIdentifier":"s:13SyntaxSparrow27ConditionalCompilationBlockV6BranchV","kind":"typeIdentifier"},{"text":"]","kind":"text"}],"type":"topic"},"doc://SyntaxSparrow/SH":{"identifier":"doc:\/\/SyntaxSparrow\/SH","type":"unresolvable","title":"Swift.Hashable"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/ConditionalCompilationBlock/Hashable-Implementations":{"role":"collectionGroup","abstract":[],"title":"Hashable Implementations","kind":"article","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/Hashable-Implementations","url":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/hashable-implementations","type":"topic"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/ConditionalCompilationBlock":{"kind":"symbol","type":"topic","title":"ConditionalCompilationBlock","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock","abstract":[{"type":"text","text":"Represents a Swift conditional compilation block declaration."}],"role":"symbol","navigatorTitle":[{"text":"ConditionalCompilationBlock","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"ConditionalCompilationBlock","kind":"identifier"}],"url":"\/documentation\/syntaxsparrow\/conditionalcompilationblock"}}}