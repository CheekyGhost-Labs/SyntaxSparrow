{"kind":"symbol","relationshipsSections":[{"title":"Conforms To","identifiers":["doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Declaration","doc:\/\/SyntaxSparrow\/s23CustomStringConvertibleP","doc:\/\/SyntaxSparrow\/SQ","doc:\/\/SyntaxSparrow\/SH","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/SyntaxRepresenting"],"kind":"relationships","type":"conformsTo"}],"abstract":[{"type":"text","text":"Represents a Swift conditional compilation block declaration."}],"topicSections":[{"title":"Structures","identifiers":["doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/Branch"]},{"identifiers":["doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/init(node:)"],"title":"Initializers"},{"title":"Instance Properties","identifiers":["doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/branches","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/node"]},{"generated":true,"title":"Default Implementations","identifiers":["doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/CustomStringConvertible-Implementations","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/Equatable-Implementations","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/Hashable-Implementations"]}],"sections":[],"metadata":{"modules":[{"name":"SyntaxSparrow"}],"externalID":"s:13SyntaxSparrow27ConditionalCompilationBlockV","title":"ConditionalCompilationBlock","roleHeading":"Structure","symbolKind":"struct","role":"symbol","navigatorTitle":[{"text":"ConditionalCompilationBlock","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ConditionalCompilationBlock"}]},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"ConditionalCompilationBlock","kind":"identifier"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","type":"heading","level":2,"text":"Overview"},{"inlineContent":[{"type":"text","text":"Conditional compilation blocks are used to conditionally compile parts of the program"},{"text":" ","type":"text"},{"text":"based on the evaluation of one or more conditions.","type":"text"},{"text":" ","type":"text"},{"text":"Swift uses the keywords ","type":"text"},{"type":"codeVoice","code":"#if"},{"type":"text","text":", "},{"type":"codeVoice","code":"#elseif"},{"text":", ","type":"text"},{"code":"#else","type":"codeVoice"},{"type":"text","text":", and "},{"type":"codeVoice","code":"#endif"},{"type":"text","text":" to define these blocks."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Each instance of ","type":"text"},{"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock","type":"reference","isActive":true},{"text":" corresponds to a ","type":"text"},{"type":"codeVoice","code":"ConditionalCompilationBlock"},{"text":" node in the Swift syntax tree.","type":"text"}]},{"inlineContent":[{"text":"This struct provides access to the branches within the conditional compilation block","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and the source location of the block."}],"type":"paragraph"}]}],"variants":[{"paths":["\/documentation\/syntaxsparrow\/conditionalcompilationblock"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"url":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow"]]},"references":{"doc://SyntaxSparrow/SH":{"type":"unresolvable","identifier":"doc:\/\/SyntaxSparrow\/SH","title":"Swift.Hashable"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/SyntaxRepresenting":{"title":"SyntaxRepresenting","role":"symbol","url":"\/documentation\/syntaxsparrow\/syntaxrepresenting","abstract":[],"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/SyntaxRepresenting","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"SyntaxRepresenting","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"SyntaxRepresenting"}],"kind":"symbol","type":"topic"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/ConditionalCompilationBlock/init(node:)":{"title":"init(node:)","type":"topic","url":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/init(node:)","kind":"symbol","role":"symbol","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/init(node:)","abstract":[{"type":"text","text":"Will initialize a new instance that will resolve details from the given node as they are requested."}],"fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"node"},{"kind":"text","text":": "},{"text":"IfConfigDeclSyntax","kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax012IfConfigDeclB0V"},{"text":")","kind":"text"}]},"doc://SyntaxSparrow/documentation/SyntaxSparrow/ConditionalCompilationBlock":{"url":"\/documentation\/syntaxsparrow\/conditionalcompilationblock","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock","type":"topic","kind":"symbol","title":"ConditionalCompilationBlock","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"ConditionalCompilationBlock"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ConditionalCompilationBlock"}],"abstract":[{"type":"text","text":"Represents a Swift conditional compilation block declaration."}]},"doc://SyntaxSparrow/documentation/SyntaxSparrow/ConditionalCompilationBlock/CustomStringConvertible-Implementations":{"title":"CustomStringConvertible Implementations","type":"topic","kind":"article","url":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/customstringconvertible-implementations","role":"collectionGroup","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/CustomStringConvertible-Implementations","abstract":[]},"doc://SyntaxSparrow/s23CustomStringConvertibleP":{"title":"Swift.CustomStringConvertible","type":"unresolvable","identifier":"doc:\/\/SyntaxSparrow\/s23CustomStringConvertibleP"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/ConditionalCompilationBlock/branches":{"title":"branches","type":"topic","kind":"symbol","url":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/branches","role":"symbol","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/branches","abstract":[{"text":"Array of conditional compilation block branches.","type":"text"}],"fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"branches"},{"kind":"text","text":": ["},{"preciseIdentifier":"s:13SyntaxSparrow27ConditionalCompilationBlockV6BranchV","text":"Branch","kind":"typeIdentifier"},{"text":"]","kind":"text"}]},"doc://SyntaxSparrow/documentation/SyntaxSparrow/ConditionalCompilationBlock/node":{"title":"node","type":"topic","url":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/node","kind":"symbol","role":"symbol","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/node","abstract":[{"type":"text","text":"The raw syntax node being represented by the instance."}],"fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"node"},{"kind":"text","text":": "},{"text":"IfConfigDeclSyntax","kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax012IfConfigDeclB0V"}]},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Declaration":{"title":"Declaration","role":"symbol","url":"\/documentation\/syntaxsparrow\/declaration","abstract":[{"text":"Public protocol that any public semantic declarations will conform to. A declaration is considered a semantic element that represents items such as struct, protocol, class, enum, etc","type":"text"}],"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Declaration","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Declaration"}],"navigatorTitle":[{"kind":"identifier","text":"Declaration"}],"kind":"symbol","type":"topic"},"doc://SyntaxSparrow/documentation/SyntaxSparrow":{"abstract":[],"url":"\/documentation\/syntaxsparrow","type":"topic","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow","kind":"symbol","role":"collection","title":"SyntaxSparrow"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/ConditionalCompilationBlock/Branch":{"type":"topic","abstract":[{"type":"text","text":"Represents a branch within a "},{"type":"reference","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/Branch","isActive":true},{"type":"text","text":"."}],"title":"ConditionalCompilationBlock.Branch","navigatorTitle":[{"kind":"identifier","text":"Branch"}],"url":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/branch","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Branch","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/Branch"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/ConditionalCompilationBlock/Hashable-Implementations":{"title":"Hashable Implementations","type":"topic","kind":"article","url":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/hashable-implementations","role":"collectionGroup","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/Hashable-Implementations","abstract":[]},"doc://SyntaxSparrow/documentation/SyntaxSparrow/ConditionalCompilationBlock/Equatable-Implementations":{"title":"Equatable Implementations","type":"topic","url":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/equatable-implementations","kind":"article","role":"collectionGroup","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/Equatable-Implementations","abstract":[]},"doc://SyntaxSparrow/SQ":{"title":"Swift.Equatable","type":"unresolvable","identifier":"doc:\/\/SyntaxSparrow\/SQ"}}}