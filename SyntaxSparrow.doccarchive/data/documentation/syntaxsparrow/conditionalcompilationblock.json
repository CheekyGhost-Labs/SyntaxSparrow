{"topicSections":[{"title":"Structures","identifiers":["doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/Branch"]},{"title":"Initializers","identifiers":["doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/init(node:)"]},{"title":"Instance Properties","identifiers":["doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/branches","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/node"]},{"identifiers":["doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/CustomStringConvertible-Implementations","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/Equatable-Implementations","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/Hashable-Implementations"],"generated":true,"title":"Default Implementations"}],"variants":[{"paths":["\/documentation\/syntaxsparrow\/conditionalcompilationblock"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock"},"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"ConditionalCompilationBlock","kind":"identifier"}],"platforms":["macOS"]}],"kind":"declarations"},{"content":[{"level":2,"anchor":"overview","text":"Overview","type":"heading"},{"inlineContent":[{"text":"Conditional compilation blocks are used to conditionally compile parts of the program","type":"text"},{"type":"text","text":" "},{"text":"based on the evaluation of one or more conditions.","type":"text"},{"text":" ","type":"text"},{"text":"Swift uses the keywords ","type":"text"},{"type":"codeVoice","code":"#if"},{"type":"text","text":", "},{"code":"#elseif","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"#else"},{"type":"text","text":", and "},{"type":"codeVoice","code":"#endif"},{"type":"text","text":" to define these blocks."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Each instance of ","type":"text"},{"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock","type":"reference","isActive":true},{"text":" corresponds to a ","type":"text"},{"type":"codeVoice","code":"ConditionalCompilationBlock"},{"type":"text","text":" node in the Swift syntax tree."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This struct provides access to the branches within the conditional compilation block"},{"text":" ","type":"text"},{"text":"and the source location of the block.","type":"text"}]}],"kind":"content"}],"kind":"symbol","relationshipsSections":[{"title":"Conforms To","identifiers":["doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Declaration","doc:\/\/SyntaxSparrow\/s23CustomStringConvertibleP","doc:\/\/SyntaxSparrow\/SQ","doc:\/\/SyntaxSparrow\/SH","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/SyntaxRepresenting"],"kind":"relationships","type":"conformsTo"}],"metadata":{"role":"symbol","title":"ConditionalCompilationBlock","symbolKind":"struct","modules":[{"name":"SyntaxSparrow"}],"navigatorTitle":[{"text":"ConditionalCompilationBlock","kind":"identifier"}],"roleHeading":"Structure","externalID":"s:13SyntaxSparrow27ConditionalCompilationBlockV","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ConditionalCompilationBlock"}]},"hierarchy":{"paths":[["doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow"]]},"sections":[],"schemaVersion":{"patch":0,"major":0,"minor":3},"abstract":[{"type":"text","text":"Represents a Swift conditional compilation block declaration."}],"references":{"doc://SyntaxSparrow/documentation/SyntaxSparrow/SyntaxRepresenting":{"navigatorTitle":[{"text":"SyntaxRepresenting","kind":"identifier"}],"type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"SyntaxRepresenting","kind":"identifier"}],"title":"SyntaxRepresenting","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/SyntaxRepresenting","role":"symbol","url":"\/documentation\/syntaxsparrow\/syntaxrepresenting","abstract":[],"kind":"symbol"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Declaration":{"abstract":[{"type":"text","text":"Public protocol that any public semantic declarations will conform to. A declaration is considered a semantic element that represents items such as struct, protocol, class, enum, etc"}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"Declaration","kind":"identifier"}],"url":"\/documentation\/syntaxsparrow\/declaration","title":"Declaration","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Declaration","kind":"symbol","type":"topic","role":"symbol","navigatorTitle":[{"text":"Declaration","kind":"identifier"}]},"doc://SyntaxSparrow/documentation/SyntaxSparrow/ConditionalCompilationBlock/node":{"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"node","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax012IfConfigDeclB0V","text":"IfConfigDeclSyntax"}],"role":"symbol","url":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/node","type":"topic","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/node","abstract":[{"type":"text","text":"The raw syntax node being represented by the instance."}],"kind":"symbol","title":"node"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/ConditionalCompilationBlock":{"url":"\/documentation\/syntaxsparrow\/conditionalcompilationblock","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ConditionalCompilationBlock"}],"abstract":[{"type":"text","text":"Represents a Swift conditional compilation block declaration."}],"navigatorTitle":[{"kind":"identifier","text":"ConditionalCompilationBlock"}],"type":"topic","title":"ConditionalCompilationBlock","kind":"symbol","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/ConditionalCompilationBlock/Hashable-Implementations":{"type":"topic","title":"Hashable Implementations","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/Hashable-Implementations","role":"collectionGroup","url":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/hashable-implementations","abstract":[],"kind":"article"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/ConditionalCompilationBlock/CustomStringConvertible-Implementations":{"type":"topic","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/CustomStringConvertible-Implementations","title":"CustomStringConvertible Implementations","role":"collectionGroup","url":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/customstringconvertible-implementations","abstract":[],"kind":"article"},"doc://SyntaxSparrow/s23CustomStringConvertibleP":{"identifier":"doc:\/\/SyntaxSparrow\/s23CustomStringConvertibleP","title":"Swift.CustomStringConvertible","type":"unresolvable"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/ConditionalCompilationBlock/Branch":{"title":"ConditionalCompilationBlock.Branch","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/Branch","kind":"symbol","abstract":[{"type":"text","text":"Represents a branch within a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/Branch"},{"type":"text","text":"."}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Branch"}],"url":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/branch","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Branch"}],"type":"topic"},"doc://SyntaxSparrow/documentation/SyntaxSparrow":{"title":"SyntaxSparrow","role":"collection","url":"\/documentation\/syntaxsparrow","kind":"symbol","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow","type":"topic","abstract":[]},"doc://SyntaxSparrow/documentation/SyntaxSparrow/ConditionalCompilationBlock/branches":{"type":"topic","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"branches","kind":"identifier"},{"text":": [","kind":"text"},{"text":"Branch","kind":"typeIdentifier","preciseIdentifier":"s:13SyntaxSparrow27ConditionalCompilationBlockV6BranchV"},{"kind":"text","text":"]"}],"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/branches","title":"branches","role":"symbol","url":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/branches","abstract":[{"type":"text","text":"Array of conditional compilation block branches."}],"kind":"symbol"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/ConditionalCompilationBlock/init(node:)":{"type":"topic","fragments":[{"kind":"identifier","text":"init"},{"text":"(","kind":"text"},{"text":"node","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"IfConfigDeclSyntax","kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax012IfConfigDeclB0V"},{"kind":"text","text":")"}],"title":"init(node:)","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/init(node:)","role":"symbol","url":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/init(node:)","abstract":[{"type":"text","text":"Will initialize a new instance that will resolve details from the given node as they are requested."}],"kind":"symbol"},"doc://SyntaxSparrow/SQ":{"type":"unresolvable","title":"Swift.Equatable","identifier":"doc:\/\/SyntaxSparrow\/SQ"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/ConditionalCompilationBlock/Equatable-Implementations":{"type":"topic","title":"Equatable Implementations","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/Equatable-Implementations","role":"collectionGroup","url":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/equatable-implementations","abstract":[],"kind":"article"},"doc://SyntaxSparrow/SH":{"type":"unresolvable","title":"Swift.Hashable","identifier":"doc:\/\/SyntaxSparrow\/SH"}}}