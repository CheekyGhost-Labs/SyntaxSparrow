{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Branch"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Each branch within a conditional compilation block starts with a keyword: "},{"type":"codeVoice","code":"#if"},{"type":"text","text":", "},{"type":"codeVoice","code":"#elseif"},{"type":"text","text":", or "},{"type":"codeVoice","code":"#else"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"A branch might also have a condition associated with the keyword, which determines whether"},{"type":"text","text":" "},{"type":"text","text":"the compiler will include the code within the branch during the compilation process."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, in  the following declaration the block has two branches"}]},{"type":"codeListing","syntax":"swift","code":["#if true","enum A {}","#else","enum B {}","#endif"]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The first branch has the keyword "},{"type":"codeVoice","code":"#if"},{"type":"text","text":" and the condition "},{"type":"codeVoice","code":"true"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The second branch has the keyword "},{"type":"codeVoice","code":"#else"},{"type":"text","text":" and no condition"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Each instance of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/Branch"},{"type":"text","text":" corresponds to a "},{"type":"codeVoice","code":"IfConfigClauseSyntax"},{"type":"text","text":" node in the Swift syntax tree."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Branch"},{"type":"text","text":" struct provides access to the keyword, the optional condition, and the source location of the branch."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/syntaxsparrow\/conditionalcompilationblock\/branch"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"identifiers":["doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Declaration","doc:\/\/SyntaxSparrow\/s23CustomStringConvertibleP","doc:\/\/SyntaxSparrow\/SQ","doc:\/\/SyntaxSparrow\/SH","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/SyntaxChildCollecting","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/SyntaxRepresenting"],"kind":"relationships","title":"Conforms To","type":"conformsTo"}],"identifier":{"url":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/Branch","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Represents a branch within a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/Branch"},{"type":"text","text":"."}],"kind":"symbol","metadata":{"navigatorTitle":[{"kind":"identifier","text":"Branch"}],"role":"symbol","title":"ConditionalCompilationBlock.Branch","roleHeading":"Structure","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Branch"}],"symbolKind":"struct","externalID":"s:13SyntaxSparrow27ConditionalCompilationBlockV6BranchV","extendedModule":"SyntaxSparrow","modules":[{"name":"SyntaxSparrow"}]},"hierarchy":{"paths":[["doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock"]]},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/Branch\/init(node:)"]},{"title":"Instance Properties","identifiers":["doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/Branch\/childCollection","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/Branch\/condition","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/Branch\/keyword-swift.property","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/Branch\/node"]},{"title":"Enumerations","identifiers":["doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/Branch\/Keyword-swift.enum"]},{"title":"Default Implementations","identifiers":["doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/Branch\/CustomStringConvertible-Implementations","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/Branch\/Equatable-Implementations","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/Branch\/Hashable-Implementations","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/Branch\/SyntaxChildCollecting-Implementations"],"generated":true}],"references":{"doc://SyntaxSparrow/documentation/SyntaxSparrow/SyntaxChildCollecting":{"role":"symbol","title":"SyntaxChildCollecting","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"SyntaxChildCollecting"}],"abstract":[],"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/SyntaxChildCollecting","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SyntaxChildCollecting"}],"url":"\/documentation\/syntaxsparrow\/syntaxchildcollecting"},"doc://SyntaxSparrow/documentation/SyntaxSparrow":{"role":"collection","title":"SyntaxSparrow","abstract":[],"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow","kind":"symbol","type":"topic","url":"\/documentation\/syntaxsparrow"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/ConditionalCompilationBlock/Branch/childCollection":{"role":"symbol","title":"childCollection","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"childCollection"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"DeclarationCollection","preciseIdentifier":"s:13SyntaxSparrow21DeclarationCollectionC"}],"abstract":[{"type":"reference","isActive":true,"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/DeclarationCollection"},{"type":"text","text":" utility instance any results will be collected into."}],"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/Branch\/childCollection","kind":"symbol","type":"topic","url":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/branch\/childcollection"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/ConditionalCompilationBlock/Branch/keyword-swift.property":{"role":"symbol","title":"keyword","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"keyword"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Keyword","preciseIdentifier":"s:13SyntaxSparrow27ConditionalCompilationBlockV6BranchV7KeywordO"}],"abstract":[{"type":"text","text":"The branch keyword, either "},{"type":"codeVoice","code":"\"#if\""},{"type":"text","text":", "},{"type":"codeVoice","code":"\"#elseif\""},{"type":"text","text":", or "},{"type":"codeVoice","code":"\"#else\""},{"type":"text","text":"."}],"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/Branch\/keyword-swift.property","kind":"symbol","type":"topic","url":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/branch\/keyword-swift.property"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/ConditionalCompilationBlock/Branch/init(node:)":{"role":"symbol","title":"init(node:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"node"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"IfConfigClauseSyntax","preciseIdentifier":"s:11SwiftSyntax014IfConfigClauseB0V"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Will initialize a new instance that will resolve details from the given node as they are requested."}],"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/Branch\/init(node:)","kind":"symbol","type":"topic","url":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/branch\/init(node:)"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/ConditionalCompilationBlock/Branch/node":{"role":"symbol","title":"node","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"node"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"IfConfigClauseSyntax","preciseIdentifier":"s:11SwiftSyntax014IfConfigClauseB0V"}],"abstract":[{"type":"text","text":"The raw syntax node being represented by the instance."}],"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/Branch\/node","kind":"symbol","type":"topic","url":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/branch\/node"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/ConditionalCompilationBlock":{"role":"symbol","title":"ConditionalCompilationBlock","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ConditionalCompilationBlock"}],"abstract":[{"type":"text","text":"Represents a Swift conditional compilation block declaration."}],"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ConditionalCompilationBlock"}],"url":"\/documentation\/syntaxsparrow\/conditionalcompilationblock"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/ConditionalCompilationBlock/Branch/CustomStringConvertible-Implementations":{"role":"collectionGroup","title":"CustomStringConvertible Implementations","abstract":[],"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/Branch\/CustomStringConvertible-Implementations","kind":"article","type":"topic","url":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/branch\/customstringconvertible-implementations"},"doc://SyntaxSparrow/SH":{"type":"unresolvable","title":"Swift.Hashable","identifier":"doc:\/\/SyntaxSparrow\/SH"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/ConditionalCompilationBlock/Branch/Keyword-swift.enum":{"role":"symbol","title":"ConditionalCompilationBlock.Branch.Keyword","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"Keyword"}],"abstract":[],"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/Branch\/Keyword-swift.enum","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Keyword"}],"url":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/branch\/keyword-swift.enum"},"doc://SyntaxSparrow/s23CustomStringConvertibleP":{"type":"unresolvable","title":"Swift.CustomStringConvertible","identifier":"doc:\/\/SyntaxSparrow\/s23CustomStringConvertibleP"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/ConditionalCompilationBlock/Branch":{"role":"symbol","title":"ConditionalCompilationBlock.Branch","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Branch"}],"abstract":[{"type":"text","text":"Represents a branch within a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/Branch"},{"type":"text","text":"."}],"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/Branch","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Branch"}],"url":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/branch"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/ConditionalCompilationBlock/Branch/Equatable-Implementations":{"role":"collectionGroup","title":"Equatable Implementations","abstract":[],"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/Branch\/Equatable-Implementations","kind":"article","type":"topic","url":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/branch\/equatable-implementations"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/ConditionalCompilationBlock/Branch/Hashable-Implementations":{"role":"collectionGroup","title":"Hashable Implementations","abstract":[],"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/Branch\/Hashable-Implementations","kind":"article","type":"topic","url":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/branch\/hashable-implementations"},"doc://SyntaxSparrow/SQ":{"type":"unresolvable","title":"Swift.Equatable","identifier":"doc:\/\/SyntaxSparrow\/SQ"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/DeclarationCollection":{"role":"symbol","title":"DeclarationCollection","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"DeclarationCollection"}],"abstract":[],"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/DeclarationCollection","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"DeclarationCollection"}],"url":"\/documentation\/syntaxsparrow\/declarationcollection"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/ConditionalCompilationBlock/Branch/SyntaxChildCollecting-Implementations":{"role":"collectionGroup","title":"SyntaxChildCollecting Implementations","abstract":[],"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/Branch\/SyntaxChildCollecting-Implementations","kind":"article","type":"topic","url":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/branch\/syntaxchildcollecting-implementations"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/ConditionalCompilationBlock/Branch/condition":{"role":"symbol","title":"condition","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"condition"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":"?"}],"abstract":[{"type":"text","text":"The branch condition (if any)."}],"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/ConditionalCompilationBlock\/Branch\/condition","kind":"symbol","type":"topic","url":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/branch\/condition"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Declaration":{"role":"symbol","title":"Declaration","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Declaration"}],"abstract":[{"type":"text","text":"Public protocol that any public semantic declarations will conform to. A declaration is considered a semantic element that represents items such as struct, protocol, class, enum, etc"}],"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Declaration","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Declaration"}],"url":"\/documentation\/syntaxsparrow\/declaration"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/SyntaxRepresenting":{"role":"symbol","title":"SyntaxRepresenting","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"SyntaxRepresenting"}],"abstract":[],"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/SyntaxRepresenting","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SyntaxRepresenting"}],"url":"\/documentation\/syntaxsparrow\/syntaxrepresenting"}}}