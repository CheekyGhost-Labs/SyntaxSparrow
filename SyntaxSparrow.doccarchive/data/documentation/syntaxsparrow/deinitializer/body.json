{"abstract":[{"type":"text","text":"Struct representing the body of the function."}],"hierarchy":{"paths":[["doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Deinitializer"]]},"sections":[],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"body","kind":"identifier"},{"text":": ","kind":"text"},{"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/CodeBlock","text":"CodeBlock","kind":"typeIdentifier","preciseIdentifier":"s:13SyntaxSparrow9CodeBlockV"},{"text":"? { ","kind":"text"},{"text":"get","kind":"keyword"},{"kind":"text","text":" }"}],"platforms":["macOS"],"languages":["swift"]}]},{"kind":"content","content":[{"type":"heading","level":2,"text":"Discussion","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"text":"For example in the following declaration:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["func deinit() {","    print(\"hello\")","    print(\"world\")","}"]},{"inlineContent":[{"type":"text","text":"would provide a "},{"code":"body","type":"codeVoice"},{"text":" that is not ","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":" and would have 2 statements within it."}],"type":"paragraph"}]}],"schemaVersion":{"minor":3,"major":0,"patch":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/syntaxsparrow\/deinitializer\/body"]}],"metadata":{"roleHeading":"Instance Property","modules":[{"name":"SyntaxSparrow"}],"externalID":"s:13SyntaxSparrow13DeinitializerV4bodyAA9CodeBlockVSgvp","symbolKind":"property","title":"body","role":"symbol","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"body","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:13SyntaxSparrow9CodeBlockV","text":"CodeBlock","kind":"typeIdentifier"},{"text":"?","kind":"text"}]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Deinitializer\/body"},"kind":"symbol","references":{"doc://SyntaxSparrow/documentation/SyntaxSparrow/Deinitializer/body":{"url":"\/documentation\/syntaxsparrow\/deinitializer\/body","kind":"symbol","role":"symbol","title":"body","abstract":[{"type":"text","text":"Struct representing the body of the function."}],"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"body","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"CodeBlock","preciseIdentifier":"s:13SyntaxSparrow9CodeBlockV"},{"text":"?","kind":"text"}],"type":"topic","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Deinitializer\/body"},"doc://SyntaxSparrow/documentation/SyntaxSparrow":{"abstract":[],"url":"\/documentation\/syntaxsparrow","type":"topic","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow","kind":"symbol","role":"collection","title":"SyntaxSparrow"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Deinitializer":{"title":"Deinitializer","role":"symbol","url":"\/documentation\/syntaxsparrow\/deinitializer","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Deinitializer","abstract":[{"text":"Represents a Swift deinitializer declaration.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Deinitializer"}],"navigatorTitle":[{"kind":"identifier","text":"Deinitializer"}],"kind":"symbol","type":"topic"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/CodeBlock":{"role":"symbol","url":"\/documentation\/syntaxsparrow\/codeblock","abstract":[{"text":"Represents the swift code block element ","type":"text"},{"code":"CodeBlockSyntax","type":"codeVoice"},{"text":".","type":"text"}],"title":"CodeBlock","kind":"symbol","navigatorTitle":[{"text":"CodeBlock","kind":"identifier"}],"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/CodeBlock","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CodeBlock"}],"type":"topic"}}}