{"abstract":[{"type":"text","text":"A "},{"code":"result","type":"codeVoice"},{"text":" type is used when a parameter’s type resolves to a valid ","type":"text"},{"code":"Result","type":"codeVoice"},{"type":"text","text":"."}],"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"tokens":[{"text":"case","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"result"},{"text":"(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:13SyntaxSparrow6ResultV","kind":"typeIdentifier","text":"Result","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Result"},{"kind":"text","text":")"}],"languages":["swift"]}],"kind":"declarations"},{"content":[{"type":"heading","text":"Discussion","anchor":"discussion","level":2},{"inlineContent":[{"type":"text","text":"The "},{"code":"Result","type":"codeVoice"},{"type":"text","text":" type supports "},{"code":"isOptional","type":"codeVoice"},{"text":" to derive if the type has the optional\/","type":"text"},{"type":"codeVoice","code":"?"},{"type":"text","text":" suffix."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"For example,","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["func processResult(_ result: Result<String, Error>) { ... }"]},{"inlineContent":[{"type":"text","text":"would have a type of "},{"code":".result(Result)","type":"codeVoice"},{"text":" where the ","type":"text"},{"type":"codeVoice","code":"Result"},{"text":" type represents a computation that can either result in a value of type ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" ","type":"text"},{"text":"(the success case) or an ","type":"text"},{"type":"codeVoice","code":"Error"},{"type":"text","text":" (the failure case)."}],"type":"paragraph"}],"kind":"content"}],"kind":"symbol","sections":[],"metadata":{"title":"EntityType.result(_:)","roleHeading":"Case","externalID":"s:13SyntaxSparrow10EntityTypeO6resultyAcA6ResultVcACmF","symbolKind":"case","fragments":[{"kind":"keyword","text":"case"},{"text":" ","kind":"text"},{"kind":"identifier","text":"result"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:13SyntaxSparrow6ResultV","text":"Result","kind":"typeIdentifier"},{"kind":"text","text":")"}],"modules":[{"name":"SyntaxSparrow"}],"role":"symbol"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/syntaxsparrow\/entitytype\/result(_:)"]}],"identifier":{"url":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType\/result(_:)","interfaceLanguage":"swift"},"schemaVersion":{"patch":0,"major":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType"]]},"references":{"doc://SyntaxSparrow/documentation/SyntaxSparrow/EntityType/result(_:)":{"title":"EntityType.result(_:)","abstract":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"result"},{"text":" type is used when a parameter’s type resolves to a valid ","type":"text"},{"type":"codeVoice","code":"Result"},{"type":"text","text":"."}],"kind":"symbol","fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"result"},{"kind":"text","text":"("},{"preciseIdentifier":"s:13SyntaxSparrow6ResultV","text":"Result","kind":"typeIdentifier"},{"text":")","kind":"text"}],"type":"topic","url":"\/documentation\/syntaxsparrow\/entitytype\/result(_:)","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType\/result(_:)","role":"symbol"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/EntityType/simple(_:)":{"title":"EntityType.simple(_:)","role":"symbol","url":"\/documentation\/syntaxsparrow\/entitytype\/simple(_:)","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType\/simple(_:)","abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"simple"},{"type":"text","text":" type refers to a standard swift type can’t does not have any nested or related syntax."},{"text":" ","type":"text"},{"type":"strong","inlineContent":[{"type":"text","text":"Note:"}]},{"text":" This is also used for any unsupported syntax types. i.e ","type":"text"},{"code":"CVarArg","type":"codeVoice"},{"type":"text","text":" is not currently supported so it will use the"},{"type":"text","text":" "},{"type":"codeVoice","code":".simple(\"CVarArg...\")"}],"fragments":[{"kind":"keyword","text":"case"},{"text":" ","kind":"text"},{"text":"simple","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"kind":"text","text":")"}],"kind":"symbol","type":"topic"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Result":{"url":"\/documentation\/syntaxsparrow\/result","title":"Result","abstract":[{"type":"text","text":"Represents a Swift "},{"type":"codeVoice","code":"Result"},{"text":" type.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Result"}],"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Result","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Result"}],"type":"topic","role":"symbol"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/EntityType":{"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"EntityType"}],"title":"EntityType","url":"\/documentation\/syntaxsparrow\/entitytype","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"EntityType"}],"abstract":[{"type":"text","text":"An "},{"isActive":true,"type":"reference","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType"},{"text":" represents a type being referenced by a property or parameter. It is encapsulated in the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType"},{"type":"text","text":" "},{"text":"enumeration to provide a more simple entry point when working with sets of parameter inputs and properties.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"By default a "},{"isActive":true,"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType\/simple(_:)","type":"reference"},{"type":"text","text":" type will be used with a string representation of the declared type."},{"type":"text","text":" "},{"text":"Initial support for some complex types, such as closures, tuples, and results is provided.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"As support for more complex types are added they will be added as a dedicated enumeration case to the "},{"code":"EntityType","type":"codeVoice"}],"kind":"symbol","type":"topic"},"doc://SyntaxSparrow/documentation/SyntaxSparrow":{"abstract":[],"url":"\/documentation\/syntaxsparrow","type":"topic","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow","kind":"symbol","role":"collection","title":"SyntaxSparrow"}}}