{"identifier":{"url":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType\/result(_:)","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType"]]},"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"result"},{"text":" type is used when a parameter’s type resolves to a valid ","type":"text"},{"code":"Result","type":"codeVoice"},{"text":".","type":"text"}],"kind":"symbol","sections":[],"metadata":{"title":"EntityType.result(_:)","fragments":[{"kind":"keyword","text":"case"},{"text":" ","kind":"text"},{"kind":"identifier","text":"result"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Result","preciseIdentifier":"s:13SyntaxSparrow6ResultV"},{"text":")","kind":"text"}],"externalID":"s:13SyntaxSparrow10EntityTypeO6resultyAcA6ResultVcACmF","roleHeading":"Case","symbolKind":"case","role":"symbol","modules":[{"name":"SyntaxSparrow"}]},"schemaVersion":{"major":0,"minor":3,"patch":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/syntaxsparrow\/entitytype\/result(_:)"]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"text":"result","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"_"},{"kind":"text","text":": "},{"text":"Result","kind":"typeIdentifier","preciseIdentifier":"s:13SyntaxSparrow6ResultV","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Result"},{"text":")","kind":"text"}],"platforms":["macOS"],"languages":["swift"]}]},{"content":[{"text":"Discussion","type":"heading","level":2,"anchor":"discussion"},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Result"},{"type":"text","text":" type supports "},{"type":"codeVoice","code":"isOptional"},{"text":" to derive if the type has the optional\/","type":"text"},{"type":"codeVoice","code":"?"},{"type":"text","text":" suffix."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"For example,","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["func processResult(_ result: Result<String, Error>) { ... }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"would have a type of "},{"code":".result(Result)","type":"codeVoice"},{"type":"text","text":" where the "},{"type":"codeVoice","code":"Result"},{"type":"text","text":" type represents a computation that can either result in a value of type "},{"code":"String","type":"codeVoice"},{"text":" ","type":"text"},{"text":"(the success case) or an ","type":"text"},{"type":"codeVoice","code":"Error"},{"text":" (the failure case).","type":"text"}]}],"kind":"content"}],"references":{"doc://SyntaxSparrow/documentation/SyntaxSparrow/Result":{"url":"\/documentation\/syntaxsparrow\/result","navigatorTitle":[{"text":"Result","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Result","abstract":[{"text":"Represents a Swift ","type":"text"},{"type":"codeVoice","code":"Result"},{"type":"text","text":" type."}],"type":"topic","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Result"}],"title":"Result"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/EntityType/result(_:)":{"title":"EntityType.result(_:)","kind":"symbol","abstract":[{"type":"text","text":"A "},{"code":"result","type":"codeVoice"},{"text":" type is used when a parameter’s type resolves to a valid ","type":"text"},{"type":"codeVoice","code":"Result"},{"type":"text","text":"."}],"type":"topic","url":"\/documentation\/syntaxsparrow\/entitytype\/result(_:)","role":"symbol","fragments":[{"kind":"keyword","text":"case"},{"text":" ","kind":"text"},{"kind":"identifier","text":"result"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:13SyntaxSparrow6ResultV","text":"Result","kind":"typeIdentifier"},{"text":")","kind":"text"}],"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType\/result(_:)"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/EntityType":{"title":"EntityType","navigatorTitle":[{"kind":"identifier","text":"EntityType"}],"type":"topic","url":"\/documentation\/syntaxsparrow\/entitytype","kind":"symbol","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType","role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"EntityType","kind":"identifier"}],"abstract":[{"type":"text","text":"An "},{"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType","isActive":true,"type":"reference"},{"type":"text","text":" represents a type being referenced by a property or parameter. It is encapsulated in the "},{"type":"reference","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType","isActive":true},{"text":" ","type":"text"},{"text":"enumeration to provide a more simple entry point when working with sets of parameter inputs and properties.","type":"text"},{"type":"text","text":" "},{"text":"By default a ","type":"text"},{"isActive":true,"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType\/simple(_:)","type":"reference"},{"text":" type will be used with a string representation of the declared type.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Initial support for some complex types, such as closures, tuples, and results is provided."},{"text":" ","type":"text"},{"type":"text","text":"As support for more complex types are added they will be added as a dedicated enumeration case to the "},{"type":"codeVoice","code":"EntityType"}]},"doc://SyntaxSparrow/documentation/SyntaxSparrow":{"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow","url":"\/documentation\/syntaxsparrow","kind":"symbol","title":"SyntaxSparrow","role":"collection","abstract":[],"type":"topic"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/EntityType/simple(_:)":{"title":"EntityType.simple(_:)","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType\/simple(_:)","url":"\/documentation\/syntaxsparrow\/entitytype\/simple(_:)","kind":"symbol","type":"topic","role":"symbol","fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"text":"simple","kind":"identifier"},{"text":"(","kind":"text"},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"text":")","kind":"text"}],"abstract":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"simple"},{"type":"text","text":" type refers to a standard swift type can’t does not have any nested or related syntax."},{"text":" ","type":"text"},{"type":"strong","inlineContent":[{"type":"text","text":"Note:"}]},{"text":" This is also used for any unsupported syntax types. i.e ","type":"text"},{"code":"CVarArg","type":"codeVoice"},{"type":"text","text":" is not currently supported so it will use the"},{"text":" ","type":"text"},{"code":".simple(\"CVarArg...\")","type":"codeVoice"}]}}}