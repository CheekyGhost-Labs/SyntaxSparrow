{"sections":[],"metadata":{"modules":[{"name":"SyntaxSparrow"}],"fragments":[{"kind":"keyword","text":"case"},{"text":" ","kind":"text"},{"kind":"identifier","text":"set"},{"text":"(","kind":"text"},{"text":"SetDecl","kind":"typeIdentifier","preciseIdentifier":"s:13SyntaxSparrow7SetDeclV"},{"text":")","kind":"text"}],"symbolKind":"case","title":"EntityType.set(_:)","roleHeading":"Case","role":"symbol","externalID":"s:13SyntaxSparrow10EntityTypeO3setyAcA7SetDeclVcACmF"},"hierarchy":{"paths":[["doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType"]]},"kind":"symbol","abstract":[{"text":"A ","type":"text"},{"code":"array","type":"codeVoice"},{"text":" type is used when a parameter’s type is a valid ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/SetDecl"},{"text":" type.","type":"text"}],"identifier":{"url":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType\/set(_:)","interfaceLanguage":"swift"},"schemaVersion":{"major":0,"minor":3,"patch":0},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"set"},{"text":"(","kind":"text"},{"text":"_","kind":"externalParam"},{"kind":"text","text":": "},{"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/SetDecl","kind":"typeIdentifier","preciseIdentifier":"s:13SyntaxSparrow7SetDeclV","text":"SetDecl"},{"kind":"text","text":")"}]}]},{"kind":"content","content":[{"anchor":"discussion","text":"Discussion","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"Set","type":"codeVoice"},{"text":" supports ","type":"text"},{"type":"codeVoice","code":"isOptional"},{"text":" to derive if the type has the optional\/","type":"text"},{"type":"codeVoice","code":"?"},{"type":"text","text":" suffix."}]},{"inlineContent":[{"type":"text","text":"For example,"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["func example(names: Set<String>)"]},{"type":"paragraph","inlineContent":[{"text":"would have a type of ","type":"text"},{"type":"codeVoice","code":".set(Set)"},{"text":" where the ","type":"text"},{"type":"reference","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/SetDecl","isActive":true},{"type":"text","text":" has the "},{"code":"elementType","type":"codeVoice"},{"type":"text","text":" of "},{"code":".simple(\"String\")","type":"codeVoice"},{"text":".","type":"text"}]}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/syntaxsparrow\/entitytype\/set(_:)"]}],"references":{"doc://SyntaxSparrow/documentation/SyntaxSparrow/EntityType/set(_:)":{"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType\/set(_:)","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"text":"set","kind":"identifier"},{"text":"(","kind":"text"},{"text":"SetDecl","kind":"typeIdentifier","preciseIdentifier":"s:13SyntaxSparrow7SetDeclV"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"A "},{"code":"array","type":"codeVoice"},{"text":" type is used when a parameter’s type is a valid ","type":"text"},{"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/SetDecl","type":"reference","isActive":true},{"text":" type.","type":"text"}],"role":"symbol","type":"topic","title":"EntityType.set(_:)","kind":"symbol","url":"\/documentation\/syntaxsparrow\/entitytype\/set(_:)"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/SetDecl":{"url":"\/documentation\/syntaxsparrow\/setdecl","role":"symbol","title":"SetDecl","kind":"symbol","navigatorTitle":[{"text":"SetDecl","kind":"identifier"}],"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"SetDecl"}],"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/SetDecl","abstract":[{"type":"text","text":"Represents a Swift "},{"type":"codeVoice","code":"Set"},{"type":"text","text":" type."}]},"doc://SyntaxSparrow/documentation/SyntaxSparrow/EntityType":{"abstract":[{"type":"text","text":"An "},{"isActive":true,"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType","type":"reference"},{"text":" represents a type being referenced by a property or parameter. It is encapsulated in the ","type":"text"},{"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType","isActive":true,"type":"reference"},{"type":"text","text":" "},{"type":"text","text":"enumeration to provide a more simple entry point when working with sets of parameter inputs and properties."},{"type":"text","text":" "},{"type":"text","text":"By default a "},{"type":"reference","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType\/simple(_:)","isActive":true},{"text":" type will be used with a string representation of the declared type.","type":"text"},{"type":"text","text":" "},{"text":"Initial support for some complex types, such as closures, tuples, and results is provided.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"As support for more complex types are added they will be added as a dedicated enumeration case to the "},{"type":"codeVoice","code":"EntityType"}],"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType","type":"topic","title":"EntityType","kind":"symbol","role":"symbol","url":"\/documentation\/syntaxsparrow\/entitytype","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"EntityType"}],"navigatorTitle":[{"text":"EntityType","kind":"identifier"}]},"doc://SyntaxSparrow/documentation/SyntaxSparrow":{"kind":"symbol","role":"collection","type":"topic","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow","url":"\/documentation\/syntaxsparrow","abstract":[],"title":"SyntaxSparrow"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/EntityType/simple(_:)":{"kind":"symbol","type":"topic","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType\/simple(_:)","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"text":"simple","kind":"identifier"},{"text":"(","kind":"text"},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"kind":"text","text":")"}],"url":"\/documentation\/syntaxsparrow\/entitytype\/simple(_:)","abstract":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"simple"},{"type":"text","text":" type refers to a standard swift type can’t does not have any nested or related syntax."},{"type":"text","text":" "},{"inlineContent":[{"text":"Note:","type":"text"}],"type":"strong"},{"type":"text","text":" This is also used for any unsupported syntax types. i.e "},{"type":"codeVoice","code":"CVarArg"},{"type":"text","text":" is not currently supported so it will use the"},{"type":"text","text":" "},{"code":".simple(\"CVarArg...\")","type":"codeVoice"}],"title":"EntityType.simple(_:)","role":"symbol"}}}