{"hierarchy":{"paths":[["doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType"]]},"identifier":{"url":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType\/void(_:_:)","interfaceLanguage":"swift"},"abstract":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"void"},{"text":" type is used when a parameter’s type resolves to ","type":"text"},{"code":"Void","type":"codeVoice"},{"text":". It includes the raw declaration (","type":"text"},{"type":"codeVoice","code":"\"Void\""},{"type":"text","text":" or "},{"type":"codeVoice","code":"\"()\""},{"type":"text","text":") includes if the type is optional."}],"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"text":"void","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"_"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"text":", ","kind":"text"},{"text":"_","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":")","kind":"text"}],"languages":["swift"]}],"kind":"declarations"},{"content":[{"level":2,"type":"heading","text":"Discussion","anchor":"discussion"},{"inlineContent":[{"type":"text","text":"For example,"}],"type":"paragraph"},{"syntax":"swift","code":["func example(_ handler: ()) { ... }","func example(_ handler: Void) { ... }","func example(_ handler: () -> Void) { ... }"],"type":"codeListing"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"The first function would have a parameter with the type ","type":"text"},{"code":".void","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"The second function would have a parameter with the type "},{"code":".void","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The third function would have a parameter with the type "},{"type":"codeVoice","code":".closure(Closure)"},{"text":" where the closure input and output are both ","type":"text"},{"type":"codeVoice","code":".void"}]}]}]}],"kind":"content"}],"metadata":{"fragments":[{"text":"case","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"void"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"text":")","kind":"text"}],"externalID":"s:13SyntaxSparrow10EntityTypeO4voidyACSS_SbtcACmF","role":"symbol","roleHeading":"Case","symbolKind":"case","title":"EntityType.void(_:_:)","modules":[{"name":"SyntaxSparrow"}]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/syntaxsparrow\/entitytype\/void(_:_:)"]}],"kind":"symbol","sections":[],"schemaVersion":{"patch":0,"major":0,"minor":3},"references":{"doc://SyntaxSparrow/documentation/SyntaxSparrow/EntityType":{"abstract":[{"type":"text","text":"An "},{"isActive":true,"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType","type":"reference"},{"text":" represents a type being referenced by a property or parameter. It is encapsulated in the ","type":"text"},{"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType","isActive":true,"type":"reference"},{"type":"text","text":" "},{"type":"text","text":"enumeration to provide a more simple entry point when working with sets of parameter inputs and properties."},{"type":"text","text":" "},{"type":"text","text":"By default a "},{"type":"reference","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType\/simple(_:)","isActive":true},{"text":" type will be used with a string representation of the declared type.","type":"text"},{"type":"text","text":" "},{"text":"Initial support for some complex types, such as closures, tuples, and results is provided.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"As support for more complex types are added they will be added as a dedicated enumeration case to the "},{"type":"codeVoice","code":"EntityType"}],"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType","type":"topic","title":"EntityType","kind":"symbol","role":"symbol","url":"\/documentation\/syntaxsparrow\/entitytype","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"EntityType"}],"navigatorTitle":[{"text":"EntityType","kind":"identifier"}]},"doc://SyntaxSparrow/documentation/SyntaxSparrow/EntityType/void(_:_:)":{"kind":"symbol","url":"\/documentation\/syntaxsparrow\/entitytype\/void(_:_:)","type":"topic","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"text":"void","kind":"identifier"},{"text":"(","kind":"text"},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":")","kind":"text"}],"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType\/void(_:_:)","title":"EntityType.void(_:_:)","role":"symbol","abstract":[{"text":"A ","type":"text"},{"code":"void","type":"codeVoice"},{"text":" type is used when a parameter’s type resolves to ","type":"text"},{"code":"Void","type":"codeVoice"},{"text":". It includes the raw declaration (","type":"text"},{"code":"\"Void\"","type":"codeVoice"},{"type":"text","text":" or "},{"code":"\"()\"","type":"codeVoice"},{"type":"text","text":") includes if the type is optional."}]},"doc://SyntaxSparrow/documentation/SyntaxSparrow":{"kind":"symbol","role":"collection","type":"topic","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow","url":"\/documentation\/syntaxsparrow","abstract":[],"title":"SyntaxSparrow"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/EntityType/simple(_:)":{"kind":"symbol","type":"topic","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType\/simple(_:)","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"text":"simple","kind":"identifier"},{"text":"(","kind":"text"},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"kind":"text","text":")"}],"url":"\/documentation\/syntaxsparrow\/entitytype\/simple(_:)","abstract":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"simple"},{"type":"text","text":" type refers to a standard swift type can’t does not have any nested or related syntax."},{"type":"text","text":" "},{"inlineContent":[{"text":"Note:","type":"text"}],"type":"strong"},{"type":"text","text":" This is also used for any unsupported syntax types. i.e "},{"type":"codeVoice","code":"CVarArg"},{"type":"text","text":" is not currently supported so it will use the"},{"type":"text","text":" "},{"code":".simple(\"CVarArg...\")","type":"codeVoice"}],"title":"EntityType.simple(_:)","role":"symbol"}}}