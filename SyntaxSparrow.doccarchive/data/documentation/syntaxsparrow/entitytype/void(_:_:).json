{"kind":"symbol","schemaVersion":{"minor":3,"patch":0,"major":0},"metadata":{"title":"EntityType.void(_:_:)","fragments":[{"kind":"keyword","text":"case"},{"text":" ","kind":"text"},{"text":"void","kind":"identifier"},{"text":"(","kind":"text"},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":")","kind":"text"}],"role":"symbol","modules":[{"name":"SyntaxSparrow"}],"externalID":"s:13SyntaxSparrow10EntityTypeO4voidyACSS_SbtcACmF","symbolKind":"case","roleHeading":"Case"},"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"void"},{"text":" type is used when a parameter’s type resolves to ","type":"text"},{"code":"Void","type":"codeVoice"},{"text":". It includes the raw declaration (","type":"text"},{"type":"codeVoice","code":"\"Void\""},{"type":"text","text":" or "},{"type":"codeVoice","code":"\"()\""},{"type":"text","text":") includes if the type is optional."}],"hierarchy":{"paths":[["doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType"]]},"variants":[{"paths":["\/documentation\/syntaxsparrow\/entitytype\/void(_:_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType\/void(_:_:)"},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"case"},{"text":" ","kind":"text"},{"kind":"identifier","text":"void"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"_"},{"kind":"text","text":": "},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"_","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":")","kind":"text"}],"platforms":["macOS"],"languages":["swift"]}]},{"kind":"content","content":[{"text":"Discussion","anchor":"discussion","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"For example,","type":"text"}]},{"code":["func example(_ handler: ()) { ... }","func example(_ handler: Void) { ... }","func example(_ handler: () -> Void) { ... }"],"syntax":"swift","type":"codeListing"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"The first function would have a parameter with the type "},{"code":".void","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"The second function would have a parameter with the type ","type":"text"},{"type":"codeVoice","code":".void"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The third function would have a parameter with the type "},{"type":"codeVoice","code":".closure(Closure)"},{"text":" where the closure input and output are both ","type":"text"},{"type":"codeVoice","code":".void"}]}]}]}]}],"references":{"doc://SyntaxSparrow/documentation/SyntaxSparrow/EntityType/simple(_:)":{"title":"EntityType.simple(_:)","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType\/simple(_:)","url":"\/documentation\/syntaxsparrow\/entitytype\/simple(_:)","kind":"symbol","type":"topic","role":"symbol","fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"text":"simple","kind":"identifier"},{"text":"(","kind":"text"},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"text":")","kind":"text"}],"abstract":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"simple"},{"type":"text","text":" type refers to a standard swift type can’t does not have any nested or related syntax."},{"text":" ","type":"text"},{"type":"strong","inlineContent":[{"type":"text","text":"Note:"}]},{"text":" This is also used for any unsupported syntax types. i.e ","type":"text"},{"code":"CVarArg","type":"codeVoice"},{"type":"text","text":" is not currently supported so it will use the"},{"text":" ","type":"text"},{"code":".simple(\"CVarArg...\")","type":"codeVoice"}]},"doc://SyntaxSparrow/documentation/SyntaxSparrow/EntityType/void(_:_:)":{"url":"\/documentation\/syntaxsparrow\/entitytype\/void(_:_:)","abstract":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"void"},{"type":"text","text":" type is used when a parameter’s type resolves to "},{"type":"codeVoice","code":"Void"},{"text":". It includes the raw declaration (","type":"text"},{"type":"codeVoice","code":"\"Void\""},{"text":" or ","type":"text"},{"code":"\"()\"","type":"codeVoice"},{"type":"text","text":") includes if the type is optional."}],"title":"EntityType.void(_:_:)","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType\/void(_:_:)","role":"symbol","kind":"symbol","fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"text":"void","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"text":")","kind":"text"}],"type":"topic"},"doc://SyntaxSparrow/documentation/SyntaxSparrow":{"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow","url":"\/documentation\/syntaxsparrow","kind":"symbol","title":"SyntaxSparrow","role":"collection","abstract":[],"type":"topic"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/EntityType":{"title":"EntityType","navigatorTitle":[{"kind":"identifier","text":"EntityType"}],"type":"topic","url":"\/documentation\/syntaxsparrow\/entitytype","kind":"symbol","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType","role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"EntityType","kind":"identifier"}],"abstract":[{"type":"text","text":"An "},{"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType","isActive":true,"type":"reference"},{"type":"text","text":" represents a type being referenced by a property or parameter. It is encapsulated in the "},{"type":"reference","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType","isActive":true},{"text":" ","type":"text"},{"text":"enumeration to provide a more simple entry point when working with sets of parameter inputs and properties.","type":"text"},{"type":"text","text":" "},{"text":"By default a ","type":"text"},{"isActive":true,"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType\/simple(_:)","type":"reference"},{"text":" type will be used with a string representation of the declared type.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Initial support for some complex types, such as closures, tuples, and results is provided."},{"text":" ","type":"text"},{"type":"text","text":"As support for more complex types are added they will be added as a dedicated enumeration case to the "},{"type":"codeVoice","code":"EntityType"}]}}}