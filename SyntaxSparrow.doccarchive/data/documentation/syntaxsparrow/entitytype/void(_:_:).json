{"abstract":[{"type":"text","text":"A "},{"code":"void","type":"codeVoice"},{"text":" type is used when a parameter’s type resolves to ","type":"text"},{"code":"Void","type":"codeVoice"},{"text":". It includes the raw declaration (","type":"text"},{"type":"codeVoice","code":"\"Void\""},{"type":"text","text":" or "},{"type":"codeVoice","code":"\"()\""},{"text":") includes if the type is optional.","type":"text"}],"hierarchy":{"paths":[["doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType"]]},"sections":[],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"case"},{"text":" ","kind":"text"},{"kind":"identifier","text":"void"},{"kind":"text","text":"("},{"text":"_","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"kind":"text","text":", "},{"text":"_","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":")","kind":"text"}],"platforms":["macOS"],"languages":["swift"]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"text":"For example,","type":"text"}]},{"code":["func example(_ handler: ()) { ... }","func example(_ handler: Void) { ... }","func example(_ handler: () -> Void) { ... }"],"syntax":"swift","type":"codeListing"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"The first function would have a parameter with the type "},{"code":".void","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The second function would have a parameter with the type ","type":"text"},{"code":".void","type":"codeVoice"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"The third function would have a parameter with the type "},{"type":"codeVoice","code":".closure(Closure)"},{"text":" where the closure input and output are both ","type":"text"},{"type":"codeVoice","code":".void"}],"type":"paragraph"}]}],"type":"unorderedList"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"variants":[{"paths":["\/documentation\/syntaxsparrow\/entitytype\/void(_:_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"title":"EntityType.void(_:_:)","role":"symbol","roleHeading":"Case","symbolKind":"case","fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"void"},{"kind":"text","text":"("},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":")"}],"externalID":"s:13SyntaxSparrow10EntityTypeO4voidyACSS_SbtcACmF","modules":[{"name":"SyntaxSparrow"}]},"identifier":{"url":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType\/void(_:_:)","interfaceLanguage":"swift"},"kind":"symbol","references":{"doc://SyntaxSparrow/documentation/SyntaxSparrow":{"abstract":[],"url":"\/documentation\/syntaxsparrow","type":"topic","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow","kind":"symbol","role":"collection","title":"SyntaxSparrow"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/EntityType":{"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"EntityType"}],"title":"EntityType","url":"\/documentation\/syntaxsparrow\/entitytype","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"EntityType"}],"abstract":[{"type":"text","text":"An "},{"isActive":true,"type":"reference","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType"},{"text":" represents a type being referenced by a property or parameter. It is encapsulated in the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType"},{"type":"text","text":" "},{"text":"enumeration to provide a more simple entry point when working with sets of parameter inputs and properties.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"By default a "},{"isActive":true,"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType\/simple(_:)","type":"reference"},{"type":"text","text":" type will be used with a string representation of the declared type."},{"type":"text","text":" "},{"text":"Initial support for some complex types, such as closures, tuples, and results is provided.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"As support for more complex types are added they will be added as a dedicated enumeration case to the "},{"code":"EntityType","type":"codeVoice"}],"kind":"symbol","type":"topic"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/EntityType/simple(_:)":{"title":"EntityType.simple(_:)","role":"symbol","url":"\/documentation\/syntaxsparrow\/entitytype\/simple(_:)","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType\/simple(_:)","abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"simple"},{"type":"text","text":" type refers to a standard swift type can’t does not have any nested or related syntax."},{"text":" ","type":"text"},{"type":"strong","inlineContent":[{"type":"text","text":"Note:"}]},{"text":" This is also used for any unsupported syntax types. i.e ","type":"text"},{"code":"CVarArg","type":"codeVoice"},{"type":"text","text":" is not currently supported so it will use the"},{"type":"text","text":" "},{"type":"codeVoice","code":".simple(\"CVarArg...\")"}],"fragments":[{"kind":"keyword","text":"case"},{"text":" ","kind":"text"},{"text":"simple","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"kind":"text","text":")"}],"kind":"symbol","type":"topic"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/EntityType/void(_:_:)":{"kind":"symbol","url":"\/documentation\/syntaxsparrow\/entitytype\/void(_:_:)","type":"topic","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType\/void(_:_:)","role":"symbol","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"void"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"void"},{"text":" type is used when a parameter’s type resolves to ","type":"text"},{"code":"Void","type":"codeVoice"},{"type":"text","text":". It includes the raw declaration ("},{"type":"codeVoice","code":"\"Void\""},{"text":" or ","type":"text"},{"code":"\"()\"","type":"codeVoice"},{"type":"text","text":") includes if the type is optional."}],"title":"EntityType.void(_:_:)"}}}