{"metadata":{"role":"symbol","fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"text":"void","kind":"identifier"},{"text":"(","kind":"text"},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"kind":"text","text":")"}],"modules":[{"name":"SyntaxSparrow"}],"title":"EntityType.void(_:_:)","externalID":"s:13SyntaxSparrow10EntityTypeO4voidyACSS_SbtcACmF","roleHeading":"Case","symbolKind":"case"},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"void"},{"text":"(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"_"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"text":")","kind":"text"}],"languages":["swift"]}]},{"content":[{"anchor":"discussion","level":2,"text":"Discussion","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"For example,","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["func example(_ handler: ()) { ... }","func example(_ handler: Void) { ... }","func example(_ handler: () -> Void) { ... }"]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"The first function would have a parameter with the type ","type":"text"},{"code":".void","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The second function would have a parameter with the type "},{"type":"codeVoice","code":".void"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The third function would have a parameter with the type "},{"type":"codeVoice","code":".closure(Closure)"},{"type":"text","text":" where the closure input and output are both "},{"code":".void","type":"codeVoice"}]}]}]}],"kind":"content"}],"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType\/void(_:_:)"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/syntaxsparrow\/entitytype\/void(_:_:)"]}],"sections":[],"schemaVersion":{"minor":3,"major":0,"patch":0},"hierarchy":{"paths":[["doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType"]]},"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"void"},{"type":"text","text":" type is used when a parameter’s type resolves to "},{"type":"codeVoice","code":"Void"},{"type":"text","text":". It includes the raw declaration ("},{"type":"codeVoice","code":"\"Void\""},{"type":"text","text":" or "},{"code":"\"()\"","type":"codeVoice"},{"text":") includes if the type is optional.","type":"text"}],"references":{"doc://SyntaxSparrow/documentation/SyntaxSparrow/EntityType":{"type":"topic","abstract":[{"type":"text","text":"An "},{"type":"reference","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType","isActive":true},{"type":"text","text":" represents a type being referenced by a property or parameter. It is encapsulated in the "},{"isActive":true,"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType","type":"reference"},{"text":" ","type":"text"},{"type":"text","text":"enumeration to provide a more simple entry point when working with sets of parameter inputs and properties."},{"type":"text","text":" "},{"text":"By default a ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType\/simple(_:)"},{"type":"text","text":" type will be used with a string representation of the declared type."},{"type":"text","text":" "},{"type":"text","text":"Initial support for some complex types, such as closures, tuples, and results is provided."},{"type":"text","text":" "},{"type":"text","text":"As support for more complex types are added they will be added as a dedicated enumeration case to the "},{"type":"codeVoice","code":"EntityType"}],"role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"EntityType"}],"title":"EntityType","navigatorTitle":[{"kind":"identifier","text":"EntityType"}],"kind":"symbol","url":"\/documentation\/syntaxsparrow\/entitytype","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/EntityType/simple(_:)":{"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"simple"},{"text":" type refers to a standard swift type can’t does not have any nested or related syntax.","type":"text"},{"text":" ","type":"text"},{"type":"strong","inlineContent":[{"type":"text","text":"Note:"}]},{"text":" This is also used for any unsupported syntax types. i.e ","type":"text"},{"code":"CVarArg","type":"codeVoice"},{"type":"text","text":" is not currently supported so it will use the"},{"type":"text","text":" "},{"type":"codeVoice","code":".simple(\"CVarArg...\")"}],"kind":"symbol","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType\/simple(_:)","type":"topic","title":"EntityType.simple(_:)","role":"symbol","url":"\/documentation\/syntaxsparrow\/entitytype\/simple(_:)","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"simple"},{"kind":"text","text":"("},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"text":")","kind":"text"}]},"doc://SyntaxSparrow/documentation/SyntaxSparrow/EntityType/void(_:_:)":{"fragments":[{"text":"case","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"void"},{"kind":"text","text":"("},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":")","kind":"text"}],"type":"topic","abstract":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"void"},{"type":"text","text":" type is used when a parameter’s type resolves to "},{"type":"codeVoice","code":"Void"},{"type":"text","text":". It includes the raw declaration ("},{"type":"codeVoice","code":"\"Void\""},{"text":" or ","type":"text"},{"type":"codeVoice","code":"\"()\""},{"text":") includes if the type is optional.","type":"text"}],"url":"\/documentation\/syntaxsparrow\/entitytype\/void(_:_:)","kind":"symbol","title":"EntityType.void(_:_:)","role":"symbol","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/EntityType\/void(_:_:)"},"doc://SyntaxSparrow/documentation/SyntaxSparrow":{"abstract":[],"title":"SyntaxSparrow","kind":"symbol","type":"topic","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow","url":"\/documentation\/syntaxsparrow","role":"collection"}}}