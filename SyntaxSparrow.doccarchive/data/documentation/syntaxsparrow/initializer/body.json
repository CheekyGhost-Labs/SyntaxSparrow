{"kind":"symbol","abstract":[{"type":"text","text":"Struct representing the body of the function."}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/syntaxsparrow\/initializer\/body"]}],"schemaVersion":{"major":0,"patch":0,"minor":3},"sections":[],"hierarchy":{"paths":[["doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Initializer"]]},"metadata":{"symbolKind":"property","roleHeading":"Instance Property","role":"symbol","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"body","kind":"identifier"},{"kind":"text","text":": "},{"preciseIdentifier":"s:13SyntaxSparrow9CodeBlockV","text":"CodeBlock","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"title":"body","modules":[{"name":"SyntaxSparrow"}],"externalID":"s:13SyntaxSparrow11InitializerV4bodyAA9CodeBlockVSgvp"},"identifier":{"url":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Initializer\/body","interfaceLanguage":"swift"},"primaryContentSections":[{"declarations":[{"tokens":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"body","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:13SyntaxSparrow9CodeBlockV","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/CodeBlock","kind":"typeIdentifier","text":"CodeBlock"},{"text":"? { ","kind":"text"},{"kind":"keyword","text":"get"},{"kind":"text","text":" }"}],"languages":["swift"],"platforms":["macOS"]}],"kind":"declarations"},{"kind":"content","content":[{"type":"heading","text":"Discussion","level":2,"anchor":"discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example in the following declaration:"}]},{"syntax":"swift","type":"codeListing","code":["init() {","    print(\"hello\")","    print(\"world\")","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"would provide a "},{"code":"body","type":"codeVoice"},{"text":" that is not ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" and would have 2 statements within it."}]}]}],"references":{"doc://SyntaxSparrow/documentation/SyntaxSparrow/CodeBlock":{"title":"CodeBlock","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CodeBlock","kind":"identifier"}],"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/CodeBlock","type":"topic","role":"symbol","abstract":[{"text":"Represents the swift code block element ","type":"text"},{"code":"CodeBlockSyntax","type":"codeVoice"},{"type":"text","text":"."}],"navigatorTitle":[{"text":"CodeBlock","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/syntaxsparrow\/codeblock"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Initializer":{"type":"topic","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Initializer","navigatorTitle":[{"text":"Initializer","kind":"identifier"}],"abstract":[{"type":"text","text":"Represents a Swift initializer declaration."}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Initializer"}],"url":"\/documentation\/syntaxsparrow\/initializer","role":"symbol","title":"Initializer","kind":"symbol"},"doc://SyntaxSparrow/documentation/SyntaxSparrow":{"kind":"symbol","role":"collection","type":"topic","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow","url":"\/documentation\/syntaxsparrow","abstract":[],"title":"SyntaxSparrow"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Initializer/body":{"url":"\/documentation\/syntaxsparrow\/initializer\/body","type":"topic","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"body","kind":"identifier"},{"text":": ","kind":"text"},{"text":"CodeBlock","kind":"typeIdentifier","preciseIdentifier":"s:13SyntaxSparrow9CodeBlockV"},{"text":"?","kind":"text"}],"title":"body","abstract":[{"type":"text","text":"Struct representing the body of the function."}],"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Initializer\/body","role":"symbol","kind":"symbol"}}}