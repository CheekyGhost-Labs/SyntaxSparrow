{"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"body"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:13SyntaxSparrow9CodeBlockV","text":"CodeBlock"},{"kind":"text","text":"?"}],"role":"symbol","modules":[{"name":"SyntaxSparrow"}],"title":"body","roleHeading":"Instance Property","symbolKind":"property","externalID":"s:13SyntaxSparrow11InitializerV4bodyAA9CodeBlockVSgvp"},"sections":[],"variants":[{"paths":["\/documentation\/syntaxsparrow\/initializer\/body"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Initializer\/body"},"kind":"symbol","hierarchy":{"paths":[["doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Initializer"]]},"abstract":[{"type":"text","text":"Struct representing the body of the function."}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"body","kind":"identifier"},{"kind":"text","text":": "},{"text":"CodeBlock","kind":"typeIdentifier","preciseIdentifier":"s:13SyntaxSparrow9CodeBlockV","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/CodeBlock"},{"kind":"text","text":"? { "},{"text":"get","kind":"keyword"},{"kind":"text","text":" }"}],"languages":["swift"]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"text":"Discussion","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"For example in the following declaration:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["init() {","    print(\"hello\")","    print(\"world\")","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"would provide a "},{"type":"codeVoice","code":"body"},{"text":" that is not ","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":" and would have 2 statements within it."}]}]}],"references":{"doc://SyntaxSparrow/documentation/SyntaxSparrow/CodeBlock":{"navigatorTitle":[{"text":"CodeBlock","kind":"identifier"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/CodeBlock","title":"CodeBlock","url":"\/documentation\/syntaxsparrow\/codeblock","abstract":[{"text":"Represents the swift code block element ","type":"text"},{"type":"codeVoice","code":"CodeBlockSyntax"},{"type":"text","text":"."}],"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodeBlock"}]},"doc://SyntaxSparrow/documentation/SyntaxSparrow":{"abstract":[],"title":"SyntaxSparrow","kind":"symbol","type":"topic","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow","url":"\/documentation\/syntaxsparrow","role":"collection"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Initializer/body":{"kind":"symbol","type":"topic","title":"body","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Initializer\/body","url":"\/documentation\/syntaxsparrow\/initializer\/body","abstract":[{"type":"text","text":"Struct representing the body of the function."}],"role":"symbol","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"body","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:13SyntaxSparrow9CodeBlockV","kind":"typeIdentifier","text":"CodeBlock"},{"text":"?","kind":"text"}]},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Initializer":{"abstract":[{"text":"Represents a Swift initializer declaration.","type":"text"}],"navigatorTitle":[{"text":"Initializer","kind":"identifier"}],"title":"Initializer","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Initializer"}],"type":"topic","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Initializer","url":"\/documentation\/syntaxsparrow\/initializer","role":"symbol"}}}