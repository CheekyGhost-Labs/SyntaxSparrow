{"schemaVersion":{"minor":3,"major":0,"patch":0},"identifier":{"url":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Parameter\/node","interfaceLanguage":"swift"},"kind":"symbol","primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"node","kind":"identifier"},{"kind":"text","text":": "},{"preciseIdentifier":"s:11SwiftSyntax0B0V","text":"Syntax","kind":"typeIdentifier"},{"text":" { ","kind":"text"},{"text":"get","kind":"keyword"},{"text":" }","kind":"text"}]}],"kind":"declarations"},{"content":[{"level":2,"type":"heading","anchor":"discussion","text":"Discussion"},{"syntax":"swift","type":"codeListing","code":["let node = parameter.node \/\/ The parameter node","node.as(FunctionParameterSyntax.self) \/\/ Casts to function parameter syntax node or returns `nil`","node.as(TupleTypeElementSyntax.self) \/\/ Casts to tuple element parameter syntax node or returns `nil`","node.as(EnumCaseParameterSyntax.self) \/\/ Casts to an enum associated value parameter syntax node or returns `nil`"]}],"kind":"content"}],"metadata":{"roleHeading":"Instance Property","role":"symbol","title":"node","modules":[{"name":"SyntaxSparrow"}],"fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"node","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:11SwiftSyntax0B0V","text":"Syntax","kind":"typeIdentifier"}],"externalID":"s:13SyntaxSparrow9ParameterV4node05SwiftA00A0Vvp","symbolKind":"property"},"hierarchy":{"paths":[["doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Parameter"]]},"abstract":[{"text":"The node being represented by the ","type":"text"},{"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Parameter","type":"reference","isActive":true},{"type":"text","text":" instance."},{"type":"text","text":" "},{"inlineContent":[{"type":"text","text":"Note:"}],"type":"strong"},{"type":"text","text":" The node type will be one of the types supported by the "},{"code":"Paramater.init","type":"codeVoice"},{"type":"text","text":" methods."},{"type":"text","text":" "},{"text":"You can use the ","type":"text"},{"code":"as(SyntaxProtocol.Protocol)","type":"codeVoice"},{"type":"text","text":" cast method to resolve the expected one."},{"type":"text","text":" "},{"type":"text","text":"For example:"}],"sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/syntaxsparrow\/parameter\/node"]}],"references":{"doc://SyntaxSparrow/documentation/SyntaxSparrow":{"title":"SyntaxSparrow","role":"collection","url":"\/documentation\/syntaxsparrow","kind":"symbol","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow","type":"topic","abstract":[]},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Parameter":{"title":"Parameter","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Parameter","abstract":[{"type":"text","text":"Represents a Swift function or method parameter."}],"navigatorTitle":[{"text":"Parameter","kind":"identifier"}],"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Parameter"}],"url":"\/documentation\/syntaxsparrow\/parameter","kind":"symbol","type":"topic"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/Parameter/node":{"type":"topic","title":"node","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Parameter\/node","abstract":[{"type":"text","text":"The node being represented by the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/Parameter"},{"text":" instance.","type":"text"},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Note:"}]},{"type":"text","text":" The node type will be one of the types supported by the "},{"code":"Paramater.init","type":"codeVoice"},{"text":" methods.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"You can use the "},{"type":"codeVoice","code":"as(SyntaxProtocol.Protocol)"},{"text":" cast method to resolve the expected one.","type":"text"},{"text":" ","type":"text"},{"text":"For example:","type":"text"}],"fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"node","kind":"identifier"},{"kind":"text","text":": "},{"text":"Syntax","kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax0B0V"}],"kind":"symbol","url":"\/documentation\/syntaxsparrow\/parameter\/node","role":"symbol"}}}