{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/syntaxsparrow\/syntaxexplorercontext\/viewmode"]}],"identifier":{"url":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/SyntaxExplorerContext\/viewMode","interfaceLanguage":"swift"},"metadata":{"title":"viewMode","role":"symbol","symbolKind":"property","roleHeading":"Instance Property","modules":[{"name":"SyntaxSparrow"}],"externalID":"s:13SyntaxSparrow0A15ExplorerContextV8viewMode05SwiftA00a8TreeViewF0Ovp","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"viewMode"},{"kind":"text","text":": "},{"preciseIdentifier":"s:11SwiftSyntax0B12TreeViewModeO","text":"SyntaxTreeViewMode","kind":"typeIdentifier"}]},"hierarchy":{"paths":[["doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/SyntaxExplorerContext"]]},"abstract":[{"type":"text","text":"The mode in which the syntax tree is traversed. This influences how the "},{"code":"SyntaxExplorer","type":"codeVoice"},{"text":" handles unexpected or invalid tokens.","type":"text"}],"kind":"symbol","schemaVersion":{"major":0,"minor":3,"patch":0},"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"viewMode","kind":"identifier"},{"text":": ","kind":"text"},{"text":"SyntaxTreeViewMode","kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax0B12TreeViewModeO"},{"text":" { get }","kind":"text"}],"languages":["swift"]}],"kind":"declarations"},{"content":[{"anchor":"discussion","text":"Discussion","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"The "},{"code":"SyntaxTreeViewMode","type":"codeVoice"},{"type":"text","text":" is crucial in shaping the behavior of the "},{"code":"SyntaxExplorer","type":"codeVoice"},{"type":"text","text":" during syntax tree traversal. It is critical to choose"},{"type":"text","text":" "},{"text":"the appropriate view mode considering the state of the source code being analyzed.","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"code":"strict","type":"codeVoice"},{"type":"text","text":": In this mode, the explorer expects well-formed and valid Swift syntax. If it encounters unexpected or invalid tokens,"},{"type":"text","text":" "},{"text":"it throws an error and halts the traversal. This mode should be used when the source code is known to be error-free, such as after successful","type":"text"},{"type":"text","text":" "},{"type":"text","text":"compilation."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"tolerant"},{"text":": In this mode, the explorer is more lenient and tries to recover from unexpected or invalid tokens, continuing the","type":"text"},{"text":" ","type":"text"},{"text":"traversal as best as it can. This mode should be used when the source code might contain errors, such as during editing or in the case of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"partial code snippets."}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"fixedUp"},{"text":": This mode aims to strike a balance between ","type":"text"},{"type":"codeVoice","code":"strict"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"tolerant"},{"text":". It attempts to fix up minor errors in the source code while","type":"text"},{"text":" ","type":"text"},{"text":"parsing, allowing","type":"text"},{"type":"text","text":" "},{"type":"text","text":"for smoother traversal. However, for major errors, it behaves like the "},{"type":"codeVoice","code":"strict"},{"type":"text","text":" mode and throws an error. This mode can be useful when working"},{"text":" ","type":"text"},{"type":"text","text":"with code that may"},{"text":" ","type":"text"},{"type":"text","text":"contain minor errors, but is largely well-formed."}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"viewMode","type":"codeVoice"},{"type":"text","text":" property of the "},{"type":"codeVoice","code":"SyntaxExplorer"},{"type":"text","text":" holds the chosen "},{"type":"codeVoice","code":"SyntaxTreeViewMode"},{"type":"text","text":" value for the instance and its child nodes."}]}],"kind":"content"}],"sections":[],"references":{"doc://SyntaxSparrow/documentation/SyntaxSparrow/SyntaxExplorerContext":{"kind":"symbol","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/SyntaxExplorerContext","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"SyntaxExplorerContext","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"SyntaxExplorerContext"}],"title":"SyntaxExplorerContext","url":"\/documentation\/syntaxsparrow\/syntaxexplorercontext","role":"symbol","abstract":[{"type":"text","text":"Struct holding contextual instances and details created on a "},{"type":"reference","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/SyntaxTree","isActive":true},{"type":"text","text":" instance."},{"type":"text","text":" "},{"text":"These support structured concurrency as elements such as the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/SparrowSourceLocationConverter"},{"type":"text","text":" are"},{"type":"text","text":" "},{"type":"text","text":"alo used by child evaluations and collectors at different times."}],"type":"topic"},"doc://SyntaxSparrow/documentation/SyntaxSparrow":{"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow","url":"\/documentation\/syntaxsparrow","kind":"symbol","title":"SyntaxSparrow","role":"collection","abstract":[],"type":"topic"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/SparrowSourceLocationConverter":{"kind":"symbol","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/SparrowSourceLocationConverter","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"SparrowSourceLocationConverter"}],"navigatorTitle":[{"text":"SparrowSourceLocationConverter","kind":"identifier"}],"title":"SparrowSourceLocationConverter","url":"\/documentation\/syntaxsparrow\/sparrowsourcelocationconverter","role":"symbol","abstract":[],"type":"topic"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/SyntaxExplorerContext/viewMode":{"title":"viewMode","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"The mode in which the syntax tree is traversed. This influences how the "},{"code":"SyntaxExplorer","type":"codeVoice"},{"type":"text","text":" handles unexpected or invalid tokens."}],"url":"\/documentation\/syntaxsparrow\/syntaxexplorercontext\/viewmode","role":"symbol","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"viewMode","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SyntaxTreeViewMode","preciseIdentifier":"s:11SwiftSyntax0B12TreeViewModeO"}],"identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/SyntaxExplorerContext\/viewMode"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/SyntaxTree":{"abstract":[{"type":"text","text":"Represents a syntax tree in Swift."}],"title":"SyntaxTree","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/SyntaxTree","type":"topic","url":"\/documentation\/syntaxsparrow\/syntaxtree","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"SyntaxTree","kind":"identifier"}],"navigatorTitle":[{"text":"SyntaxTree","kind":"identifier"}],"role":"symbol","kind":"symbol"}}}