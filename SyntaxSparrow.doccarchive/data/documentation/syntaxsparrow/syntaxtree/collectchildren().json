{"identifier":{"url":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/SyntaxTree\/collectChildren()","interfaceLanguage":"swift"},"variants":[{"paths":["\/documentation\/syntaxsparrow\/syntaxtree\/collectchildren()"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"collectChildren","kind":"identifier"},{"kind":"text","text":"()"}],"platforms":["macOS"]}]},{"content":[{"text":"Discussion","type":"heading","level":2,"anchor":"discussion"},{"code":["struct MyStruct {","  struct NestedStruct { ... }","  enum NestedEnum { ... }","}","enum MyEnum {","  case example","  static func performOperation() { ... }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"After invoking "},{"type":"codeVoice","code":"walk"},{"type":"text","text":", the results will be:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"structures"},{"text":" will contain: ","type":"text"},{"code":"[MyStruct]","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"enumerations","type":"codeVoice"},{"type":"text","text":" will contain: "},{"type":"codeVoice","code":"[MyEnum]"},{"type":"text","text":" "},{"text":"Furthermore, ","type":"text"},{"type":"codeVoice","code":"MyStruct"},{"type":"text","text":" and "},{"type":"codeVoice","code":"MyEnum"},{"type":"text","text":" will provide access to their child semantics."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"MyStruct.structures"},{"type":"text","text":" will contain: "},{"type":"codeVoice","code":"[NestedStruct]"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"MyStruct.enumerations"},{"type":"text","text":" will contain: "},{"code":"[NestedEnum]","type":"codeVoice"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"MyEnum.functions","type":"codeVoice"},{"text":" will contain: ","type":"text"},{"type":"codeVoice","code":"[performOperation]"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Thus, "},{"code":"walk","type":"codeVoice"},{"type":"text","text":" facilitates a hierarchical exploration of the syntax tree."}]}],"kind":"content"}],"abstract":[{"text":"This method walks through the syntax tree and collects root-level semantic declarations into their respective arrays.","type":"text"},{"type":"text","text":" "},{"text":"The exploration will stop at the respective source level for each semantic structure, as some declarations also support further exploration.","type":"text"},{"text":" ","type":"text"},{"text":"Consider the following example:","type":"text"}],"hierarchy":{"paths":[["doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow","doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/SyntaxTree"]]},"metadata":{"externalID":"s:13SyntaxSparrow0A4TreeC15collectChildrenyyF","modules":[{"name":"SyntaxSparrow"}],"symbolKind":"method","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"collectChildren","kind":"identifier"},{"kind":"text","text":"()"}],"title":"collectChildren()","role":"symbol","roleHeading":"Instance Method"},"schemaVersion":{"minor":3,"patch":0,"major":0},"sections":[],"references":{"doc://SyntaxSparrow/documentation/SyntaxSparrow":{"title":"SyntaxSparrow","role":"collection","url":"\/documentation\/syntaxsparrow","kind":"symbol","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow","type":"topic","abstract":[]},"doc://SyntaxSparrow/documentation/SyntaxSparrow/SyntaxTree/collectChildren()":{"type":"topic","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/SyntaxTree\/collectChildren()","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"collectChildren"},{"kind":"text","text":"()"}],"title":"collectChildren()","abstract":[{"type":"text","text":"This method walks through the syntax tree and collects root-level semantic declarations into their respective arrays."},{"type":"text","text":" "},{"type":"text","text":"The exploration will stop at the respective source level for each semantic structure, as some declarations also support further exploration."},{"type":"text","text":" "},{"type":"text","text":"Consider the following example:"}],"kind":"symbol","url":"\/documentation\/syntaxsparrow\/syntaxtree\/collectchildren()"},"doc://SyntaxSparrow/documentation/SyntaxSparrow/SyntaxTree":{"title":"SyntaxTree","type":"topic","url":"\/documentation\/syntaxsparrow\/syntaxtree","kind":"symbol","identifier":"doc:\/\/SyntaxSparrow\/documentation\/SyntaxSparrow\/SyntaxTree","role":"symbol","navigatorTitle":[{"text":"SyntaxTree","kind":"identifier"}],"abstract":[{"text":"Represents a syntax tree in Swift.","type":"text"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SyntaxTree","kind":"identifier"}]}}}