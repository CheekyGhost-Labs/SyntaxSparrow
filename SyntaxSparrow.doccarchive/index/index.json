{"interfaceLanguages":{"swift":[{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/declarationcollection\/actors","title":"var actors: [Actor]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/declarationcollection\/classes","title":"var classes: [Class]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/declarationcollection\/conditionalcompilationblocks","title":"var conditionalCompilationBlocks: [ConditionalCompilationBlock]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/declarationcollection\/deinitializers","title":"var deinitializers: [Deinitializer]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/declarationcollection\/enumerations","title":"var enumerations: [Enumeration]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/declarationcollection\/extensions","title":"var extensions: [Extension]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/declarationcollection\/functions","title":"var functions: [Function]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/declarationcollection\/imports","title":"var imports: [Import]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/declarationcollection\/initializers","title":"var initializers: [Initializer]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/declarationcollection\/operators","title":"var operators: [Operator]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/declarationcollection\/precedencegroups","title":"var precedenceGroups: [PrecedenceGroup]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/declarationcollection\/protocols","title":"var protocols: [ProtocolDecl]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/declarationcollection\/structures","title":"var structures: [Structure]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/declarationcollection\/subscripts","title":"var subscripts: [Subscript]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/declarationcollection\/typealiases","title":"var typealiases: [Typealias]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/declarationcollection\/variables","title":"var variables: [Variable]","type":"property"}],"path":"\/documentation\/syntaxsparrow\/declarationcollection","title":"DeclarationCollection","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/sparrowsourcelocationconverter\/init(file:source:)","title":"init(file: String, source: String)","type":"init"},{"path":"\/documentation\/syntaxsparrow\/sparrowsourcelocationconverter\/init(file:tree:)","title":"init(file: String, tree: SyntaxProtocol)","type":"init"},{"path":"\/documentation\/syntaxsparrow\/sparrowsourcelocationconverter\/init(rootparentof:file:)","title":"init(rootParentOf: SyntaxProtocol, file: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/sparrowsourcelocationconverter\/isempty","title":"var isEmpty: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/sparrowsourcelocationconverter\/locationfornode(_:)","title":"func locationForNode(SyntaxProtocol) -> SyntaxSourceLocation","type":"method"},{"path":"\/documentation\/syntaxsparrow\/sparrowsourcelocationconverter\/udpateforsource(_:file:)","title":"func udpateForSource(String, file: String)","type":"method"},{"path":"\/documentation\/syntaxsparrow\/sparrowsourcelocationconverter\/updatefortree(_:file:)","title":"func updateForTree(SyntaxProtocol, file: String)","type":"method"},{"path":"\/documentation\/syntaxsparrow\/sparrowsourcelocationconverter\/updatetorootfornode(_:file:)","title":"func updateToRootForNode(SyntaxProtocol, file: String)","type":"method"}],"path":"\/documentation\/syntaxsparrow\/sparrowsourcelocationconverter","title":"SparrowSourceLocationConverter","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/syntaxtree\/init(viewmode:declarationsyntax:)","title":"init(viewMode: SyntaxTreeViewMode, declarationSyntax: DeclSyntaxProtocol)","type":"init"},{"path":"\/documentation\/syntaxsparrow\/syntaxtree\/init(viewmode:sourceatpath:)","title":"init(viewMode: SyntaxTreeViewMode, sourceAtPath: String) throws","type":"init"},{"path":"\/documentation\/syntaxsparrow\/syntaxtree\/init(viewmode:sourcebuffer:)","title":"init(viewMode: SyntaxTreeViewMode, sourceBuffer: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/syntaxtree\/actors","title":"var actors: [Actor]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/syntaxtree\/childcollection","title":"var childCollection: DeclarationCollection","type":"property"},{"path":"\/documentation\/syntaxsparrow\/syntaxtree\/classes","title":"var classes: [Class]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/syntaxtree\/conditionalcompilationblocks","title":"var conditionalCompilationBlocks: [ConditionalCompilationBlock]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/syntaxtree\/context","title":"var context: SyntaxExplorerContext","type":"property"},{"path":"\/documentation\/syntaxsparrow\/syntaxtree\/deinitializers","title":"var deinitializers: [Deinitializer]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/syntaxtree\/enumerations","title":"var enumerations: [Enumeration]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/syntaxtree\/extensions","title":"var extensions: [Extension]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/syntaxtree\/functions","title":"var functions: [Function]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/syntaxtree\/imports","title":"var imports: [Import]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/syntaxtree\/initializers","title":"var initializers: [Initializer]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/syntaxtree\/isstale","title":"var isStale: Bool","type":"property"},{"path":"\/documentation\/syntaxsparrow\/syntaxtree\/operators","title":"var operators: [Operator]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/syntaxtree\/precedencegroups","title":"var precedenceGroups: [PrecedenceGroup]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/syntaxtree\/protocols","title":"var protocols: [ProtocolDecl]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/syntaxtree\/sourcebuffer","title":"var sourceBuffer: String?","type":"property"},{"path":"\/documentation\/syntaxsparrow\/syntaxtree\/sourcelocationconverter","title":"var sourceLocationConverter: SparrowSourceLocationConverter","type":"property"},{"path":"\/documentation\/syntaxsparrow\/syntaxtree\/structures","title":"var structures: [Structure]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/syntaxtree\/subscripts","title":"var subscripts: [Subscript]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/syntaxtree\/typealiases","title":"var typealiases: [Typealias]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/syntaxtree\/variables","title":"var variables: [Variable]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/syntaxtree\/viewmode","title":"var viewMode: SyntaxTreeViewMode","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/syntaxtree\/collectchildren()","title":"func collectChildren()","type":"method"},{"path":"\/documentation\/syntaxsparrow\/syntaxtree\/collectchildren(viewmode:)","title":"func collectChildren(viewMode: SwiftSyntax.SyntaxTreeViewMode)","type":"method"},{"path":"\/documentation\/syntaxsparrow\/syntaxtree\/declarations(of:)","title":"func declarations<T>(of: T.Type) -> [T]","type":"method"},{"path":"\/documentation\/syntaxsparrow\/syntaxtree\/extractsource(fordeclaration:)","title":"func extractSource(forDeclaration: any Declaration) throws -> SyntaxSourceDetails","type":"method"},{"path":"\/documentation\/syntaxsparrow\/syntaxtree\/updatetosource(_:)","title":"func updateToSource(String)","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/syntaxtree\/declaration(of:fromsyntax:viewmode:)","title":"static func declaration<T>(of: T.Type, fromSyntax: DeclSyntaxProtocol, viewMode: SyntaxTreeViewMode) -> T?","type":"method"},{"path":"\/documentation\/syntaxsparrow\/syntaxtree\/declarations(of:fromsyntax:viewmode:)","title":"static func declarations<T>(of: T.Type, fromSyntax: DeclSyntaxProtocol, viewMode: SyntaxTreeViewMode) -> [T]","type":"method"},{"path":"\/documentation\/syntaxsparrow\/syntaxtree\/declarations(of:insource:viewmode:)","title":"static func declarations<T>(of: T.Type, inSource: String, viewMode: SyntaxTreeViewMode) -> [T]","type":"method"},{"path":"\/documentation\/syntaxsparrow\/syntaxtree\/declarations(of:insourceatpath:viewmode:)","title":"static func declarations<T>(of: T.Type, inSourceAtPath: String, viewMode: SyntaxTreeViewMode) throws -> [T]","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/syntaxtree\/recursivelycollectdeclarations(of:)","title":"func recursivelyCollectDeclarations<T>(of: T.Type) -> [T]","type":"method"}],"path":"\/documentation\/syntaxsparrow\/syntaxtree\/syntaxchildcollecting-implementations","title":"SyntaxChildCollecting Implementations","type":"symbol"}],"path":"\/documentation\/syntaxsparrow\/syntaxtree","title":"SyntaxTree","type":"class"},{"title":"Protocols","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/declaration","title":"Declaration","type":"protocol"},{"path":"\/documentation\/syntaxsparrow\/declarationcomponent","title":"DeclarationComponent","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/syntaxsparrow\/syntaxchildcollecting\/actors-rrgb","title":"var actors: [Actor]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/syntaxchildcollecting\/actors-2hcmf","title":"var actors: [Actor]","type":"property"}],"title":"SyntaxChildCollecting Implementations","type":"groupMarker"}],"path":"\/documentation\/syntaxsparrow\/syntaxchildcollecting\/actors-7vu89","title":"var actors: [Actor]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/syntaxchildcollecting\/childcollection","title":"var childCollection: DeclarationCollection","type":"property"},{"children":[{"children":[{"path":"\/documentation\/syntaxsparrow\/syntaxchildcollecting\/classes-6ldg1","title":"var classes: [Class]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/syntaxchildcollecting\/classes-kscv","title":"var classes: [Class]","type":"property"}],"title":"SyntaxChildCollecting Implementations","type":"groupMarker"}],"path":"\/documentation\/syntaxsparrow\/syntaxchildcollecting\/classes-9ji6h","title":"var classes: [Class]","type":"property"},{"children":[{"children":[{"path":"\/documentation\/syntaxsparrow\/syntaxchildcollecting\/conditionalcompilationblocks-7128m","title":"var conditionalCompilationBlocks: [ConditionalCompilationBlock]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/syntaxchildcollecting\/conditionalcompilationblocks-2t0wm","title":"var conditionalCompilationBlocks: [ConditionalCompilationBlock]","type":"property"}],"title":"SyntaxChildCollecting Implementations","type":"groupMarker"}],"path":"\/documentation\/syntaxsparrow\/syntaxchildcollecting\/conditionalcompilationblocks-8iwxb","title":"var conditionalCompilationBlocks: [ConditionalCompilationBlock]","type":"property"},{"children":[{"children":[{"path":"\/documentation\/syntaxsparrow\/syntaxchildcollecting\/deinitializers-9f7m5","title":"var deinitializers: [Deinitializer]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/syntaxchildcollecting\/deinitializers-97hbe","title":"var deinitializers: [Deinitializer]","type":"property"}],"title":"SyntaxChildCollecting Implementations","type":"groupMarker"}],"path":"\/documentation\/syntaxsparrow\/syntaxchildcollecting\/deinitializers-7237y","title":"var deinitializers: [Deinitializer]","type":"property"},{"children":[{"children":[{"path":"\/documentation\/syntaxsparrow\/syntaxchildcollecting\/enumerations-9vyv3","title":"var enumerations: [Enumeration]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/syntaxchildcollecting\/enumerations-8acg6","title":"var enumerations: [Enumeration]","type":"property"}],"title":"SyntaxChildCollecting Implementations","type":"groupMarker"}],"path":"\/documentation\/syntaxsparrow\/syntaxchildcollecting\/enumerations-9m80b","title":"var enumerations: [Enumeration]","type":"property"},{"children":[{"children":[{"path":"\/documentation\/syntaxsparrow\/syntaxchildcollecting\/extensions-9f4x5","title":"var extensions: [Extension]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/syntaxchildcollecting\/extensions-542v9","title":"var extensions: [Extension]","type":"property"}],"title":"SyntaxChildCollecting Implementations","type":"groupMarker"}],"path":"\/documentation\/syntaxsparrow\/syntaxchildcollecting\/extensions-2s6da","title":"var extensions: [Extension]","type":"property"},{"children":[{"children":[{"path":"\/documentation\/syntaxsparrow\/syntaxchildcollecting\/functions-9ifq9","title":"var functions: [Function]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/syntaxchildcollecting\/functions-7t0tz","title":"var functions: [Function]","type":"property"}],"title":"SyntaxChildCollecting Implementations","type":"groupMarker"}],"path":"\/documentation\/syntaxsparrow\/syntaxchildcollecting\/functions-7qfbs","title":"var functions: [Function]","type":"property"},{"children":[{"children":[{"path":"\/documentation\/syntaxsparrow\/syntaxchildcollecting\/imports-qgrk","title":"var imports: [Import]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/syntaxchildcollecting\/imports-2mo38","title":"var imports: [Import]","type":"property"}],"title":"SyntaxChildCollecting Implementations","type":"groupMarker"}],"path":"\/documentation\/syntaxsparrow\/syntaxchildcollecting\/imports-6sk7a","title":"var imports: [Import]","type":"property"},{"children":[{"children":[{"path":"\/documentation\/syntaxsparrow\/syntaxchildcollecting\/initializers-7fdyg","title":"var initializers: [Initializer]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/syntaxchildcollecting\/initializers-3gatd","title":"var initializers: [Initializer]","type":"property"}],"title":"SyntaxChildCollecting Implementations","type":"groupMarker"}],"path":"\/documentation\/syntaxsparrow\/syntaxchildcollecting\/initializers-2xn20","title":"var initializers: [Initializer]","type":"property"},{"children":[{"children":[{"path":"\/documentation\/syntaxsparrow\/syntaxchildcollecting\/operators-8ebkj","title":"var operators: [Operator]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/syntaxchildcollecting\/operators-2vode","title":"var operators: [Operator]","type":"property"}],"title":"SyntaxChildCollecting Implementations","type":"groupMarker"}],"path":"\/documentation\/syntaxsparrow\/syntaxchildcollecting\/operators-hm5o","title":"var operators: [Operator]","type":"property"},{"children":[{"children":[{"path":"\/documentation\/syntaxsparrow\/syntaxchildcollecting\/precedencegroups-2c60a","title":"var precedenceGroups: [PrecedenceGroup]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/syntaxchildcollecting\/precedencegroups-5pkhs","title":"var precedenceGroups: [PrecedenceGroup]","type":"property"}],"title":"SyntaxChildCollecting Implementations","type":"groupMarker"}],"path":"\/documentation\/syntaxsparrow\/syntaxchildcollecting\/precedencegroups-1lmlw","title":"var precedenceGroups: [PrecedenceGroup]","type":"property"},{"children":[{"children":[{"path":"\/documentation\/syntaxsparrow\/syntaxchildcollecting\/protocols-4rsxd","title":"var protocols: [ProtocolDecl]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/syntaxchildcollecting\/protocols-1nrei","title":"var protocols: [ProtocolDecl]","type":"property"}],"title":"SyntaxChildCollecting Implementations","type":"groupMarker"}],"path":"\/documentation\/syntaxsparrow\/syntaxchildcollecting\/protocols-90ys3","title":"var protocols: [ProtocolDecl]","type":"property"},{"children":[{"children":[{"path":"\/documentation\/syntaxsparrow\/syntaxchildcollecting\/structures-7agcr","title":"var structures: [Structure]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/syntaxchildcollecting\/structures-neoi","title":"var structures: [Structure]","type":"property"}],"title":"SyntaxChildCollecting Implementations","type":"groupMarker"}],"path":"\/documentation\/syntaxsparrow\/syntaxchildcollecting\/structures-9xqyw","title":"var structures: [Structure]","type":"property"},{"children":[{"children":[{"path":"\/documentation\/syntaxsparrow\/syntaxchildcollecting\/subscripts-2rj1z","title":"var subscripts: [Subscript]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/syntaxchildcollecting\/subscripts-4quai","title":"var subscripts: [Subscript]","type":"property"}],"title":"SyntaxChildCollecting Implementations","type":"groupMarker"}],"path":"\/documentation\/syntaxsparrow\/syntaxchildcollecting\/subscripts-6ok0u","title":"var subscripts: [Subscript]","type":"property"},{"children":[{"children":[{"path":"\/documentation\/syntaxsparrow\/syntaxchildcollecting\/typealiases-466lv","title":"var typealiases: [Typealias]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/syntaxchildcollecting\/typealiases-59ohy","title":"var typealiases: [Typealias]","type":"property"}],"title":"SyntaxChildCollecting Implementations","type":"groupMarker"}],"path":"\/documentation\/syntaxsparrow\/syntaxchildcollecting\/typealiases-4d1xp","title":"var typealiases: [Typealias]","type":"property"},{"children":[{"children":[{"path":"\/documentation\/syntaxsparrow\/syntaxchildcollecting\/variables-8g7us","title":"var variables: [Variable]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/syntaxchildcollecting\/variables-8oo66","title":"var variables: [Variable]","type":"property"}],"title":"SyntaxChildCollecting Implementations","type":"groupMarker"}],"path":"\/documentation\/syntaxsparrow\/syntaxchildcollecting\/variables-7j1oi","title":"var variables: [Variable]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/syntaxsparrow\/syntaxchildcollecting\/collectchildren(viewmode:)-2v4ia","title":"func collectChildren(viewMode: SyntaxTreeViewMode)","type":"method"},{"path":"\/documentation\/syntaxsparrow\/syntaxchildcollecting\/collectchildren(viewmode:)-8a304","title":"func collectChildren(viewMode: SyntaxTreeViewMode)","type":"method"}],"title":"SyntaxChildCollecting Implementations","type":"groupMarker"}],"path":"\/documentation\/syntaxsparrow\/syntaxchildcollecting\/collectchildren(viewmode:)-6uqcr","title":"func collectChildren(viewMode: SyntaxTreeViewMode)","type":"method"},{"path":"\/documentation\/syntaxsparrow\/syntaxchildcollecting\/recursivelycollectdeclarations(of:)","title":"func recursivelyCollectDeclarations<T>(of: T.Type) -> [T]","type":"method"}],"path":"\/documentation\/syntaxsparrow\/syntaxchildcollecting","title":"SyntaxChildCollecting","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/syntaxexplorercontextproviding\/isstale","title":"var isStale: Bool","type":"property"},{"path":"\/documentation\/syntaxsparrow\/syntaxexplorercontextproviding\/sourcebuffer","title":"var sourceBuffer: String?","type":"property"},{"path":"\/documentation\/syntaxsparrow\/syntaxexplorercontextproviding\/sourcelocationconverter","title":"var sourceLocationConverter: SparrowSourceLocationConverter","type":"property"},{"path":"\/documentation\/syntaxsparrow\/syntaxexplorercontextproviding\/viewmode","title":"var viewMode: SyntaxTreeViewMode","type":"property"}],"path":"\/documentation\/syntaxsparrow\/syntaxexplorercontextproviding","title":"SyntaxExplorerContextProviding","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/syntaxrepresenting\/syntax","title":"Syntax","type":"associatedtype"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/syntaxrepresenting\/init(node:)","title":"init(node: Syntax)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/syntaxrepresenting\/node","title":"var node: Syntax","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/syntaxrepresenting\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/syntaxsparrow\/syntaxrepresenting\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/syntaxrepresenting\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/syntaxsparrow\/syntaxrepresenting\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/syntaxrepresenting\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/syntaxsparrow\/syntaxrepresenting\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/syntaxsparrow\/syntaxrepresenting","title":"SyntaxRepresenting","type":"protocol"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/accessor\/init(node:)","title":"init(node: AccessorDeclSyntax)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/accessor\/attributes","title":"let attributes: [Attribute]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/accessor\/body","title":"let body: CodeBlock?","type":"property"},{"path":"\/documentation\/syntaxsparrow\/accessor\/childcollection","title":"var childCollection: DeclarationCollection","type":"property"},{"path":"\/documentation\/syntaxsparrow\/accessor\/effectspecifiers","title":"let effectSpecifiers: EffectSpecifiers?","type":"property"},{"path":"\/documentation\/syntaxsparrow\/accessor\/kind-swift.property","title":"let kind: Kind?","type":"property"},{"path":"\/documentation\/syntaxsparrow\/accessor\/modifier","title":"let modifier: Modifier?","type":"property"},{"path":"\/documentation\/syntaxsparrow\/accessor\/node","title":"let node: AccessorDeclSyntax","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/accessor\/collectchildren(viewmode:)","title":"func collectChildren(viewMode: SyntaxTreeViewMode)","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/accessor\/kind-swift.enum\/get","title":"case get","type":"case"},{"path":"\/documentation\/syntaxsparrow\/accessor\/kind-swift.enum\/set","title":"case set","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/accessor\/kind-swift.enum\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/accessor\/kind-swift.enum\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/syntaxsparrow\/accessor\/kind-swift.enum\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/accessor\/kind-swift.enum\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/accessor\/kind-swift.enum\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/accessor\/kind-swift.enum\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"},{"path":"\/documentation\/syntaxsparrow\/accessor\/kind-swift.enum\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/syntaxsparrow\/accessor\/kind-swift.enum\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/syntaxsparrow\/accessor\/kind-swift.enum","title":"Accessor.Kind","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/accessor\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/syntaxsparrow\/accessor\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/accessor\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/syntaxsparrow\/accessor\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/syntaxsparrow\/accessor\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/accessor\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/syntaxsparrow\/accessor\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/accessor\/actors","title":"var actors: [Actor]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/accessor\/classes","title":"var classes: [Class]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/accessor\/conditionalcompilationblocks","title":"var conditionalCompilationBlocks: [ConditionalCompilationBlock]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/accessor\/deinitializers","title":"var deinitializers: [Deinitializer]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/accessor\/enumerations","title":"var enumerations: [Enumeration]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/accessor\/extensions","title":"var extensions: [Extension]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/accessor\/functions","title":"var functions: [Function]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/accessor\/imports","title":"var imports: [Import]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/accessor\/initializers","title":"var initializers: [Initializer]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/accessor\/operators","title":"var operators: [Operator]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/accessor\/precedencegroups","title":"var precedenceGroups: [PrecedenceGroup]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/accessor\/protocols","title":"var protocols: [ProtocolDecl]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/accessor\/structures","title":"var structures: [Structure]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/accessor\/subscripts","title":"var subscripts: [Subscript]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/accessor\/typealiases","title":"var typealiases: [Typealias]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/accessor\/variables","title":"var variables: [Variable]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/accessor\/recursivelycollectdeclarations(of:)","title":"func recursivelyCollectDeclarations<T>(of: T.Type) -> [T]","type":"method"}],"path":"\/documentation\/syntaxsparrow\/accessor\/syntaxchildcollecting-implementations","title":"SyntaxChildCollecting Implementations","type":"symbol"}],"path":"\/documentation\/syntaxsparrow\/accessor","title":"Accessor","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/actor\/init(node:)","title":"init(node: ActorDeclSyntax)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/actor\/attributes","title":"var attributes: [Attribute]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/actor\/childcollection","title":"var childCollection: DeclarationCollection","type":"property"},{"path":"\/documentation\/syntaxsparrow\/actor\/genericparameters","title":"var genericParameters: [GenericParameter]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/actor\/genericrequirements","title":"var genericRequirements: [GenericRequirement]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/actor\/inheritance","title":"var inheritance: [String]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/actor\/keyword","title":"var keyword: String","type":"property"},{"path":"\/documentation\/syntaxsparrow\/actor\/modifiers","title":"var modifiers: [Modifier]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/actor\/name","title":"var name: String","type":"property"},{"path":"\/documentation\/syntaxsparrow\/actor\/node","title":"var node: ActorDeclSyntax","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/actor\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/syntaxsparrow\/actor\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/actor\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/syntaxsparrow\/actor\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/syntaxsparrow\/actor\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/actor\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/syntaxsparrow\/actor\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/actor\/actors","title":"var actors: [Actor]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/actor\/classes","title":"var classes: [Class]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/actor\/conditionalcompilationblocks","title":"var conditionalCompilationBlocks: [ConditionalCompilationBlock]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/actor\/deinitializers","title":"var deinitializers: [Deinitializer]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/actor\/enumerations","title":"var enumerations: [Enumeration]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/actor\/extensions","title":"var extensions: [Extension]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/actor\/functions","title":"var functions: [Function]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/actor\/imports","title":"var imports: [Import]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/actor\/initializers","title":"var initializers: [Initializer]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/actor\/operators","title":"var operators: [Operator]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/actor\/precedencegroups","title":"var precedenceGroups: [PrecedenceGroup]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/actor\/protocols","title":"var protocols: [ProtocolDecl]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/actor\/structures","title":"var structures: [Structure]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/actor\/subscripts","title":"var subscripts: [Subscript]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/actor\/typealiases","title":"var typealiases: [Typealias]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/actor\/variables","title":"var variables: [Variable]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/actor\/collectchildren(viewmode:)","title":"func collectChildren(viewMode: SyntaxTreeViewMode)","type":"method"},{"path":"\/documentation\/syntaxsparrow\/actor\/recursivelycollectdeclarations(of:)","title":"func recursivelyCollectDeclarations<T>(of: T.Type) -> [T]","type":"method"}],"path":"\/documentation\/syntaxsparrow\/actor\/syntaxchildcollecting-implementations","title":"SyntaxChildCollecting Implementations","type":"symbol"}],"path":"\/documentation\/syntaxsparrow\/actor","title":"Actor","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/arraydecl\/==(_:_:)","title":"static func == (ArrayDecl, ArrayDecl) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/arraydecl\/init(_:)-24oft","title":"init?(IdentifierTypeSyntax)","type":"init"},{"path":"\/documentation\/syntaxsparrow\/arraydecl\/init(_:)-x5zi","title":"init(ArrayTypeSyntax)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/arraydecl\/decltype-swift.property","title":"let declType: DeclType","type":"property"},{"path":"\/documentation\/syntaxsparrow\/arraydecl\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/syntaxsparrow\/arraydecl\/elementtype","title":"var elementType: EntityType","type":"property"},{"path":"\/documentation\/syntaxsparrow\/arraydecl\/isoptional","title":"var isOptional: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/arraydecl\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/arraydecl\/decltype-swift.enum\/generic","title":"case generic","type":"case"},{"path":"\/documentation\/syntaxsparrow\/arraydecl\/decltype-swift.enum\/squarebrackets","title":"case squareBrackets","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/arraydecl\/decltype-swift.enum\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/arraydecl\/decltype-swift.enum\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/syntaxsparrow\/arraydecl\/decltype-swift.enum\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/arraydecl\/decltype-swift.enum\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/arraydecl\/decltype-swift.enum\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/syntaxsparrow\/arraydecl\/decltype-swift.enum\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/syntaxsparrow\/arraydecl\/decltype-swift.enum","title":"ArrayDecl.DeclType","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/arraydecl\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/syntaxsparrow\/arraydecl\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/syntaxsparrow\/arraydecl","title":"ArrayDecl","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/associatedtype\/init(node:)","title":"init(node: AssociatedTypeDeclSyntax)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/associatedtype\/attributes","title":"var attributes: [Attribute]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/associatedtype\/genericrequirements","title":"var genericRequirements: [GenericRequirement]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/associatedtype\/inheritance","title":"var inheritance: [String]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/associatedtype\/keyword","title":"var keyword: String","type":"property"},{"path":"\/documentation\/syntaxsparrow\/associatedtype\/modifiers","title":"var modifiers: [Modifier]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/associatedtype\/name","title":"var name: String","type":"property"},{"path":"\/documentation\/syntaxsparrow\/associatedtype\/node","title":"var node: AssociatedTypeDeclSyntax","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/associatedtype\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/syntaxsparrow\/associatedtype\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/associatedtype\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/syntaxsparrow\/associatedtype\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/syntaxsparrow\/associatedtype\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/associatedtype\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/syntaxsparrow\/associatedtype\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/syntaxsparrow\/associatedtype","title":"AssociatedType","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/attribute\/argument\/init(name:value:)","title":"init(name: String?, value: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/attribute\/argument\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/syntaxsparrow\/attribute\/argument\/name","title":"let name: String?","type":"property"},{"path":"\/documentation\/syntaxsparrow\/attribute\/argument\/value","title":"let value: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/attribute\/argument\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/syntaxsparrow\/attribute\/argument\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/syntaxsparrow\/attribute\/argument","title":"Attribute.Argument","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/attribute\/init(node:)","title":"init(node: AttributeSyntax)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/attribute\/arguments","title":"var arguments: [Argument]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/attribute\/name","title":"var name: String","type":"property"},{"path":"\/documentation\/syntaxsparrow\/attribute\/node","title":"var node: AttributeSyntax","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/attribute\/fromattributelist(_:)","title":"static func fromAttributeList(AttributeListSyntax?) -> [Attribute]","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/attribute\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/syntaxsparrow\/attribute\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/attribute\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/syntaxsparrow\/attribute\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/syntaxsparrow\/attribute\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/attribute\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/syntaxsparrow\/attribute\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/syntaxsparrow\/attribute","title":"Attribute","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/class\/init(node:)","title":"init(node: ClassDeclSyntax)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/class\/attributes","title":"var attributes: [Attribute]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/class\/childcollection","title":"var childCollection: DeclarationCollection","type":"property"},{"path":"\/documentation\/syntaxsparrow\/class\/genericparameters","title":"var genericParameters: [GenericParameter]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/class\/genericrequirements","title":"var genericRequirements: [GenericRequirement]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/class\/inheritance","title":"var inheritance: [String]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/class\/keyword","title":"var keyword: String","type":"property"},{"path":"\/documentation\/syntaxsparrow\/class\/modifiers","title":"var modifiers: [Modifier]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/class\/name","title":"var name: String","type":"property"},{"path":"\/documentation\/syntaxsparrow\/class\/node","title":"var node: ClassDeclSyntax","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/class\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/syntaxsparrow\/class\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/class\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/syntaxsparrow\/class\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/syntaxsparrow\/class\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/class\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/syntaxsparrow\/class\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/class\/actors","title":"var actors: [Actor]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/class\/classes","title":"var classes: [Class]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/class\/conditionalcompilationblocks","title":"var conditionalCompilationBlocks: [ConditionalCompilationBlock]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/class\/deinitializers","title":"var deinitializers: [Deinitializer]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/class\/enumerations","title":"var enumerations: [Enumeration]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/class\/extensions","title":"var extensions: [Extension]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/class\/functions","title":"var functions: [Function]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/class\/imports","title":"var imports: [Import]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/class\/initializers","title":"var initializers: [Initializer]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/class\/operators","title":"var operators: [Operator]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/class\/precedencegroups","title":"var precedenceGroups: [PrecedenceGroup]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/class\/protocols","title":"var protocols: [ProtocolDecl]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/class\/structures","title":"var structures: [Structure]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/class\/subscripts","title":"var subscripts: [Subscript]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/class\/typealiases","title":"var typealiases: [Typealias]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/class\/variables","title":"var variables: [Variable]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/class\/collectchildren(viewmode:)","title":"func collectChildren(viewMode: SyntaxTreeViewMode)","type":"method"},{"path":"\/documentation\/syntaxsparrow\/class\/recursivelycollectdeclarations(of:)","title":"func recursivelyCollectDeclarations<T>(of: T.Type) -> [T]","type":"method"}],"path":"\/documentation\/syntaxsparrow\/class\/syntaxchildcollecting-implementations","title":"SyntaxChildCollecting Implementations","type":"symbol"}],"path":"\/documentation\/syntaxsparrow\/class","title":"Class","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/closure\/init(node:)","title":"init(node: FunctionTypeSyntax)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/closure\/declaration","title":"var declaration: String","type":"property"},{"path":"\/documentation\/syntaxsparrow\/closure\/effectspecifiers","title":"var effectSpecifiers: EffectSpecifiers?","type":"property"},{"path":"\/documentation\/syntaxsparrow\/closure\/input","title":"var input: EntityType","type":"property"},{"path":"\/documentation\/syntaxsparrow\/closure\/isautoescaping","title":"var isAutoEscaping: Bool","type":"property"},{"path":"\/documentation\/syntaxsparrow\/closure\/isescaping","title":"var isEscaping: Bool","type":"property"},{"path":"\/documentation\/syntaxsparrow\/closure\/isoptional","title":"var isOptional: Bool","type":"property"},{"path":"\/documentation\/syntaxsparrow\/closure\/isvoidinput","title":"var isVoidInput: Bool","type":"property"},{"path":"\/documentation\/syntaxsparrow\/closure\/isvoidoutput","title":"var isVoidOutput: Bool","type":"property"},{"path":"\/documentation\/syntaxsparrow\/closure\/node","title":"var node: FunctionTypeSyntax","type":"property"},{"path":"\/documentation\/syntaxsparrow\/closure\/output","title":"var output: EntityType","type":"property"},{"path":"\/documentation\/syntaxsparrow\/closure\/rawinput","title":"var rawInput: String","type":"property"},{"path":"\/documentation\/syntaxsparrow\/closure\/rawoutput","title":"var rawOutput: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/closure\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/syntaxsparrow\/closure\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/closure\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/syntaxsparrow\/closure\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/syntaxsparrow\/closure\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/closure\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/syntaxsparrow\/closure\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/syntaxsparrow\/closure","title":"Closure","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/codeblock\/statement\/init(node:)","title":"init(node: CodeBlockItemSyntax)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/codeblock\/statement\/kind-swift.property","title":"let kind: Kind","type":"property"},{"path":"\/documentation\/syntaxsparrow\/codeblock\/statement\/node","title":"let node: CodeBlockItemSyntax","type":"property"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/codeblock\/statement\/kind-swift.enum\/==(_:_:)","title":"static func == (Kind, Kind) -> Bool","type":"op"},{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/codeblock\/statement\/kind-swift.enum\/declaration(_:)","title":"case declaration(DeclSyntax)","type":"case"},{"path":"\/documentation\/syntaxsparrow\/codeblock\/statement\/kind-swift.enum\/expression(_:)","title":"case expression(ExprSyntax)","type":"case"},{"path":"\/documentation\/syntaxsparrow\/codeblock\/statement\/kind-swift.enum\/statement(_:)","title":"case statement(StmtSyntax)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/codeblock\/statement\/kind-swift.enum\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/syntaxsparrow\/codeblock\/statement\/kind-swift.enum\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/syntaxsparrow\/codeblock\/statement\/kind-swift.enum","title":"CodeBlock.Statement.Kind","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/codeblock\/statement\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/syntaxsparrow\/codeblock\/statement\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/codeblock\/statement\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/syntaxsparrow\/codeblock\/statement\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/syntaxsparrow\/codeblock\/statement\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/codeblock\/statement\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/syntaxsparrow\/codeblock\/statement\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/syntaxsparrow\/codeblock\/statement","title":"CodeBlock.Statement","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/codeblock\/init(node:)","title":"init(node: CodeBlockSyntax)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/codeblock\/childcollection","title":"var childCollection: DeclarationCollection","type":"property"},{"path":"\/documentation\/syntaxsparrow\/codeblock\/node","title":"let node: CodeBlockSyntax","type":"property"},{"path":"\/documentation\/syntaxsparrow\/codeblock\/statements","title":"let statements: [Statement]","type":"property"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/codeblock\/kind\/get","title":"case get","type":"case"},{"path":"\/documentation\/syntaxsparrow\/codeblock\/kind\/set","title":"case set","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/codeblock\/kind\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/codeblock\/kind\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/syntaxsparrow\/codeblock\/kind\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/codeblock\/kind\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/codeblock\/kind\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/codeblock\/kind\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"},{"path":"\/documentation\/syntaxsparrow\/codeblock\/kind\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/syntaxsparrow\/codeblock\/kind\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/syntaxsparrow\/codeblock\/kind","title":"CodeBlock.Kind","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/codeblock\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/syntaxsparrow\/codeblock\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/codeblock\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/syntaxsparrow\/codeblock\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/syntaxsparrow\/codeblock\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/codeblock\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/syntaxsparrow\/codeblock\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/codeblock\/actors","title":"var actors: [Actor]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/codeblock\/classes","title":"var classes: [Class]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/codeblock\/conditionalcompilationblocks","title":"var conditionalCompilationBlocks: [ConditionalCompilationBlock]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/codeblock\/deinitializers","title":"var deinitializers: [Deinitializer]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/codeblock\/enumerations","title":"var enumerations: [Enumeration]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/codeblock\/extensions","title":"var extensions: [Extension]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/codeblock\/functions","title":"var functions: [Function]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/codeblock\/imports","title":"var imports: [Import]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/codeblock\/initializers","title":"var initializers: [Initializer]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/codeblock\/operators","title":"var operators: [Operator]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/codeblock\/precedencegroups","title":"var precedenceGroups: [PrecedenceGroup]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/codeblock\/protocols","title":"var protocols: [ProtocolDecl]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/codeblock\/structures","title":"var structures: [Structure]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/codeblock\/subscripts","title":"var subscripts: [Subscript]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/codeblock\/typealiases","title":"var typealiases: [Typealias]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/codeblock\/variables","title":"var variables: [Variable]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/codeblock\/collectchildren(viewmode:)","title":"func collectChildren(viewMode: SyntaxTreeViewMode)","type":"method"},{"path":"\/documentation\/syntaxsparrow\/codeblock\/recursivelycollectdeclarations(of:)","title":"func recursivelyCollectDeclarations<T>(of: T.Type) -> [T]","type":"method"}],"path":"\/documentation\/syntaxsparrow\/codeblock\/syntaxchildcollecting-implementations","title":"SyntaxChildCollecting Implementations","type":"symbol"}],"path":"\/documentation\/syntaxsparrow\/codeblock","title":"CodeBlock","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/branch\/init(node:)","title":"init(node: IfConfigClauseSyntax)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/branch\/childcollection","title":"var childCollection: DeclarationCollection","type":"property"},{"path":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/branch\/condition","title":"var condition: String?","type":"property"},{"path":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/branch\/keyword-swift.property","title":"var keyword: Keyword","type":"property"},{"path":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/branch\/node","title":"var node: IfConfigClauseSyntax","type":"property"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/branch\/keyword-swift.enum\/else","title":"case `else`","type":"case"},{"path":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/branch\/keyword-swift.enum\/elseif","title":"case elseif","type":"case"},{"path":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/branch\/keyword-swift.enum\/if","title":"case `if`","type":"case"},{"path":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/branch\/keyword-swift.enum\/unsupported(keyword:)","title":"case unsupported(keyword: String)","type":"case"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/branch\/keyword-swift.enum\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/branch\/keyword-swift.enum\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/branch\/keyword-swift.enum\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/branch\/keyword-swift.enum","title":"ConditionalCompilationBlock.Branch.Keyword","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/branch\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/branch\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/branch\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/branch\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/branch\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/branch\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/branch\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/branch\/actors","title":"var actors: [Actor]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/branch\/classes","title":"var classes: [Class]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/branch\/conditionalcompilationblocks","title":"var conditionalCompilationBlocks: [ConditionalCompilationBlock]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/branch\/deinitializers","title":"var deinitializers: [Deinitializer]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/branch\/enumerations","title":"var enumerations: [Enumeration]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/branch\/extensions","title":"var extensions: [Extension]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/branch\/functions","title":"var functions: [Function]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/branch\/imports","title":"var imports: [Import]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/branch\/initializers","title":"var initializers: [Initializer]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/branch\/operators","title":"var operators: [Operator]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/branch\/precedencegroups","title":"var precedenceGroups: [PrecedenceGroup]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/branch\/protocols","title":"var protocols: [ProtocolDecl]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/branch\/structures","title":"var structures: [Structure]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/branch\/subscripts","title":"var subscripts: [Subscript]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/branch\/typealiases","title":"var typealiases: [Typealias]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/branch\/variables","title":"var variables: [Variable]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/branch\/collectchildren(viewmode:)","title":"func collectChildren(viewMode: SyntaxTreeViewMode)","type":"method"},{"path":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/branch\/recursivelycollectdeclarations(of:)","title":"func recursivelyCollectDeclarations<T>(of: T.Type) -> [T]","type":"method"}],"path":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/branch\/syntaxchildcollecting-implementations","title":"SyntaxChildCollecting Implementations","type":"symbol"}],"path":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/branch","title":"ConditionalCompilationBlock.Branch","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/init(node:)","title":"init(node: IfConfigDeclSyntax)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/branches","title":"var branches: [Branch]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/node","title":"var node: IfConfigDeclSyntax","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/syntaxsparrow\/conditionalcompilationblock\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/syntaxsparrow\/conditionalcompilationblock","title":"ConditionalCompilationBlock","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/deinitializer\/init(node:)","title":"init(node: DeinitializerDeclSyntax)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/deinitializer\/attributes","title":"var attributes: [Attribute]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/deinitializer\/body","title":"var body: CodeBlock?","type":"property"},{"path":"\/documentation\/syntaxsparrow\/deinitializer\/childcollection","title":"var childCollection: DeclarationCollection","type":"property"},{"path":"\/documentation\/syntaxsparrow\/deinitializer\/keyword","title":"var keyword: String","type":"property"},{"path":"\/documentation\/syntaxsparrow\/deinitializer\/modifiers","title":"var modifiers: [Modifier]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/deinitializer\/node","title":"var node: DeinitializerDeclSyntax","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/deinitializer\/collectchildren(viewmode:)","title":"func collectChildren(viewMode: SyntaxTreeViewMode)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/deinitializer\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/syntaxsparrow\/deinitializer\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/deinitializer\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/syntaxsparrow\/deinitializer\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/syntaxsparrow\/deinitializer\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/deinitializer\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/syntaxsparrow\/deinitializer\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/deinitializer\/actors","title":"var actors: [Actor]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/deinitializer\/classes","title":"var classes: [Class]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/deinitializer\/conditionalcompilationblocks","title":"var conditionalCompilationBlocks: [ConditionalCompilationBlock]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/deinitializer\/deinitializers","title":"var deinitializers: [Deinitializer]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/deinitializer\/enumerations","title":"var enumerations: [Enumeration]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/deinitializer\/extensions","title":"var extensions: [Extension]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/deinitializer\/functions","title":"var functions: [Function]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/deinitializer\/imports","title":"var imports: [Import]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/deinitializer\/initializers","title":"var initializers: [Initializer]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/deinitializer\/operators","title":"var operators: [Operator]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/deinitializer\/precedencegroups","title":"var precedenceGroups: [PrecedenceGroup]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/deinitializer\/protocols","title":"var protocols: [ProtocolDecl]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/deinitializer\/structures","title":"var structures: [Structure]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/deinitializer\/subscripts","title":"var subscripts: [Subscript]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/deinitializer\/typealiases","title":"var typealiases: [Typealias]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/deinitializer\/variables","title":"var variables: [Variable]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/deinitializer\/recursivelycollectdeclarations(of:)","title":"func recursivelyCollectDeclarations<T>(of: T.Type) -> [T]","type":"method"}],"path":"\/documentation\/syntaxsparrow\/deinitializer\/syntaxchildcollecting-implementations","title":"SyntaxChildCollecting Implementations","type":"symbol"}],"path":"\/documentation\/syntaxsparrow\/deinitializer","title":"Deinitializer","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/dictionarydecl\/==(_:_:)","title":"static func == (DictionaryDecl, DictionaryDecl) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/dictionarydecl\/init(_:)-40mwc","title":"init(DictionaryTypeSyntax)","type":"init"},{"path":"\/documentation\/syntaxsparrow\/dictionarydecl\/init(_:)-4ya6g","title":"init?(IdentifierTypeSyntax)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/dictionarydecl\/decltype-swift.property","title":"let declType: DeclType","type":"property"},{"path":"\/documentation\/syntaxsparrow\/dictionarydecl\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/syntaxsparrow\/dictionarydecl\/isoptional","title":"var isOptional: Bool","type":"property"},{"path":"\/documentation\/syntaxsparrow\/dictionarydecl\/keytype","title":"var keyType: EntityType","type":"property"},{"path":"\/documentation\/syntaxsparrow\/dictionarydecl\/valuetype","title":"var valueType: EntityType","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/dictionarydecl\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/dictionarydecl\/decltype-swift.enum\/generics","title":"case generics","type":"case"},{"path":"\/documentation\/syntaxsparrow\/dictionarydecl\/decltype-swift.enum\/squarebrackets","title":"case squareBrackets","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/dictionarydecl\/decltype-swift.enum\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/dictionarydecl\/decltype-swift.enum\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/syntaxsparrow\/dictionarydecl\/decltype-swift.enum\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/dictionarydecl\/decltype-swift.enum\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/dictionarydecl\/decltype-swift.enum\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/syntaxsparrow\/dictionarydecl\/decltype-swift.enum\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/syntaxsparrow\/dictionarydecl\/decltype-swift.enum","title":"DictionaryDecl.DeclType","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/dictionarydecl\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/syntaxsparrow\/dictionarydecl\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/syntaxsparrow\/dictionarydecl","title":"DictionaryDecl","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/effectspecifiers\/==(_:_:)","title":"static func == (`Self`, `Self`) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/effectspecifiers\/init(node:)-1qqc6","title":"init(node: FunctionEffectSpecifiersSyntax)","type":"init"},{"path":"\/documentation\/syntaxsparrow\/effectspecifiers\/init(node:)-3r6ht","title":"init(node: AccessorEffectSpecifiersSyntax)","type":"init"},{"path":"\/documentation\/syntaxsparrow\/effectspecifiers\/init(node:)-3td5x","title":"init(node: TypeEffectSpecifiersSyntax)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/effectspecifiers\/asyncspecifier","title":"let asyncSpecifier: String?","type":"property"},{"path":"\/documentation\/syntaxsparrow\/effectspecifiers\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/syntaxsparrow\/effectspecifiers\/node","title":"let node: SyntaxProtocol","type":"property"},{"path":"\/documentation\/syntaxsparrow\/effectspecifiers\/throwsspecifier","title":"let throwsSpecifier: String?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/effectspecifiers\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/effectspecifiers\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/syntaxsparrow\/effectspecifiers\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/syntaxsparrow\/effectspecifiers","title":"EffectSpecifiers","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/enumeration\/case\/init(node:)","title":"init(node: EnumCaseElementSyntax)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/enumeration\/case\/associatedvalues","title":"var associatedValues: [Parameter]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/enumeration\/case\/attributes","title":"var attributes: [Attribute]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/enumeration\/case\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/syntaxsparrow\/enumeration\/case\/keyword","title":"var keyword: String","type":"property"},{"path":"\/documentation\/syntaxsparrow\/enumeration\/case\/modifiers","title":"var modifiers: [Modifier]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/enumeration\/case\/name","title":"var name: String","type":"property"},{"path":"\/documentation\/syntaxsparrow\/enumeration\/case\/node","title":"var node: EnumCaseElementSyntax","type":"property"},{"path":"\/documentation\/syntaxsparrow\/enumeration\/case\/rawvalue","title":"var rawValue: String?","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/enumeration\/case\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/syntaxsparrow\/enumeration\/case\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/syntaxsparrow\/enumeration\/case\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/enumeration\/case\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/syntaxsparrow\/enumeration\/case\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/syntaxsparrow\/enumeration\/case","title":"Enumeration.Case","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/enumeration\/init(node:)","title":"init(node: EnumDeclSyntax)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/enumeration\/attributes","title":"var attributes: [Attribute]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/enumeration\/cases","title":"var cases: [Enumeration.Case]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/enumeration\/childcollection","title":"var childCollection: DeclarationCollection","type":"property"},{"path":"\/documentation\/syntaxsparrow\/enumeration\/genericparameters","title":"var genericParameters: [GenericParameter]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/enumeration\/genericrequirements","title":"var genericRequirements: [GenericRequirement]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/enumeration\/inheritance","title":"var inheritance: [String]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/enumeration\/keyword","title":"var keyword: String","type":"property"},{"path":"\/documentation\/syntaxsparrow\/enumeration\/modifiers","title":"var modifiers: [Modifier]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/enumeration\/name","title":"var name: String","type":"property"},{"path":"\/documentation\/syntaxsparrow\/enumeration\/node","title":"var node: EnumDeclSyntax","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/enumeration\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/syntaxsparrow\/enumeration\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/enumeration\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/syntaxsparrow\/enumeration\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/syntaxsparrow\/enumeration\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/enumeration\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/syntaxsparrow\/enumeration\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/enumeration\/actors","title":"var actors: [Actor]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/enumeration\/classes","title":"var classes: [Class]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/enumeration\/conditionalcompilationblocks","title":"var conditionalCompilationBlocks: [ConditionalCompilationBlock]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/enumeration\/deinitializers","title":"var deinitializers: [Deinitializer]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/enumeration\/enumerations","title":"var enumerations: [Enumeration]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/enumeration\/extensions","title":"var extensions: [Extension]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/enumeration\/functions","title":"var functions: [Function]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/enumeration\/imports","title":"var imports: [Import]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/enumeration\/initializers","title":"var initializers: [Initializer]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/enumeration\/operators","title":"var operators: [Operator]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/enumeration\/precedencegroups","title":"var precedenceGroups: [PrecedenceGroup]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/enumeration\/protocols","title":"var protocols: [ProtocolDecl]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/enumeration\/structures","title":"var structures: [Structure]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/enumeration\/subscripts","title":"var subscripts: [Subscript]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/enumeration\/typealiases","title":"var typealiases: [Typealias]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/enumeration\/variables","title":"var variables: [Variable]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/enumeration\/collectchildren(viewmode:)","title":"func collectChildren(viewMode: SyntaxTreeViewMode)","type":"method"},{"path":"\/documentation\/syntaxsparrow\/enumeration\/recursivelycollectdeclarations(of:)","title":"func recursivelyCollectDeclarations<T>(of: T.Type) -> [T]","type":"method"}],"path":"\/documentation\/syntaxsparrow\/enumeration\/syntaxchildcollecting-implementations","title":"SyntaxChildCollecting Implementations","type":"symbol"}],"path":"\/documentation\/syntaxsparrow\/enumeration","title":"Enumeration","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/extension\/init(node:)","title":"init(node: ExtensionDeclSyntax)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/extension\/attributes","title":"var attributes: [Attribute]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/extension\/childcollection","title":"var childCollection: DeclarationCollection","type":"property"},{"path":"\/documentation\/syntaxsparrow\/extension\/extendedtype","title":"var extendedType: String","type":"property"},{"path":"\/documentation\/syntaxsparrow\/extension\/genericrequirements","title":"var genericRequirements: [GenericRequirement]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/extension\/inheritance","title":"var inheritance: [String]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/extension\/keyword","title":"var keyword: String","type":"property"},{"path":"\/documentation\/syntaxsparrow\/extension\/modifiers","title":"var modifiers: [Modifier]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/extension\/node","title":"var node: ExtensionDeclSyntax","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/extension\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/syntaxsparrow\/extension\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/extension\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/syntaxsparrow\/extension\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/syntaxsparrow\/extension\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/extension\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/syntaxsparrow\/extension\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/extension\/actors","title":"var actors: [Actor]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/extension\/classes","title":"var classes: [Class]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/extension\/conditionalcompilationblocks","title":"var conditionalCompilationBlocks: [ConditionalCompilationBlock]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/extension\/deinitializers","title":"var deinitializers: [Deinitializer]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/extension\/enumerations","title":"var enumerations: [Enumeration]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/extension\/extensions","title":"var extensions: [Extension]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/extension\/functions","title":"var functions: [Function]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/extension\/imports","title":"var imports: [Import]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/extension\/initializers","title":"var initializers: [Initializer]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/extension\/operators","title":"var operators: [Operator]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/extension\/precedencegroups","title":"var precedenceGroups: [PrecedenceGroup]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/extension\/protocols","title":"var protocols: [ProtocolDecl]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/extension\/structures","title":"var structures: [Structure]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/extension\/subscripts","title":"var subscripts: [Subscript]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/extension\/typealiases","title":"var typealiases: [Typealias]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/extension\/variables","title":"var variables: [Variable]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/extension\/collectchildren(viewmode:)","title":"func collectChildren(viewMode: SyntaxTreeViewMode)","type":"method"},{"path":"\/documentation\/syntaxsparrow\/extension\/recursivelycollectdeclarations(of:)","title":"func recursivelyCollectDeclarations<T>(of: T.Type) -> [T]","type":"method"}],"path":"\/documentation\/syntaxsparrow\/extension\/syntaxchildcollecting-implementations","title":"SyntaxChildCollecting Implementations","type":"symbol"}],"path":"\/documentation\/syntaxsparrow\/extension","title":"Extension","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/function\/signature-swift.struct\/asynckeyword","title":"var asyncKeyword: String?","type":"property"},{"path":"\/documentation\/syntaxsparrow\/function\/signature-swift.struct\/effectspecifiers","title":"let effectSpecifiers: EffectSpecifiers?","type":"property"},{"path":"\/documentation\/syntaxsparrow\/function\/signature-swift.struct\/input","title":"let input: [Parameter]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/function\/signature-swift.struct\/output","title":"let output: EntityType?","type":"property"},{"path":"\/documentation\/syntaxsparrow\/function\/signature-swift.struct\/outputisoptional","title":"let outputIsOptional: Bool","type":"property"},{"path":"\/documentation\/syntaxsparrow\/function\/signature-swift.struct\/throwsorrethrowskeyword","title":"var throwsOrRethrowsKeyword: String?","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/function\/signature-swift.struct\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/syntaxsparrow\/function\/signature-swift.struct\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/syntaxsparrow\/function\/signature-swift.struct","title":"Function.Signature","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/function\/init(node:)","title":"init(node: FunctionDeclSyntax)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/function\/attributes","title":"var attributes: [Attribute]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/function\/body","title":"var body: CodeBlock?","type":"property"},{"path":"\/documentation\/syntaxsparrow\/function\/childcollection","title":"var childCollection: DeclarationCollection","type":"property"},{"path":"\/documentation\/syntaxsparrow\/function\/genericparameters","title":"var genericParameters: [GenericParameter]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/function\/genericrequirements","title":"var genericRequirements: [GenericRequirement]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/function\/identifier","title":"var identifier: String","type":"property"},{"path":"\/documentation\/syntaxsparrow\/function\/isoperator","title":"var isOperator: Bool","type":"property"},{"path":"\/documentation\/syntaxsparrow\/function\/keyword","title":"var keyword: String","type":"property"},{"path":"\/documentation\/syntaxsparrow\/function\/modifiers","title":"var modifiers: [Modifier]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/function\/node","title":"var node: FunctionDeclSyntax","type":"property"},{"path":"\/documentation\/syntaxsparrow\/function\/operatorkind","title":"var operatorKind: Operator.Kind?","type":"property"},{"path":"\/documentation\/syntaxsparrow\/function\/signature-swift.property","title":"var signature: Function.Signature","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/function\/collectchildren(viewmode:)","title":"func collectChildren(viewMode: SyntaxTreeViewMode)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/function\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/syntaxsparrow\/function\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/function\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/syntaxsparrow\/function\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/syntaxsparrow\/function\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/function\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/syntaxsparrow\/function\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/function\/actors","title":"var actors: [Actor]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/function\/classes","title":"var classes: [Class]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/function\/conditionalcompilationblocks","title":"var conditionalCompilationBlocks: [ConditionalCompilationBlock]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/function\/deinitializers","title":"var deinitializers: [Deinitializer]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/function\/enumerations","title":"var enumerations: [Enumeration]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/function\/extensions","title":"var extensions: [Extension]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/function\/functions","title":"var functions: [Function]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/function\/imports","title":"var imports: [Import]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/function\/initializers","title":"var initializers: [Initializer]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/function\/operators","title":"var operators: [Operator]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/function\/precedencegroups","title":"var precedenceGroups: [PrecedenceGroup]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/function\/protocols","title":"var protocols: [ProtocolDecl]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/function\/structures","title":"var structures: [Structure]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/function\/subscripts","title":"var subscripts: [Subscript]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/function\/typealiases","title":"var typealiases: [Typealias]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/function\/variables","title":"var variables: [Variable]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/function\/recursivelycollectdeclarations(of:)","title":"func recursivelyCollectDeclarations<T>(of: T.Type) -> [T]","type":"method"}],"path":"\/documentation\/syntaxsparrow\/function\/syntaxchildcollecting-implementations","title":"SyntaxChildCollecting Implementations","type":"symbol"}],"path":"\/documentation\/syntaxsparrow\/function","title":"Function","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/genericparameter\/init(node:)","title":"init(node: GenericParameterSyntax)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/genericparameter\/attributes","title":"var attributes: [Attribute]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/genericparameter\/name","title":"var name: String","type":"property"},{"path":"\/documentation\/syntaxsparrow\/genericparameter\/node","title":"var node: GenericParameterSyntax","type":"property"},{"path":"\/documentation\/syntaxsparrow\/genericparameter\/type","title":"var type: String?","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/genericparameter\/fromparameterlist(from:)","title":"static func fromParameterList(from: GenericParameterListSyntax?) -> [GenericParameter]","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/genericparameter\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/syntaxsparrow\/genericparameter\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/genericparameter\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/syntaxsparrow\/genericparameter\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/syntaxsparrow\/genericparameter\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/genericparameter\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/syntaxsparrow\/genericparameter\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/syntaxsparrow\/genericparameter","title":"GenericParameter","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/genericrequirement\/init(node:)","title":"init(node: GenericRequirementSyntax)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/genericrequirement\/lefttypeidentifier","title":"var leftTypeIdentifier: String","type":"property"},{"path":"\/documentation\/syntaxsparrow\/genericrequirement\/node","title":"var node: GenericRequirementSyntax","type":"property"},{"path":"\/documentation\/syntaxsparrow\/genericrequirement\/relation-swift.property","title":"var relation: Relation","type":"property"},{"path":"\/documentation\/syntaxsparrow\/genericrequirement\/righttypeidentifier","title":"var rightTypeIdentifier: String","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/genericrequirement\/fromrequirementlist(from:)","title":"static func fromRequirementList(from: GenericRequirementListSyntax?) -> [GenericRequirement]","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/genericrequirement\/relation-swift.enum\/conformance","title":"case conformance","type":"case"},{"path":"\/documentation\/syntaxsparrow\/genericrequirement\/relation-swift.enum\/layout","title":"case layout","type":"case"},{"path":"\/documentation\/syntaxsparrow\/genericrequirement\/relation-swift.enum\/sametype","title":"case sameType","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/genericrequirement\/relation-swift.enum\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/genericrequirement\/relation-swift.enum\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/syntaxsparrow\/genericrequirement\/relation-swift.enum\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/genericrequirement\/relation-swift.enum\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/genericrequirement\/relation-swift.enum\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/genericrequirement\/relation-swift.enum\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"},{"path":"\/documentation\/syntaxsparrow\/genericrequirement\/relation-swift.enum\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/syntaxsparrow\/genericrequirement\/relation-swift.enum\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/syntaxsparrow\/genericrequirement\/relation-swift.enum","title":"GenericRequirement.Relation","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/genericrequirement\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/syntaxsparrow\/genericrequirement\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/genericrequirement\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/syntaxsparrow\/genericrequirement\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/syntaxsparrow\/genericrequirement\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/genericrequirement\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/syntaxsparrow\/genericrequirement\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/syntaxsparrow\/genericrequirement","title":"GenericRequirement","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/import\/init(node:)","title":"init(node: ImportDeclSyntax)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/import\/attributes","title":"var attributes: [Attribute]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/import\/keyword","title":"var keyword: String","type":"property"},{"path":"\/documentation\/syntaxsparrow\/import\/kind","title":"var kind: String?","type":"property"},{"path":"\/documentation\/syntaxsparrow\/import\/modifiers","title":"var modifiers: [Modifier]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/import\/node","title":"var node: ImportDeclSyntax","type":"property"},{"path":"\/documentation\/syntaxsparrow\/import\/pathcomponents","title":"var pathComponents: [String]","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/import\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/syntaxsparrow\/import\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/import\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/syntaxsparrow\/import\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/syntaxsparrow\/import\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/import\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/syntaxsparrow\/import\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/syntaxsparrow\/import","title":"Import","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/initializer\/init(node:)","title":"init(node: InitializerDeclSyntax)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/initializer\/attributes","title":"var attributes: [Attribute]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/initializer\/body","title":"var body: CodeBlock?","type":"property"},{"path":"\/documentation\/syntaxsparrow\/initializer\/childcollection","title":"var childCollection: DeclarationCollection","type":"property"},{"path":"\/documentation\/syntaxsparrow\/initializer\/effectspecifiers","title":"var effectSpecifiers: EffectSpecifiers?","type":"property"},{"path":"\/documentation\/syntaxsparrow\/initializer\/genericparameters","title":"var genericParameters: [GenericParameter]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/initializer\/genericrequirements","title":"var genericRequirements: [GenericRequirement]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/initializer\/isoptional","title":"var isOptional: Bool","type":"property"},{"path":"\/documentation\/syntaxsparrow\/initializer\/keyword","title":"var keyword: String","type":"property"},{"path":"\/documentation\/syntaxsparrow\/initializer\/modifiers","title":"var modifiers: [Modifier]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/initializer\/node","title":"var node: InitializerDeclSyntax","type":"property"},{"path":"\/documentation\/syntaxsparrow\/initializer\/parameters","title":"var parameters: [Parameter]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/initializer\/throwsorrethrowskeyword","title":"var throwsOrRethrowsKeyword: String?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/initializer\/collectchildren(viewmode:)","title":"func collectChildren(viewMode: SyntaxTreeViewMode)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/initializer\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/syntaxsparrow\/initializer\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/initializer\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/syntaxsparrow\/initializer\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/syntaxsparrow\/initializer\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/initializer\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/syntaxsparrow\/initializer\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/initializer\/actors","title":"var actors: [Actor]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/initializer\/classes","title":"var classes: [Class]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/initializer\/conditionalcompilationblocks","title":"var conditionalCompilationBlocks: [ConditionalCompilationBlock]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/initializer\/deinitializers","title":"var deinitializers: [Deinitializer]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/initializer\/enumerations","title":"var enumerations: [Enumeration]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/initializer\/extensions","title":"var extensions: [Extension]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/initializer\/functions","title":"var functions: [Function]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/initializer\/imports","title":"var imports: [Import]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/initializer\/initializers","title":"var initializers: [Initializer]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/initializer\/operators","title":"var operators: [Operator]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/initializer\/precedencegroups","title":"var precedenceGroups: [PrecedenceGroup]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/initializer\/protocols","title":"var protocols: [ProtocolDecl]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/initializer\/structures","title":"var structures: [Structure]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/initializer\/subscripts","title":"var subscripts: [Subscript]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/initializer\/typealiases","title":"var typealiases: [Typealias]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/initializer\/variables","title":"var variables: [Variable]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/initializer\/recursivelycollectdeclarations(of:)","title":"func recursivelyCollectDeclarations<T>(of: T.Type) -> [T]","type":"method"}],"path":"\/documentation\/syntaxsparrow\/initializer\/syntaxchildcollecting-implementations","title":"SyntaxChildCollecting Implementations","type":"symbol"}],"path":"\/documentation\/syntaxsparrow\/initializer","title":"Initializer","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/modifier\/init(node:)","title":"init(node: DeclModifierSyntax)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/modifier\/detail","title":"var detail: String?","type":"property"},{"path":"\/documentation\/syntaxsparrow\/modifier\/name","title":"var name: String","type":"property"},{"path":"\/documentation\/syntaxsparrow\/modifier\/node","title":"let node: DeclModifierSyntax","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/modifier\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/syntaxsparrow\/modifier\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/modifier\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/syntaxsparrow\/modifier\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/syntaxsparrow\/modifier\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/modifier\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/syntaxsparrow\/modifier\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/syntaxsparrow\/modifier","title":"Modifier","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/operator\/init(node:)","title":"init(node: OperatorDeclSyntax)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/operator\/keyword","title":"var keyword: String","type":"property"},{"path":"\/documentation\/syntaxsparrow\/operator\/kind-swift.property","title":"var kind: Kind","type":"property"},{"path":"\/documentation\/syntaxsparrow\/operator\/name","title":"var name: String","type":"property"},{"path":"\/documentation\/syntaxsparrow\/operator\/node","title":"var node: OperatorDeclSyntax","type":"property"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/operator\/kind-swift.enum\/infix","title":"case infix","type":"case"},{"path":"\/documentation\/syntaxsparrow\/operator\/kind-swift.enum\/postfix","title":"case postfix","type":"case"},{"path":"\/documentation\/syntaxsparrow\/operator\/kind-swift.enum\/prefix","title":"case prefix","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/operator\/kind-swift.enum\/init(_:)-4i7vk","title":"init?([Modifier])","type":"init"},{"path":"\/documentation\/syntaxsparrow\/operator\/kind-swift.enum\/init(_:)-8ikpt","title":"init?(TokenSyntax)","type":"init"},{"path":"\/documentation\/syntaxsparrow\/operator\/kind-swift.enum\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/operator\/kind-swift.enum\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/syntaxsparrow\/operator\/kind-swift.enum\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/operator\/kind-swift.enum\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/operator\/kind-swift.enum\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/operator\/kind-swift.enum\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"},{"path":"\/documentation\/syntaxsparrow\/operator\/kind-swift.enum\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/syntaxsparrow\/operator\/kind-swift.enum\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/syntaxsparrow\/operator\/kind-swift.enum","title":"Operator.Kind","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/operator\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/syntaxsparrow\/operator\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/operator\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/syntaxsparrow\/operator\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/syntaxsparrow\/operator\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/operator\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/syntaxsparrow\/operator\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/syntaxsparrow\/operator","title":"Operator","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/parameter\/==(_:_:)","title":"static func == (Parameter, Parameter) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/parameter\/init(node:)-25bpg","title":"init(node: FunctionParameterSyntax)","type":"init"},{"path":"\/documentation\/syntaxsparrow\/parameter\/init(node:)-3u22t","title":"init(node: TupleTypeElementSyntax)","type":"init"},{"path":"\/documentation\/syntaxsparrow\/parameter\/init(node:)-55sny","title":"init(node: EnumCaseParameterSyntax)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/parameter\/attributes","title":"var attributes: [Attribute]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/parameter\/defaultargument","title":"var defaultArgument: String?","type":"property"},{"path":"\/documentation\/syntaxsparrow\/parameter\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/syntaxsparrow\/parameter\/isinout","title":"var isInOut: Bool","type":"property"},{"path":"\/documentation\/syntaxsparrow\/parameter\/islabelomitted","title":"var isLabelOmitted: Bool","type":"property"},{"path":"\/documentation\/syntaxsparrow\/parameter\/isoptional","title":"var isOptional: Bool","type":"property"},{"path":"\/documentation\/syntaxsparrow\/parameter\/isvariadic","title":"var isVariadic: Bool","type":"property"},{"path":"\/documentation\/syntaxsparrow\/parameter\/modifiers","title":"var modifiers: [Modifier]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/parameter\/name","title":"var name: String?","type":"property"},{"path":"\/documentation\/syntaxsparrow\/parameter\/node","title":"var node: Syntax","type":"property"},{"path":"\/documentation\/syntaxsparrow\/parameter\/rawtype","title":"var rawType: String?","type":"property"},{"path":"\/documentation\/syntaxsparrow\/parameter\/secondname","title":"var secondName: String?","type":"property"},{"path":"\/documentation\/syntaxsparrow\/parameter\/type","title":"var type: EntityType","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/parameter\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/parameter\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/syntaxsparrow\/parameter\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/syntaxsparrow\/parameter","title":"Parameter","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/precedencegroup\/init(node:)","title":"init(node: PrecedenceGroupDeclSyntax)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/precedencegroup\/assignment","title":"var assignment: Bool?","type":"property"},{"path":"\/documentation\/syntaxsparrow\/precedencegroup\/associativity-swift.property","title":"var associativity: Associativity?","type":"property"},{"path":"\/documentation\/syntaxsparrow\/precedencegroup\/keyword","title":"var keyword: String","type":"property"},{"path":"\/documentation\/syntaxsparrow\/precedencegroup\/name","title":"var name: String","type":"property"},{"path":"\/documentation\/syntaxsparrow\/precedencegroup\/node","title":"var node: PrecedenceGroupDeclSyntax","type":"property"},{"path":"\/documentation\/syntaxsparrow\/precedencegroup\/relations","title":"var relations: [Relation]","type":"property"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/precedencegroup\/associativity-swift.enum\/left","title":"case left","type":"case"},{"path":"\/documentation\/syntaxsparrow\/precedencegroup\/associativity-swift.enum\/right","title":"case right","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/precedencegroup\/associativity-swift.enum\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/precedencegroup\/associativity-swift.enum\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/syntaxsparrow\/precedencegroup\/associativity-swift.enum\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/precedencegroup\/associativity-swift.enum\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/precedencegroup\/associativity-swift.enum\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/syntaxsparrow\/precedencegroup\/associativity-swift.enum\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/syntaxsparrow\/precedencegroup\/associativity-swift.enum","title":"PrecedenceGroup.Associativity","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/precedencegroup\/relation\/higherthan(_:)","title":"case higherThan([String])","type":"case"},{"path":"\/documentation\/syntaxsparrow\/precedencegroup\/relation\/lowerthan(_:)","title":"case lowerThan([String])","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/precedencegroup\/relation\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/syntaxsparrow\/precedencegroup\/relation\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/syntaxsparrow\/precedencegroup\/relation","title":"PrecedenceGroup.Relation","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/precedencegroup\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/syntaxsparrow\/precedencegroup\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/precedencegroup\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/syntaxsparrow\/precedencegroup\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/syntaxsparrow\/precedencegroup\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/precedencegroup\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/syntaxsparrow\/precedencegroup\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/syntaxsparrow\/precedencegroup","title":"PrecedenceGroup","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/protocoldecl\/init(node:)","title":"init(node: ProtocolDeclSyntax)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/protocoldecl\/associatedtypes","title":"var associatedTypes: [AssociatedType]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/protocoldecl\/attributes","title":"var attributes: [Attribute]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/protocoldecl\/childcollection","title":"var childCollection: DeclarationCollection","type":"property"},{"path":"\/documentation\/syntaxsparrow\/protocoldecl\/genericrequirements","title":"var genericRequirements: [GenericRequirement]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/protocoldecl\/inheritance","title":"var inheritance: [String]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/protocoldecl\/keyword","title":"var keyword: String","type":"property"},{"path":"\/documentation\/syntaxsparrow\/protocoldecl\/modifiers","title":"var modifiers: [Modifier]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/protocoldecl\/name","title":"var name: String","type":"property"},{"path":"\/documentation\/syntaxsparrow\/protocoldecl\/node","title":"var node: ProtocolDeclSyntax","type":"property"},{"path":"\/documentation\/syntaxsparrow\/protocoldecl\/primaryassociatedtypes","title":"var primaryAssociatedTypes: [String]","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/protocoldecl\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/syntaxsparrow\/protocoldecl\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/protocoldecl\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/syntaxsparrow\/protocoldecl\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/syntaxsparrow\/protocoldecl\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/protocoldecl\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/syntaxsparrow\/protocoldecl\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/protocoldecl\/actors","title":"var actors: [Actor]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/protocoldecl\/classes","title":"var classes: [Class]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/protocoldecl\/conditionalcompilationblocks","title":"var conditionalCompilationBlocks: [ConditionalCompilationBlock]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/protocoldecl\/deinitializers","title":"var deinitializers: [Deinitializer]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/protocoldecl\/enumerations","title":"var enumerations: [Enumeration]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/protocoldecl\/extensions","title":"var extensions: [Extension]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/protocoldecl\/functions","title":"var functions: [Function]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/protocoldecl\/imports","title":"var imports: [Import]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/protocoldecl\/initializers","title":"var initializers: [Initializer]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/protocoldecl\/operators","title":"var operators: [Operator]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/protocoldecl\/precedencegroups","title":"var precedenceGroups: [PrecedenceGroup]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/protocoldecl\/protocols","title":"var protocols: [ProtocolDecl]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/protocoldecl\/structures","title":"var structures: [Structure]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/protocoldecl\/subscripts","title":"var subscripts: [Subscript]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/protocoldecl\/typealiases","title":"var typealiases: [Typealias]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/protocoldecl\/variables","title":"var variables: [Variable]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/protocoldecl\/collectchildren(viewmode:)","title":"func collectChildren(viewMode: SyntaxTreeViewMode)","type":"method"},{"path":"\/documentation\/syntaxsparrow\/protocoldecl\/recursivelycollectdeclarations(of:)","title":"func recursivelyCollectDeclarations<T>(of: T.Type) -> [T]","type":"method"}],"path":"\/documentation\/syntaxsparrow\/protocoldecl\/syntaxchildcollecting-implementations","title":"SyntaxChildCollecting Implementations","type":"symbol"}],"path":"\/documentation\/syntaxsparrow\/protocoldecl","title":"ProtocolDecl","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/result\/==(_:_:)","title":"static func == (Result, Result) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/result\/init(_:)","title":"init?(IdentifierTypeSyntax)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/result\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/syntaxsparrow\/result\/failuretype","title":"var failureType: EntityType","type":"property"},{"path":"\/documentation\/syntaxsparrow\/result\/isoptional","title":"var isOptional: Bool","type":"property"},{"path":"\/documentation\/syntaxsparrow\/result\/successtype","title":"var successType: EntityType","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/result\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/result\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/syntaxsparrow\/result\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/syntaxsparrow\/result","title":"Result","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/setdecl\/==(_:_:)","title":"static func == (SetDecl, SetDecl) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/setdecl\/init(_:)","title":"init?(IdentifierTypeSyntax)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/setdecl\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/syntaxsparrow\/setdecl\/elementtype","title":"var elementType: EntityType","type":"property"},{"path":"\/documentation\/syntaxsparrow\/setdecl\/isoptional","title":"var isOptional: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/setdecl\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/setdecl\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/syntaxsparrow\/setdecl\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/syntaxsparrow\/setdecl","title":"SetDecl","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/structure\/init(node:)","title":"init(node: StructDeclSyntax)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/structure\/attributes","title":"var attributes: [Attribute]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/structure\/childcollection","title":"var childCollection: DeclarationCollection","type":"property"},{"path":"\/documentation\/syntaxsparrow\/structure\/genericparameters","title":"var genericParameters: [GenericParameter]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/structure\/genericrequirements","title":"var genericRequirements: [GenericRequirement]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/structure\/inheritance","title":"var inheritance: [String]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/structure\/keyword","title":"var keyword: String","type":"property"},{"path":"\/documentation\/syntaxsparrow\/structure\/modifiers","title":"var modifiers: [Modifier]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/structure\/name","title":"var name: String","type":"property"},{"path":"\/documentation\/syntaxsparrow\/structure\/node","title":"var node: StructDeclSyntax","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/structure\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/syntaxsparrow\/structure\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/structure\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/syntaxsparrow\/structure\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/syntaxsparrow\/structure\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/structure\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/syntaxsparrow\/structure\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/structure\/actors","title":"var actors: [Actor]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/structure\/classes","title":"var classes: [Class]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/structure\/conditionalcompilationblocks","title":"var conditionalCompilationBlocks: [ConditionalCompilationBlock]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/structure\/deinitializers","title":"var deinitializers: [Deinitializer]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/structure\/enumerations","title":"var enumerations: [Enumeration]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/structure\/extensions","title":"var extensions: [Extension]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/structure\/functions","title":"var functions: [Function]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/structure\/imports","title":"var imports: [Import]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/structure\/initializers","title":"var initializers: [Initializer]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/structure\/operators","title":"var operators: [Operator]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/structure\/precedencegroups","title":"var precedenceGroups: [PrecedenceGroup]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/structure\/protocols","title":"var protocols: [ProtocolDecl]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/structure\/structures","title":"var structures: [Structure]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/structure\/subscripts","title":"var subscripts: [Subscript]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/structure\/typealiases","title":"var typealiases: [Typealias]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/structure\/variables","title":"var variables: [Variable]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/structure\/collectchildren(viewmode:)","title":"func collectChildren(viewMode: SyntaxTreeViewMode)","type":"method"},{"path":"\/documentation\/syntaxsparrow\/structure\/recursivelycollectdeclarations(of:)","title":"func recursivelyCollectDeclarations<T>(of: T.Type) -> [T]","type":"method"}],"path":"\/documentation\/syntaxsparrow\/structure\/syntaxchildcollecting-implementations","title":"SyntaxChildCollecting Implementations","type":"symbol"}],"path":"\/documentation\/syntaxsparrow\/structure","title":"Structure","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/subscript\/init(node:)","title":"init(node: SubscriptDeclSyntax)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/subscript\/accessors","title":"var accessors: [Accessor]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/subscript\/attributes","title":"var attributes: [Attribute]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/subscript\/genericparameters","title":"var genericParameters: [GenericParameter]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/subscript\/genericrequirements","title":"var genericRequirements: [GenericRequirement]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/subscript\/indices","title":"var indices: [Parameter]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/subscript\/keyword","title":"var keyword: String","type":"property"},{"path":"\/documentation\/syntaxsparrow\/subscript\/modifiers","title":"var modifiers: [Modifier]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/subscript\/node","title":"var node: SubscriptDeclSyntax","type":"property"},{"path":"\/documentation\/syntaxsparrow\/subscript\/returntype","title":"var returnType: EntityType","type":"property"},{"path":"\/documentation\/syntaxsparrow\/subscript\/returntypeisoptional","title":"var returnTypeIsOptional: Bool","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/subscript\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/syntaxsparrow\/subscript\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/subscript\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/syntaxsparrow\/subscript\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/syntaxsparrow\/subscript\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/subscript\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/syntaxsparrow\/subscript\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/syntaxsparrow\/subscript","title":"Subscript","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/syntaxexplorercontext\/init(viewmode:sourcebuffer:sourcelocationconverter:isstale:)","title":"init(viewMode: SyntaxTreeViewMode, sourceBuffer: String?, sourceLocationConverter: SparrowSourceLocationConverter?, isStale: Bool)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/syntaxexplorercontext\/isstale","title":"var isStale: Bool","type":"property"},{"path":"\/documentation\/syntaxsparrow\/syntaxexplorercontext\/sourcebuffer","title":"var sourceBuffer: String?","type":"property"},{"path":"\/documentation\/syntaxsparrow\/syntaxexplorercontext\/sourcelocationconverter","title":"var sourceLocationConverter: SparrowSourceLocationConverter","type":"property"},{"path":"\/documentation\/syntaxsparrow\/syntaxexplorercontext\/viewmode","title":"var viewMode: SyntaxTreeViewMode","type":"property"}],"path":"\/documentation\/syntaxsparrow\/syntaxexplorercontext","title":"SyntaxExplorerContext","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/syntaxsourcedetails\/init(location:source:)","title":"init(location: SyntaxSourceLocation, source: String?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/syntaxsourcedetails\/location","title":"let location: SyntaxSourceLocation","type":"property"},{"path":"\/documentation\/syntaxsparrow\/syntaxsourcedetails\/source","title":"let source: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/syntaxsourcedetails\/stringrange(in:)","title":"func stringRange(in: String) -> NSRange?","type":"method"},{"path":"\/documentation\/syntaxsparrow\/syntaxsourcedetails\/substringrange(in:)","title":"func substringRange(in: String) -> Range<String.Index>?","type":"method"}],"path":"\/documentation\/syntaxsparrow\/syntaxsourcedetails","title":"SyntaxSourceDetails","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/syntaxsourcelocation\/position\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/syntaxsparrow\/syntaxsourcelocation\/position\/init(line:offset:utf8offset:)","title":"init(line: Int?, offset: Int?, utf8Offset: Int?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/syntaxsourcelocation\/position\/column","title":"let column: Int?","type":"property"},{"path":"\/documentation\/syntaxsparrow\/syntaxsourcelocation\/position\/line","title":"let line: Int?","type":"property"},{"path":"\/documentation\/syntaxsparrow\/syntaxsourcelocation\/position\/utf8offset","title":"let utf8Offset: Int?","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/syntaxsourcelocation\/position\/empty","title":"static let empty: Position","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/syntaxsourcelocation\/position\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/syntaxsparrow\/syntaxsourcelocation\/position\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/syntaxsparrow\/syntaxsourcelocation\/position","title":"SyntaxSourceLocation.Position","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/syntaxsourcelocation\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/syntaxsourcelocation\/end","title":"let end: Position","type":"property"},{"path":"\/documentation\/syntaxsparrow\/syntaxsourcelocation\/start","title":"let start: Position","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/syntaxsourcelocation\/empty","title":"static let empty: SyntaxSourceLocation","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/syntaxsourcelocation\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/syntaxsparrow\/syntaxsourcelocation\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/syntaxsparrow\/syntaxsourcelocation","title":"SyntaxSourceLocation","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/tuple\/==(_:_:)","title":"static func == (Tuple, Tuple) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/tuple\/init(node:)-2tk9","title":"init(node: TupleTypeElementListSyntax)","type":"init"},{"path":"\/documentation\/syntaxsparrow\/tuple\/init(node:)-4o18m","title":"init(node: TupleTypeSyntax)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/tuple\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/syntaxsparrow\/tuple\/elements","title":"var elements: [Parameter]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/tuple\/isoptional","title":"var isOptional: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/tuple\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/tuple\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/syntaxsparrow\/tuple\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/syntaxsparrow\/tuple","title":"Tuple","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/typealias\/init(node:)","title":"init(node: TypeAliasDeclSyntax)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/typealias\/attributes","title":"var attributes: [Attribute]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/typealias\/genericparameters","title":"var genericParameters: [GenericParameter]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/typealias\/genericrequirements","title":"var genericRequirements: [GenericRequirement]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/typealias\/initializedtype","title":"var initializedType: EntityType","type":"property"},{"path":"\/documentation\/syntaxsparrow\/typealias\/initializedtypeisoptional","title":"var initializedTypeIsOptional: Bool","type":"property"},{"path":"\/documentation\/syntaxsparrow\/typealias\/keyword","title":"var keyword: String","type":"property"},{"path":"\/documentation\/syntaxsparrow\/typealias\/modifiers","title":"var modifiers: [Modifier]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/typealias\/name","title":"var name: String","type":"property"},{"path":"\/documentation\/syntaxsparrow\/typealias\/node","title":"var node: TypeAliasDeclSyntax","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/typealias\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/syntaxsparrow\/typealias\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/typealias\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/syntaxsparrow\/typealias\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/syntaxsparrow\/typealias\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/typealias\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/syntaxsparrow\/typealias\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/syntaxsparrow\/typealias","title":"Typealias","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/variable\/init(node:)","title":"init(node: PatternBindingSyntax)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/variable\/accessors","title":"var accessors: [Accessor]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/variable\/attributes","title":"var attributes: [Attribute]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/variable\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/syntaxsparrow\/variable\/hassetter","title":"var hasSetter: Bool","type":"property"},{"path":"\/documentation\/syntaxsparrow\/variable\/initializedvalue","title":"var initializedValue: String?","type":"property"},{"path":"\/documentation\/syntaxsparrow\/variable\/isoptional","title":"var isOptional: Bool","type":"property"},{"path":"\/documentation\/syntaxsparrow\/variable\/keyword","title":"var keyword: String","type":"property"},{"path":"\/documentation\/syntaxsparrow\/variable\/modifiers","title":"var modifiers: [Modifier]","type":"property"},{"path":"\/documentation\/syntaxsparrow\/variable\/name","title":"var name: String","type":"property"},{"path":"\/documentation\/syntaxsparrow\/variable\/node","title":"var node: PatternBindingSyntax","type":"property"},{"path":"\/documentation\/syntaxsparrow\/variable\/parentdeclarationsyntax","title":"var parentDeclarationSyntax: VariableDeclSyntax?","type":"property"},{"path":"\/documentation\/syntaxsparrow\/variable\/type","title":"var type: EntityType","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/variable\/variables(from:)","title":"static func variables(from: VariableDeclSyntax) -> [Variable]","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/variable\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/syntaxsparrow\/variable\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/syntaxsparrow\/variable\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/variable\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/syntaxsparrow\/variable\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/syntaxsparrow\/variable","title":"Variable","type":"struct"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/entitytype\/array(_:)","title":"case array(ArrayDecl)","type":"case"},{"path":"\/documentation\/syntaxsparrow\/entitytype\/closure(_:)","title":"case closure(Closure)","type":"case"},{"path":"\/documentation\/syntaxsparrow\/entitytype\/dictionary(_:)","title":"case dictionary(DictionaryDecl)","type":"case"},{"path":"\/documentation\/syntaxsparrow\/entitytype\/empty","title":"case empty","type":"case"},{"path":"\/documentation\/syntaxsparrow\/entitytype\/result(_:)","title":"case result(Result)","type":"case"},{"path":"\/documentation\/syntaxsparrow\/entitytype\/set(_:)","title":"case set(SetDecl)","type":"case"},{"path":"\/documentation\/syntaxsparrow\/entitytype\/simple(_:)","title":"case simple(String)","type":"case"},{"path":"\/documentation\/syntaxsparrow\/entitytype\/tuple(_:)","title":"case tuple(Tuple)","type":"case"},{"path":"\/documentation\/syntaxsparrow\/entitytype\/void(_:_:)","title":"case void(String, Bool)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/entitytype\/init(_:)","title":"init(TypeSyntax)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/entitytype\/description","title":"var description: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/entitytype\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/syntaxsparrow\/entitytype\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/syntaxsparrow\/entitytype","title":"EntityType","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/syntaxtreeerror\/invalidcontextforsourceresolving(_:)","title":"case invalidContextForSourceResolving(String)","type":"case"},{"path":"\/documentation\/syntaxsparrow\/syntaxtreeerror\/unabletoresolvefileatpath(_:)","title":"case unableToResolveFileAtPath(String)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/syntaxtreeerror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/syntaxsparrow\/syntaxtreeerror\/error-implementations","title":"Error Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/syntaxtreeerror\/errordescription","title":"var errorDescription: String?","type":"property"},{"path":"\/documentation\/syntaxsparrow\/syntaxtreeerror\/failurereason","title":"var failureReason: String?","type":"property"},{"path":"\/documentation\/syntaxsparrow\/syntaxtreeerror\/helpanchor","title":"var helpAnchor: String?","type":"property"},{"path":"\/documentation\/syntaxsparrow\/syntaxtreeerror\/recoverysuggestion","title":"var recoverySuggestion: String?","type":"property"}],"path":"\/documentation\/syntaxsparrow\/syntaxtreeerror\/localizederror-implementations","title":"LocalizedError Implementations","type":"symbol"}],"path":"\/documentation\/syntaxsparrow\/syntaxtreeerror","title":"SyntaxTreeError","type":"enum"},{"title":"Extended Modules","type":"groupMarker"},{"children":[{"title":"Extended Protocols","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/swiftsyntax\/syntaxprotocol\/context","title":"var context: DeclSyntaxProtocol?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/syntaxsparrow\/swiftsyntax\/syntaxprotocol\/firstparent(returning:)","title":"func firstParent(returning: (SyntaxProtocol) -> SyntaxProtocol?) -> SyntaxProtocol?","type":"method"}],"path":"\/documentation\/syntaxsparrow\/swiftsyntax\/syntaxprotocol","title":"SyntaxProtocol","type":"extension"}],"path":"\/documentation\/syntaxsparrow\/swiftsyntax","title":"SwiftSyntax","type":"extension"}],"path":"\/documentation\/syntaxsparrow","title":"SyntaxSparrow","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":1}}